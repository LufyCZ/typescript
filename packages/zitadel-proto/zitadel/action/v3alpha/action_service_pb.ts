// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/action/v3alpha/action_service.proto (package zitadel.action.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { SetRESTAsync, SetRESTCall, SetRESTWebhook, Target } from "./target_pb.js";
import { Details, ListDetails, ListQuery } from "../../object/v2beta/object_pb.js";
import { SearchQuery, TargetFieldName, TargetSearchQuery } from "./query_pb.js";
import { Condition, Execution, ExecutionTargetType } from "./execution_pb.js";

/**
 * @generated from message zitadel.action.v3alpha.CreateTargetRequest
 */
export class CreateTargetRequest extends Message<CreateTargetRequest> {
  /**
   * Unique name of the target.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Defines the target type and how the response of the target is treated.
   *
   * @generated from oneof zitadel.action.v3alpha.CreateTargetRequest.target_type
   */
  targetType: {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTWebhook rest_webhook = 2;
     */
    value: SetRESTWebhook;
    case: "restWebhook";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTCall rest_call = 3;
     */
    value: SetRESTCall;
    case: "restCall";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTAsync rest_async = 4;
     */
    value: SetRESTAsync;
    case: "restAsync";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Timeout defines the duration until ZITADEL cancels the execution.
   *
   * @generated from field: google.protobuf.Duration timeout = 5;
   */
  timeout?: Duration;

  /**
   * @generated from field: string endpoint = 6;
   */
  endpoint = "";

  constructor(data?: PartialMessage<CreateTargetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.CreateTargetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rest_webhook", kind: "message", T: SetRESTWebhook, oneof: "target_type" },
    { no: 3, name: "rest_call", kind: "message", T: SetRESTCall, oneof: "target_type" },
    { no: 4, name: "rest_async", kind: "message", T: SetRESTAsync, oneof: "target_type" },
    { no: 5, name: "timeout", kind: "message", T: Duration },
    { no: 6, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTargetRequest {
    return new CreateTargetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTargetRequest {
    return new CreateTargetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTargetRequest {
    return new CreateTargetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTargetRequest | PlainMessage<CreateTargetRequest> | undefined, b: CreateTargetRequest | PlainMessage<CreateTargetRequest> | undefined): boolean {
    return proto3.util.equals(CreateTargetRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.CreateTargetResponse
 */
export class CreateTargetResponse extends Message<CreateTargetResponse> {
  /**
   * ID is the read-only unique identifier of the target.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Details provide some base information (such as the last change date) of the target.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  constructor(data?: PartialMessage<CreateTargetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.CreateTargetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTargetResponse {
    return new CreateTargetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTargetResponse {
    return new CreateTargetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTargetResponse {
    return new CreateTargetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTargetResponse | PlainMessage<CreateTargetResponse> | undefined, b: CreateTargetResponse | PlainMessage<CreateTargetResponse> | undefined): boolean {
    return proto3.util.equals(CreateTargetResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.UpdateTargetRequest
 */
export class UpdateTargetRequest extends Message<UpdateTargetRequest> {
  /**
   * unique identifier of the target.
   *
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  /**
   * Optionally change the unique name of the target.
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * Optionally change the target type and how the response of the target is treated,
   * or its target URL.
   *
   * @generated from oneof zitadel.action.v3alpha.UpdateTargetRequest.target_type
   */
  targetType: {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTWebhook rest_webhook = 3;
     */
    value: SetRESTWebhook;
    case: "restWebhook";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTCall rest_call = 4;
     */
    value: SetRESTCall;
    case: "restCall";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTAsync rest_async = 5;
     */
    value: SetRESTAsync;
    case: "restAsync";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Optionally change the timeout, which defines the duration until ZITADEL cancels the execution.
   *
   * @generated from field: optional google.protobuf.Duration timeout = 6;
   */
  timeout?: Duration;

  /**
   * @generated from field: optional string endpoint = 7;
   */
  endpoint?: string;

  constructor(data?: PartialMessage<UpdateTargetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.UpdateTargetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "rest_webhook", kind: "message", T: SetRESTWebhook, oneof: "target_type" },
    { no: 4, name: "rest_call", kind: "message", T: SetRESTCall, oneof: "target_type" },
    { no: 5, name: "rest_async", kind: "message", T: SetRESTAsync, oneof: "target_type" },
    { no: 6, name: "timeout", kind: "message", T: Duration, opt: true },
    { no: 7, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTargetRequest {
    return new UpdateTargetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTargetRequest {
    return new UpdateTargetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTargetRequest {
    return new UpdateTargetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTargetRequest | PlainMessage<UpdateTargetRequest> | undefined, b: UpdateTargetRequest | PlainMessage<UpdateTargetRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTargetRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.UpdateTargetResponse
 */
export class UpdateTargetResponse extends Message<UpdateTargetResponse> {
  /**
   * Details provide some base information (such as the last change date) of the target.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<UpdateTargetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.UpdateTargetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTargetResponse {
    return new UpdateTargetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTargetResponse {
    return new UpdateTargetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTargetResponse {
    return new UpdateTargetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTargetResponse | PlainMessage<UpdateTargetResponse> | undefined, b: UpdateTargetResponse | PlainMessage<UpdateTargetResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTargetResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.DeleteTargetRequest
 */
export class DeleteTargetRequest extends Message<DeleteTargetRequest> {
  /**
   * unique identifier of the target.
   *
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  constructor(data?: PartialMessage<DeleteTargetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.DeleteTargetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTargetRequest {
    return new DeleteTargetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTargetRequest {
    return new DeleteTargetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTargetRequest {
    return new DeleteTargetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTargetRequest | PlainMessage<DeleteTargetRequest> | undefined, b: DeleteTargetRequest | PlainMessage<DeleteTargetRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTargetRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.DeleteTargetResponse
 */
export class DeleteTargetResponse extends Message<DeleteTargetResponse> {
  /**
   * Details provide some base information (such as the last change date) of the target.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeleteTargetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.DeleteTargetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTargetResponse {
    return new DeleteTargetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTargetResponse {
    return new DeleteTargetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTargetResponse {
    return new DeleteTargetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTargetResponse | PlainMessage<DeleteTargetResponse> | undefined, b: DeleteTargetResponse | PlainMessage<DeleteTargetResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTargetResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListTargetsRequest
 */
export class ListTargetsRequest extends Message<ListTargetsRequest> {
  /**
   * list limitations and ordering.
   *
   * @generated from field: zitadel.object.v2beta.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * the field the result is sorted.
   *
   * @generated from field: zitadel.action.v3alpha.TargetFieldName sorting_column = 2;
   */
  sortingColumn = TargetFieldName.FIELD_NAME_UNSPECIFIED;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.action.v3alpha.TargetSearchQuery queries = 3;
   */
  queries: TargetSearchQuery[] = [];

  constructor(data?: PartialMessage<ListTargetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListTargetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListQuery },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(TargetFieldName) },
    { no: 3, name: "queries", kind: "message", T: TargetSearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTargetsRequest {
    return new ListTargetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTargetsRequest {
    return new ListTargetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTargetsRequest {
    return new ListTargetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTargetsRequest | PlainMessage<ListTargetsRequest> | undefined, b: ListTargetsRequest | PlainMessage<ListTargetsRequest> | undefined): boolean {
    return proto3.util.equals(ListTargetsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListTargetsResponse
 */
export class ListTargetsResponse extends Message<ListTargetsResponse> {
  /**
   * Details provides information about the returned result including total amount found.
   *
   * @generated from field: zitadel.object.v2beta.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * States by which field the results are sorted.
   *
   * @generated from field: zitadel.action.v3alpha.TargetFieldName sorting_column = 2;
   */
  sortingColumn = TargetFieldName.FIELD_NAME_UNSPECIFIED;

  /**
   * The result contains the user schemas, which matched the queries.
   *
   * @generated from field: repeated zitadel.action.v3alpha.Target result = 3;
   */
  result: Target[] = [];

  constructor(data?: PartialMessage<ListTargetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListTargetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(TargetFieldName) },
    { no: 3, name: "result", kind: "message", T: Target, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTargetsResponse {
    return new ListTargetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTargetsResponse {
    return new ListTargetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTargetsResponse {
    return new ListTargetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTargetsResponse | PlainMessage<ListTargetsResponse> | undefined, b: ListTargetsResponse | PlainMessage<ListTargetsResponse> | undefined): boolean {
    return proto3.util.equals(ListTargetsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.GetTargetByIDRequest
 */
export class GetTargetByIDRequest extends Message<GetTargetByIDRequest> {
  /**
   * unique identifier of the target.
   *
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  constructor(data?: PartialMessage<GetTargetByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.GetTargetByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTargetByIDRequest {
    return new GetTargetByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTargetByIDRequest {
    return new GetTargetByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTargetByIDRequest {
    return new GetTargetByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTargetByIDRequest | PlainMessage<GetTargetByIDRequest> | undefined, b: GetTargetByIDRequest | PlainMessage<GetTargetByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetTargetByIDRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.GetTargetByIDResponse
 */
export class GetTargetByIDResponse extends Message<GetTargetByIDResponse> {
  /**
   * @generated from field: zitadel.action.v3alpha.Target target = 1;
   */
  target?: Target;

  constructor(data?: PartialMessage<GetTargetByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.GetTargetByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: Target },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTargetByIDResponse {
    return new GetTargetByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTargetByIDResponse {
    return new GetTargetByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTargetByIDResponse {
    return new GetTargetByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTargetByIDResponse | PlainMessage<GetTargetByIDResponse> | undefined, b: GetTargetByIDResponse | PlainMessage<GetTargetByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetTargetByIDResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.SetExecutionRequest
 */
export class SetExecutionRequest extends Message<SetExecutionRequest> {
  /**
   * Defines the condition type and content of the condition for execution.
   *
   * @generated from field: zitadel.action.v3alpha.Condition condition = 1;
   */
  condition?: Condition;

  /**
   * Ordered list of targets/includes called during the execution.
   *
   * @generated from field: repeated zitadel.action.v3alpha.ExecutionTargetType targets = 2;
   */
  targets: ExecutionTargetType[] = [];

  constructor(data?: PartialMessage<SetExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.SetExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "condition", kind: "message", T: Condition },
    { no: 2, name: "targets", kind: "message", T: ExecutionTargetType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetExecutionRequest {
    return new SetExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetExecutionRequest {
    return new SetExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetExecutionRequest {
    return new SetExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetExecutionRequest | PlainMessage<SetExecutionRequest> | undefined, b: SetExecutionRequest | PlainMessage<SetExecutionRequest> | undefined): boolean {
    return proto3.util.equals(SetExecutionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.SetExecutionResponse
 */
export class SetExecutionResponse extends Message<SetExecutionResponse> {
  /**
   * Details provide some base information (such as the last change date) of the execution.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  constructor(data?: PartialMessage<SetExecutionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.SetExecutionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetExecutionResponse {
    return new SetExecutionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetExecutionResponse {
    return new SetExecutionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetExecutionResponse {
    return new SetExecutionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetExecutionResponse | PlainMessage<SetExecutionResponse> | undefined, b: SetExecutionResponse | PlainMessage<SetExecutionResponse> | undefined): boolean {
    return proto3.util.equals(SetExecutionResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.DeleteExecutionRequest
 */
export class DeleteExecutionRequest extends Message<DeleteExecutionRequest> {
  /**
   * Unique identifier of the execution.
   *
   * @generated from field: zitadel.action.v3alpha.Condition condition = 1;
   */
  condition?: Condition;

  constructor(data?: PartialMessage<DeleteExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.DeleteExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "condition", kind: "message", T: Condition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExecutionRequest {
    return new DeleteExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExecutionRequest {
    return new DeleteExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExecutionRequest {
    return new DeleteExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExecutionRequest | PlainMessage<DeleteExecutionRequest> | undefined, b: DeleteExecutionRequest | PlainMessage<DeleteExecutionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteExecutionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.DeleteExecutionResponse
 */
export class DeleteExecutionResponse extends Message<DeleteExecutionResponse> {
  /**
   * Details provide some base information (such as the last change date) of the execution.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeleteExecutionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.DeleteExecutionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExecutionResponse {
    return new DeleteExecutionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExecutionResponse {
    return new DeleteExecutionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExecutionResponse {
    return new DeleteExecutionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExecutionResponse | PlainMessage<DeleteExecutionResponse> | undefined, b: DeleteExecutionResponse | PlainMessage<DeleteExecutionResponse> | undefined): boolean {
    return proto3.util.equals(DeleteExecutionResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionsRequest
 */
export class ListExecutionsRequest extends Message<ListExecutionsRequest> {
  /**
   * list limitations and ordering.
   *
   * @generated from field: zitadel.object.v2beta.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.action.v3alpha.SearchQuery queries = 2;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<ListExecutionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListQuery },
    { no: 2, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionsRequest {
    return new ListExecutionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionsRequest {
    return new ListExecutionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionsRequest {
    return new ListExecutionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionsRequest | PlainMessage<ListExecutionsRequest> | undefined, b: ListExecutionsRequest | PlainMessage<ListExecutionsRequest> | undefined): boolean {
    return proto3.util.equals(ListExecutionsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionsResponse
 */
export class ListExecutionsResponse extends Message<ListExecutionsResponse> {
  /**
   * Details provides information about the returned result including total amount found.
   *
   * @generated from field: zitadel.object.v2beta.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * The result contains the executions, which matched the queries.
   *
   * @generated from field: repeated zitadel.action.v3alpha.Execution result = 2;
   */
  result: Execution[] = [];

  constructor(data?: PartialMessage<ListExecutionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "result", kind: "message", T: Execution, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionsResponse {
    return new ListExecutionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionsResponse {
    return new ListExecutionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionsResponse {
    return new ListExecutionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionsResponse | PlainMessage<ListExecutionsResponse> | undefined, b: ListExecutionsResponse | PlainMessage<ListExecutionsResponse> | undefined): boolean {
    return proto3.util.equals(ListExecutionsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionFunctionsRequest
 */
export class ListExecutionFunctionsRequest extends Message<ListExecutionFunctionsRequest> {
  constructor(data?: PartialMessage<ListExecutionFunctionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionFunctionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionFunctionsRequest {
    return new ListExecutionFunctionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionFunctionsRequest {
    return new ListExecutionFunctionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionFunctionsRequest {
    return new ListExecutionFunctionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionFunctionsRequest | PlainMessage<ListExecutionFunctionsRequest> | undefined, b: ListExecutionFunctionsRequest | PlainMessage<ListExecutionFunctionsRequest> | undefined): boolean {
    return proto3.util.equals(ListExecutionFunctionsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionFunctionsResponse
 */
export class ListExecutionFunctionsResponse extends Message<ListExecutionFunctionsResponse> {
  /**
   * All available methods
   *
   * @generated from field: repeated string functions = 1;
   */
  functions: string[] = [];

  constructor(data?: PartialMessage<ListExecutionFunctionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionFunctionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "functions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionFunctionsResponse {
    return new ListExecutionFunctionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionFunctionsResponse {
    return new ListExecutionFunctionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionFunctionsResponse {
    return new ListExecutionFunctionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionFunctionsResponse | PlainMessage<ListExecutionFunctionsResponse> | undefined, b: ListExecutionFunctionsResponse | PlainMessage<ListExecutionFunctionsResponse> | undefined): boolean {
    return proto3.util.equals(ListExecutionFunctionsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionMethodsRequest
 */
export class ListExecutionMethodsRequest extends Message<ListExecutionMethodsRequest> {
  constructor(data?: PartialMessage<ListExecutionMethodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionMethodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionMethodsRequest {
    return new ListExecutionMethodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionMethodsRequest {
    return new ListExecutionMethodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionMethodsRequest {
    return new ListExecutionMethodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionMethodsRequest | PlainMessage<ListExecutionMethodsRequest> | undefined, b: ListExecutionMethodsRequest | PlainMessage<ListExecutionMethodsRequest> | undefined): boolean {
    return proto3.util.equals(ListExecutionMethodsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionMethodsResponse
 */
export class ListExecutionMethodsResponse extends Message<ListExecutionMethodsResponse> {
  /**
   * All available methods
   *
   * @generated from field: repeated string methods = 1;
   */
  methods: string[] = [];

  constructor(data?: PartialMessage<ListExecutionMethodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionMethodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionMethodsResponse {
    return new ListExecutionMethodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionMethodsResponse {
    return new ListExecutionMethodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionMethodsResponse {
    return new ListExecutionMethodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionMethodsResponse | PlainMessage<ListExecutionMethodsResponse> | undefined, b: ListExecutionMethodsResponse | PlainMessage<ListExecutionMethodsResponse> | undefined): boolean {
    return proto3.util.equals(ListExecutionMethodsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionServicesRequest
 */
export class ListExecutionServicesRequest extends Message<ListExecutionServicesRequest> {
  constructor(data?: PartialMessage<ListExecutionServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionServicesRequest {
    return new ListExecutionServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionServicesRequest {
    return new ListExecutionServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionServicesRequest {
    return new ListExecutionServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionServicesRequest | PlainMessage<ListExecutionServicesRequest> | undefined, b: ListExecutionServicesRequest | PlainMessage<ListExecutionServicesRequest> | undefined): boolean {
    return proto3.util.equals(ListExecutionServicesRequest, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ListExecutionServicesResponse
 */
export class ListExecutionServicesResponse extends Message<ListExecutionServicesResponse> {
  /**
   * All available methods
   *
   * @generated from field: repeated string services = 1;
   */
  services: string[] = [];

  constructor(data?: PartialMessage<ListExecutionServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ListExecutionServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExecutionServicesResponse {
    return new ListExecutionServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExecutionServicesResponse {
    return new ListExecutionServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExecutionServicesResponse {
    return new ListExecutionServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExecutionServicesResponse | PlainMessage<ListExecutionServicesResponse> | undefined, b: ListExecutionServicesResponse | PlainMessage<ListExecutionServicesResponse> | undefined): boolean {
    return proto3.util.equals(ListExecutionServicesResponse, a, b);
  }
}

