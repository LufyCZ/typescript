// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/schema/v3alpha/user_schema.proto (package zitadel.user.schema.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Details, TextQueryMethod } from "../../../object/v2beta/object_pb.js";

/**
 * @generated from enum zitadel.user.schema.v3alpha.FieldName
 */
export enum FieldName {
  /**
   * @generated from enum value: FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FIELD_NAME_TYPE = 1;
   */
  TYPE = 1,

  /**
   * @generated from enum value: FIELD_NAME_STATE = 2;
   */
  STATE = 2,

  /**
   * @generated from enum value: FIELD_NAME_REVISION = 3;
   */
  REVISION = 3,

  /**
   * @generated from enum value: FIELD_NAME_CHANGE_DATE = 4;
   */
  CHANGE_DATE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(FieldName)
proto3.util.setEnumType(FieldName, "zitadel.user.schema.v3alpha.FieldName", [
  { no: 0, name: "FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "FIELD_NAME_TYPE" },
  { no: 2, name: "FIELD_NAME_STATE" },
  { no: 3, name: "FIELD_NAME_REVISION" },
  { no: 4, name: "FIELD_NAME_CHANGE_DATE" },
]);

/**
 * @generated from enum zitadel.user.schema.v3alpha.State
 */
export enum State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: STATE_INACTIVE = 2;
   */
  INACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(State)
proto3.util.setEnumType(State, "zitadel.user.schema.v3alpha.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_ACTIVE" },
  { no: 2, name: "STATE_INACTIVE" },
]);

/**
 * @generated from enum zitadel.user.schema.v3alpha.AuthenticatorType
 */
export enum AuthenticatorType {
  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_USERNAME = 1;
   */
  USERNAME = 1,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_PASSWORD = 2;
   */
  PASSWORD = 2,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_WEBAUTHN = 3;
   */
  WEBAUTHN = 3,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_TOTP = 4;
   */
  TOTP = 4,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_OTP_EMAIL = 5;
   */
  OTP_EMAIL = 5,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_OTP_SMS = 6;
   */
  OTP_SMS = 6,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_AUTHENTICATION_KEY = 7;
   */
  AUTHENTICATION_KEY = 7,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_IDENTITY_PROVIDER = 8;
   */
  IDENTITY_PROVIDER = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthenticatorType)
proto3.util.setEnumType(AuthenticatorType, "zitadel.user.schema.v3alpha.AuthenticatorType", [
  { no: 0, name: "AUTHENTICATOR_TYPE_UNSPECIFIED" },
  { no: 1, name: "AUTHENTICATOR_TYPE_USERNAME" },
  { no: 2, name: "AUTHENTICATOR_TYPE_PASSWORD" },
  { no: 3, name: "AUTHENTICATOR_TYPE_WEBAUTHN" },
  { no: 4, name: "AUTHENTICATOR_TYPE_TOTP" },
  { no: 5, name: "AUTHENTICATOR_TYPE_OTP_EMAIL" },
  { no: 6, name: "AUTHENTICATOR_TYPE_OTP_SMS" },
  { no: 7, name: "AUTHENTICATOR_TYPE_AUTHENTICATION_KEY" },
  { no: 8, name: "AUTHENTICATOR_TYPE_IDENTITY_PROVIDER" },
]);

/**
 * @generated from message zitadel.user.schema.v3alpha.UserSchema
 */
export class UserSchema extends Message<UserSchema> {
  /**
   * ID is the read-only unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  /**
   * Type is a human readable text describing the schema.
   *
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * Current state of the schema.
   *
   * @generated from field: zitadel.user.schema.v3alpha.State state = 4;
   */
  state = State.UNSPECIFIED;

  /**
   * Revision is a read only version of the schema, each update of the `schema`-field increases the revision.
   *
   * @generated from field: uint32 revision = 5;
   */
  revision = 0;

  /**
   * JSON schema representation defining the user.
   *
   * @generated from field: google.protobuf.Struct schema = 6;
   */
  schema?: Struct;

  /**
   * Defines the possible types of authenticators.
   * This allows creating different user types like human/machine without usage of actions to validate possible authenticators.
   * Removal of an authenticator does not remove the authenticator on a user.
   *
   * @generated from field: repeated zitadel.user.schema.v3alpha.AuthenticatorType possible_authenticators = 7;
   */
  possibleAuthenticators: AuthenticatorType[] = [];

  constructor(data?: PartialMessage<UserSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.UserSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: Details },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 5, name: "revision", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "schema", kind: "message", T: Struct },
    { no: 7, name: "possible_authenticators", kind: "enum", T: proto3.getEnumType(AuthenticatorType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSchema {
    return new UserSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSchema {
    return new UserSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSchema {
    return new UserSchema().fromJsonString(jsonString, options);
  }

  static equals(a: UserSchema | PlainMessage<UserSchema> | undefined, b: UserSchema | PlainMessage<UserSchema> | undefined): boolean {
    return proto3.util.equals(UserSchema, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.SearchQuery
 */
export class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.user.schema.v3alpha.SearchQuery.query
   */
  query: {
    /**
     * Union the results of each sub query ('OR').
     *
     * @generated from field: zitadel.user.schema.v3alpha.OrQuery or_query = 1;
     */
    value: OrQuery;
    case: "orQuery";
  } | {
    /**
     * Limit the result to match all sub queries ('AND').
     * Note that if you specify multiple queries, they will be implicitly used as andQueries.
     * Use the andQuery in combination with orQuery and notQuery.
     *
     * @generated from field: zitadel.user.schema.v3alpha.AndQuery and_query = 2;
     */
    value: AndQuery;
    case: "andQuery";
  } | {
    /**
     * Exclude / Negate the result of the sub query ('NOT').
     *
     * @generated from field: zitadel.user.schema.v3alpha.NotQuery not_query = 3;
     */
    value: NotQuery;
    case: "notQuery";
  } | {
    /**
     * Limit the result to a specific schema type.
     *
     * @generated from field: zitadel.user.schema.v3alpha.TypeQuery type_query = 5;
     */
    value: TypeQuery;
    case: "typeQuery";
  } | {
    /**
     * Limit the result to a specific state of the schema.
     *
     * @generated from field: zitadel.user.schema.v3alpha.StateQuery state_query = 6;
     */
    value: StateQuery;
    case: "stateQuery";
  } | {
    /**
     * Limit the result to a specific schema ID.
     *
     * @generated from field: zitadel.user.schema.v3alpha.IDQuery id_query = 7;
     */
    value: IDQuery;
    case: "idQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.SearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "or_query", kind: "message", T: OrQuery, oneof: "query" },
    { no: 2, name: "and_query", kind: "message", T: AndQuery, oneof: "query" },
    { no: 3, name: "not_query", kind: "message", T: NotQuery, oneof: "query" },
    { no: 5, name: "type_query", kind: "message", T: TypeQuery, oneof: "query" },
    { no: 6, name: "state_query", kind: "message", T: StateQuery, oneof: "query" },
    { no: 7, name: "id_query", kind: "message", T: IDQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery {
    return new SearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean {
    return proto3.util.equals(SearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.OrQuery
 */
export class OrQuery extends Message<OrQuery> {
  /**
   * @generated from field: repeated zitadel.user.schema.v3alpha.SearchQuery queries = 1;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<OrQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.OrQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrQuery {
    return new OrQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrQuery {
    return new OrQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrQuery {
    return new OrQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrQuery | PlainMessage<OrQuery> | undefined, b: OrQuery | PlainMessage<OrQuery> | undefined): boolean {
    return proto3.util.equals(OrQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.AndQuery
 */
export class AndQuery extends Message<AndQuery> {
  /**
   * @generated from field: repeated zitadel.user.schema.v3alpha.SearchQuery queries = 1;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<AndQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.AndQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AndQuery {
    return new AndQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AndQuery {
    return new AndQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AndQuery {
    return new AndQuery().fromJsonString(jsonString, options);
  }

  static equals(a: AndQuery | PlainMessage<AndQuery> | undefined, b: AndQuery | PlainMessage<AndQuery> | undefined): boolean {
    return proto3.util.equals(AndQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.NotQuery
 */
export class NotQuery extends Message<NotQuery> {
  /**
   * @generated from field: zitadel.user.schema.v3alpha.SearchQuery query = 1;
   */
  query?: SearchQuery;

  constructor(data?: PartialMessage<NotQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.NotQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: SearchQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotQuery {
    return new NotQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotQuery {
    return new NotQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotQuery {
    return new NotQuery().fromJsonString(jsonString, options);
  }

  static equals(a: NotQuery | PlainMessage<NotQuery> | undefined, b: NotQuery | PlainMessage<NotQuery> | undefined): boolean {
    return proto3.util.equals(NotQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.IDQuery
 */
export class IDQuery extends Message<IDQuery> {
  /**
   * Defines the ID of the user schema to query for.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Defines which text comparison method used for the id query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<IDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.IDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDQuery {
    return new IDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDQuery {
    return new IDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDQuery {
    return new IDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IDQuery | PlainMessage<IDQuery> | undefined, b: IDQuery | PlainMessage<IDQuery> | undefined): boolean {
    return proto3.util.equals(IDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.TypeQuery
 */
export class TypeQuery extends Message<TypeQuery> {
  /**
   * Defines which type to query for.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Defines which text comparison method used for the type query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<TypeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.TypeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeQuery {
    return new TypeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeQuery {
    return new TypeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeQuery {
    return new TypeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TypeQuery | PlainMessage<TypeQuery> | undefined, b: TypeQuery | PlainMessage<TypeQuery> | undefined): boolean {
    return proto3.util.equals(TypeQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.schema.v3alpha.StateQuery
 */
export class StateQuery extends Message<StateQuery> {
  /**
   * Defines the state to query for.
   *
   * @generated from field: zitadel.user.schema.v3alpha.State state = 1;
   */
  state = State.UNSPECIFIED;

  constructor(data?: PartialMessage<StateQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.StateQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(State) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateQuery {
    return new StateQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateQuery {
    return new StateQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateQuery {
    return new StateQuery().fromJsonString(jsonString, options);
  }

  static equals(a: StateQuery | PlainMessage<StateQuery> | undefined, b: StateQuery | PlainMessage<StateQuery> | undefined): boolean {
    return proto3.util.equals(StateQuery, a, b);
  }
}

