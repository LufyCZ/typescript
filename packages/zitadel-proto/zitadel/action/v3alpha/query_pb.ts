// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/action/v3alpha/query.proto (package zitadel.action.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Condition } from "./execution_pb.js";
import { TextQueryMethod } from "../../object/v2beta/object_pb.js";

/**
 * @generated from enum zitadel.action.v3alpha.ExecutionType
 */
export enum ExecutionType {
  /**
   * @generated from enum value: EXECUTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EXECUTION_TYPE_REQUEST = 1;
   */
  REQUEST = 1,

  /**
   * @generated from enum value: EXECUTION_TYPE_RESPONSE = 2;
   */
  RESPONSE = 2,

  /**
   * @generated from enum value: EXECUTION_TYPE_EVENT = 3;
   */
  EVENT = 3,

  /**
   * @generated from enum value: EXECUTION_TYPE_FUNCTION = 4;
   */
  FUNCTION = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ExecutionType)
proto3.util.setEnumType(ExecutionType, "zitadel.action.v3alpha.ExecutionType", [
  { no: 0, name: "EXECUTION_TYPE_UNSPECIFIED" },
  { no: 1, name: "EXECUTION_TYPE_REQUEST" },
  { no: 2, name: "EXECUTION_TYPE_RESPONSE" },
  { no: 3, name: "EXECUTION_TYPE_EVENT" },
  { no: 4, name: "EXECUTION_TYPE_FUNCTION" },
]);

/**
 * @generated from enum zitadel.action.v3alpha.TargetFieldName
 */
export enum TargetFieldName {
  /**
   * @generated from enum value: FIELD_NAME_UNSPECIFIED = 0;
   */
  FIELD_NAME_UNSPECIFIED = 0,

  /**
   * @generated from enum value: FIELD_NAME_ID = 1;
   */
  FIELD_NAME_ID = 1,

  /**
   * @generated from enum value: FIELD_NAME_CREATION_DATE = 2;
   */
  FIELD_NAME_CREATION_DATE = 2,

  /**
   * @generated from enum value: FIELD_NAME_CHANGE_DATE = 3;
   */
  FIELD_NAME_CHANGE_DATE = 3,

  /**
   * @generated from enum value: FIELD_NAME_NAME = 4;
   */
  FIELD_NAME_NAME = 4,

  /**
   * @generated from enum value: FIELD_NAME_TARGET_TYPE = 5;
   */
  FIELD_NAME_TARGET_TYPE = 5,

  /**
   * @generated from enum value: FIELD_NAME_URL = 6;
   */
  FIELD_NAME_URL = 6,

  /**
   * @generated from enum value: FIELD_NAME_TIMEOUT = 7;
   */
  FIELD_NAME_TIMEOUT = 7,

  /**
   * @generated from enum value: FIELD_NAME_ASYNC = 8;
   */
  FIELD_NAME_ASYNC = 8,

  /**
   * @generated from enum value: FIELD_NAME_INTERRUPT_ON_ERROR = 9;
   */
  FIELD_NAME_INTERRUPT_ON_ERROR = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(TargetFieldName)
proto3.util.setEnumType(TargetFieldName, "zitadel.action.v3alpha.TargetFieldName", [
  { no: 0, name: "FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "FIELD_NAME_ID" },
  { no: 2, name: "FIELD_NAME_CREATION_DATE" },
  { no: 3, name: "FIELD_NAME_CHANGE_DATE" },
  { no: 4, name: "FIELD_NAME_NAME" },
  { no: 5, name: "FIELD_NAME_TARGET_TYPE" },
  { no: 6, name: "FIELD_NAME_URL" },
  { no: 7, name: "FIELD_NAME_TIMEOUT" },
  { no: 8, name: "FIELD_NAME_ASYNC" },
  { no: 9, name: "FIELD_NAME_INTERRUPT_ON_ERROR" },
]);

/**
 * @generated from message zitadel.action.v3alpha.SearchQuery
 */
export class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.action.v3alpha.SearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.action.v3alpha.InConditionsQuery in_conditions_query = 1;
     */
    value: InConditionsQuery;
    case: "inConditionsQuery";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.ExecutionTypeQuery execution_type_query = 2;
     */
    value: ExecutionTypeQuery;
    case: "executionTypeQuery";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.TargetQuery target_query = 3;
     */
    value: TargetQuery;
    case: "targetQuery";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.IncludeQuery include_query = 4;
     */
    value: IncludeQuery;
    case: "includeQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.SearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "in_conditions_query", kind: "message", T: InConditionsQuery, oneof: "query" },
    { no: 2, name: "execution_type_query", kind: "message", T: ExecutionTypeQuery, oneof: "query" },
    { no: 3, name: "target_query", kind: "message", T: TargetQuery, oneof: "query" },
    { no: 4, name: "include_query", kind: "message", T: IncludeQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery {
    return new SearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean {
    return proto3.util.equals(SearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.InConditionsQuery
 */
export class InConditionsQuery extends Message<InConditionsQuery> {
  /**
   * Defines the conditions to query for.
   *
   * @generated from field: repeated zitadel.action.v3alpha.Condition conditions = 1;
   */
  conditions: Condition[] = [];

  constructor(data?: PartialMessage<InConditionsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.InConditionsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: Condition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InConditionsQuery {
    return new InConditionsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InConditionsQuery {
    return new InConditionsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InConditionsQuery {
    return new InConditionsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: InConditionsQuery | PlainMessage<InConditionsQuery> | undefined, b: InConditionsQuery | PlainMessage<InConditionsQuery> | undefined): boolean {
    return proto3.util.equals(InConditionsQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ExecutionTypeQuery
 */
export class ExecutionTypeQuery extends Message<ExecutionTypeQuery> {
  /**
   * Defines the type to query for.
   *
   * @generated from field: zitadel.action.v3alpha.ExecutionType execution_type = 1;
   */
  executionType = ExecutionType.UNSPECIFIED;

  constructor(data?: PartialMessage<ExecutionTypeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ExecutionTypeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution_type", kind: "enum", T: proto3.getEnumType(ExecutionType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionTypeQuery {
    return new ExecutionTypeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionTypeQuery {
    return new ExecutionTypeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionTypeQuery {
    return new ExecutionTypeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ExecutionTypeQuery | PlainMessage<ExecutionTypeQuery> | undefined, b: ExecutionTypeQuery | PlainMessage<ExecutionTypeQuery> | undefined): boolean {
    return proto3.util.equals(ExecutionTypeQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.TargetQuery
 */
export class TargetQuery extends Message<TargetQuery> {
  /**
   * Defines the id to query for.
   *
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  constructor(data?: PartialMessage<TargetQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.TargetQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetQuery {
    return new TargetQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetQuery {
    return new TargetQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetQuery {
    return new TargetQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TargetQuery | PlainMessage<TargetQuery> | undefined, b: TargetQuery | PlainMessage<TargetQuery> | undefined): boolean {
    return proto3.util.equals(TargetQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.IncludeQuery
 */
export class IncludeQuery extends Message<IncludeQuery> {
  /**
   * Defines the include to query for.
   *
   * @generated from field: zitadel.action.v3alpha.Condition include = 1;
   */
  include?: Condition;

  constructor(data?: PartialMessage<IncludeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.IncludeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include", kind: "message", T: Condition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncludeQuery {
    return new IncludeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncludeQuery {
    return new IncludeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncludeQuery {
    return new IncludeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IncludeQuery | PlainMessage<IncludeQuery> | undefined, b: IncludeQuery | PlainMessage<IncludeQuery> | undefined): boolean {
    return proto3.util.equals(IncludeQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.TargetSearchQuery
 */
export class TargetSearchQuery extends Message<TargetSearchQuery> {
  /**
   * @generated from oneof zitadel.action.v3alpha.TargetSearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.action.v3alpha.TargetNameQuery target_name_query = 1;
     */
    value: TargetNameQuery;
    case: "targetNameQuery";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.InTargetIDsQuery in_target_ids_query = 2;
     */
    value: InTargetIDsQuery;
    case: "inTargetIdsQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TargetSearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.TargetSearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_name_query", kind: "message", T: TargetNameQuery, oneof: "query" },
    { no: 2, name: "in_target_ids_query", kind: "message", T: InTargetIDsQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetSearchQuery {
    return new TargetSearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetSearchQuery {
    return new TargetSearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetSearchQuery {
    return new TargetSearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TargetSearchQuery | PlainMessage<TargetSearchQuery> | undefined, b: TargetSearchQuery | PlainMessage<TargetSearchQuery> | undefined): boolean {
    return proto3.util.equals(TargetSearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.TargetNameQuery
 */
export class TargetNameQuery extends Message<TargetNameQuery> {
  /**
   * Defines the name of the target to query for.
   *
   * @generated from field: string target_name = 1;
   */
  targetName = "";

  /**
   * Defines which text comparison method used for the name query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<TargetNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.TargetNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetNameQuery {
    return new TargetNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetNameQuery {
    return new TargetNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetNameQuery {
    return new TargetNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TargetNameQuery | PlainMessage<TargetNameQuery> | undefined, b: TargetNameQuery | PlainMessage<TargetNameQuery> | undefined): boolean {
    return proto3.util.equals(TargetNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.InTargetIDsQuery
 */
export class InTargetIDsQuery extends Message<InTargetIDsQuery> {
  /**
   * Defines the ids to query for.
   *
   * @generated from field: repeated string target_ids = 1;
   */
  targetIds: string[] = [];

  constructor(data?: PartialMessage<InTargetIDsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.InTargetIDsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InTargetIDsQuery {
    return new InTargetIDsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InTargetIDsQuery {
    return new InTargetIDsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InTargetIDsQuery {
    return new InTargetIDsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: InTargetIDsQuery | PlainMessage<InTargetIDsQuery> | undefined, b: InTargetIDsQuery | PlainMessage<InTargetIDsQuery> | undefined): boolean {
    return proto3.util.equals(InTargetIDsQuery, a, b);
  }
}

