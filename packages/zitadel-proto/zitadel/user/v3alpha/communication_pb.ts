// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/v3alpha/communication.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message zitadel.user.v3alpha.Contact
 */
export class Contact extends Message<Contact> {
  /**
   * Email contact information of the user.
   *
   * @generated from field: zitadel.user.v3alpha.Email email = 1;
   */
  email?: Email;

  /**
   * Phone contact information of the user.
   *
   * @generated from field: zitadel.user.v3alpha.Phone phone = 2;
   */
  phone?: Phone;

  constructor(data?: PartialMessage<Contact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.Contact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "message", T: Email },
    { no: 2, name: "phone", kind: "message", T: Phone },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contact {
    return new Contact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJsonString(jsonString, options);
  }

  static equals(a: Contact | PlainMessage<Contact> | undefined, b: Contact | PlainMessage<Contact> | undefined): boolean {
    return proto3.util.equals(Contact, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.Email
 */
export class Email extends Message<Email> {
  /**
   * Email address of the user.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * IsVerified states if the email address has been verified to belong to the user.
   *
   * @generated from field: bool is_verified = 2;
   */
  isVerified = false;

  constructor(data?: PartialMessage<Email>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.Email";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Email {
    return new Email().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Email {
    return new Email().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Email {
    return new Email().fromJsonString(jsonString, options);
  }

  static equals(a: Email | PlainMessage<Email> | undefined, b: Email | PlainMessage<Email> | undefined): boolean {
    return proto3.util.equals(Email, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.Phone
 */
export class Phone extends Message<Phone> {
  /**
   * Phone number of the user.
   *
   * @generated from field: string number = 1;
   */
  number = "";

  /**
   * IsVerified states if the phone number has been verified to belong to the user.
   *
   * @generated from field: bool is_verified = 2;
   */
  isVerified = false;

  constructor(data?: PartialMessage<Phone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.Phone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Phone {
    return new Phone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Phone {
    return new Phone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Phone {
    return new Phone().fromJsonString(jsonString, options);
  }

  static equals(a: Phone | PlainMessage<Phone> | undefined, b: Phone | PlainMessage<Phone> | undefined): boolean {
    return proto3.util.equals(Phone, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetContact
 */
export class SetContact extends Message<SetContact> {
  /**
   * @generated from field: optional zitadel.user.v3alpha.SetEmail email = 1;
   */
  email?: SetEmail;

  /**
   * @generated from field: optional zitadel.user.v3alpha.SetPhone phone = 2;
   */
  phone?: SetPhone;

  constructor(data?: PartialMessage<SetContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "message", T: SetEmail, opt: true },
    { no: 2, name: "phone", kind: "message", T: SetPhone, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetContact {
    return new SetContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetContact {
    return new SetContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetContact {
    return new SetContact().fromJsonString(jsonString, options);
  }

  static equals(a: SetContact | PlainMessage<SetContact> | undefined, b: SetContact | PlainMessage<SetContact> | undefined): boolean {
    return proto3.util.equals(SetContact, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetEmail
 */
export class SetEmail extends Message<SetEmail> {
  /**
   * Set the email address.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * if no verification is specified, an email is sent with the default url
   *
   * @generated from oneof zitadel.user.v3alpha.SetEmail.verification
   */
  verification: {
    /**
     * Let ZITADEL send the link to the user via email.
     *
     * @generated from field: zitadel.user.v3alpha.SendEmailVerificationCode send_code = 2;
     */
    value: SendEmailVerificationCode;
    case: "sendCode";
  } | {
    /**
     * Get the code back to provide it to the user in your preferred mechanism.
     *
     * @generated from field: zitadel.user.v3alpha.ReturnEmailVerificationCode return_code = 3;
     */
    value: ReturnEmailVerificationCode;
    case: "returnCode";
  } | {
    /**
     * Set the email as already verified.
     *
     * @generated from field: bool is_verified = 4;
     */
    value: boolean;
    case: "isVerified";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SetEmail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetEmail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_code", kind: "message", T: SendEmailVerificationCode, oneof: "verification" },
    { no: 3, name: "return_code", kind: "message", T: ReturnEmailVerificationCode, oneof: "verification" },
    { no: 4, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "verification" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetEmail {
    return new SetEmail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetEmail {
    return new SetEmail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetEmail {
    return new SetEmail().fromJsonString(jsonString, options);
  }

  static equals(a: SetEmail | PlainMessage<SetEmail> | undefined, b: SetEmail | PlainMessage<SetEmail> | undefined): boolean {
    return proto3.util.equals(SetEmail, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SendEmailVerificationCode
 */
export class SendEmailVerificationCode extends Message<SendEmailVerificationCode> {
  /**
   * Optionally set a url_template, which will be used in the verification mail sent by ZITADEL
   * to guide the user to your verification page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 1;
   */
  urlTemplate?: string;

  constructor(data?: PartialMessage<SendEmailVerificationCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SendEmailVerificationCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url_template", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendEmailVerificationCode {
    return new SendEmailVerificationCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendEmailVerificationCode {
    return new SendEmailVerificationCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendEmailVerificationCode {
    return new SendEmailVerificationCode().fromJsonString(jsonString, options);
  }

  static equals(a: SendEmailVerificationCode | PlainMessage<SendEmailVerificationCode> | undefined, b: SendEmailVerificationCode | PlainMessage<SendEmailVerificationCode> | undefined): boolean {
    return proto3.util.equals(SendEmailVerificationCode, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ReturnEmailVerificationCode
 */
export class ReturnEmailVerificationCode extends Message<ReturnEmailVerificationCode> {
  constructor(data?: PartialMessage<ReturnEmailVerificationCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ReturnEmailVerificationCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnEmailVerificationCode {
    return new ReturnEmailVerificationCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnEmailVerificationCode {
    return new ReturnEmailVerificationCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnEmailVerificationCode {
    return new ReturnEmailVerificationCode().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnEmailVerificationCode | PlainMessage<ReturnEmailVerificationCode> | undefined, b: ReturnEmailVerificationCode | PlainMessage<ReturnEmailVerificationCode> | undefined): boolean {
    return proto3.util.equals(ReturnEmailVerificationCode, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetPhone
 */
export class SetPhone extends Message<SetPhone> {
  /**
   * Set the user's phone number.
   *
   * @generated from field: string number = 1;
   */
  number = "";

  /**
   * if no verification is specified, a SMS is sent
   *
   * @generated from oneof zitadel.user.v3alpha.SetPhone.verification
   */
  verification: {
    /**
     * Let ZITADEL send the link to the user via SMS.
     *
     * @generated from field: zitadel.user.v3alpha.SendPhoneVerificationCode send_code = 2;
     */
    value: SendPhoneVerificationCode;
    case: "sendCode";
  } | {
    /**
     * Get the code back to provide it to the user in your preferred mechanism.
     *
     * @generated from field: zitadel.user.v3alpha.ReturnPhoneVerificationCode return_code = 3;
     */
    value: ReturnPhoneVerificationCode;
    case: "returnCode";
  } | {
    /**
     * Set the phone as already verified.
     *
     * @generated from field: bool is_verified = 4;
     */
    value: boolean;
    case: "isVerified";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SetPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_code", kind: "message", T: SendPhoneVerificationCode, oneof: "verification" },
    { no: 3, name: "return_code", kind: "message", T: ReturnPhoneVerificationCode, oneof: "verification" },
    { no: 4, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "verification" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPhone {
    return new SetPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPhone {
    return new SetPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPhone {
    return new SetPhone().fromJsonString(jsonString, options);
  }

  static equals(a: SetPhone | PlainMessage<SetPhone> | undefined, b: SetPhone | PlainMessage<SetPhone> | undefined): boolean {
    return proto3.util.equals(SetPhone, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SendPhoneVerificationCode
 */
export class SendPhoneVerificationCode extends Message<SendPhoneVerificationCode> {
  constructor(data?: PartialMessage<SendPhoneVerificationCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SendPhoneVerificationCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendPhoneVerificationCode {
    return new SendPhoneVerificationCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendPhoneVerificationCode {
    return new SendPhoneVerificationCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendPhoneVerificationCode {
    return new SendPhoneVerificationCode().fromJsonString(jsonString, options);
  }

  static equals(a: SendPhoneVerificationCode | PlainMessage<SendPhoneVerificationCode> | undefined, b: SendPhoneVerificationCode | PlainMessage<SendPhoneVerificationCode> | undefined): boolean {
    return proto3.util.equals(SendPhoneVerificationCode, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ReturnPhoneVerificationCode
 */
export class ReturnPhoneVerificationCode extends Message<ReturnPhoneVerificationCode> {
  constructor(data?: PartialMessage<ReturnPhoneVerificationCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ReturnPhoneVerificationCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnPhoneVerificationCode {
    return new ReturnPhoneVerificationCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnPhoneVerificationCode {
    return new ReturnPhoneVerificationCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnPhoneVerificationCode {
    return new ReturnPhoneVerificationCode().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnPhoneVerificationCode | PlainMessage<ReturnPhoneVerificationCode> | undefined, b: ReturnPhoneVerificationCode | PlainMessage<ReturnPhoneVerificationCode> | undefined): boolean {
    return proto3.util.equals(ReturnPhoneVerificationCode, a, b);
  }
}

