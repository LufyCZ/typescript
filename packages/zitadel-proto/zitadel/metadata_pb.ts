// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/metadata.proto (package zitadel.metadata.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";

/**
 * @generated from message zitadel.metadata.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.metadata.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message zitadel.metadata.v1.MetadataQuery
 */
export class MetadataQuery extends Message<MetadataQuery> {
  /**
   * @generated from oneof zitadel.metadata.v1.MetadataQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.metadata.v1.MetadataKeyQuery key_query = 1;
     */
    value: MetadataKeyQuery;
    case: "keyQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MetadataQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.metadata.v1.MetadataQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_query", kind: "message", T: MetadataKeyQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataQuery {
    return new MetadataQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataQuery {
    return new MetadataQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataQuery {
    return new MetadataQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataQuery | PlainMessage<MetadataQuery> | undefined, b: MetadataQuery | PlainMessage<MetadataQuery> | undefined): boolean {
    return proto3.util.equals(MetadataQuery, a, b);
  }
}

/**
 * @generated from message zitadel.metadata.v1.MetadataKeyQuery
 */
export class MetadataKeyQuery extends Message<MetadataKeyQuery> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<MetadataKeyQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.metadata.v1.MetadataKeyQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataKeyQuery {
    return new MetadataKeyQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataKeyQuery {
    return new MetadataKeyQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataKeyQuery {
    return new MetadataKeyQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataKeyQuery | PlainMessage<MetadataKeyQuery> | undefined, b: MetadataKeyQuery | PlainMessage<MetadataKeyQuery> | undefined): boolean {
    return proto3.util.equals(MetadataKeyQuery, a, b);
  }
}

