// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/event.proto (package zitadel.event.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp } from "@bufbuild/protobuf";
import { LocalizedMessage } from "./message_pb.js";

/**
 * @generated from message zitadel.event.v1.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: zitadel.event.v1.Editor editor = 1;
   */
  editor?: Editor;

  /**
   * @generated from field: zitadel.event.v1.Aggregate aggregate = 2;
   */
  aggregate?: Aggregate;

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp creation_date = 4;
   */
  creationDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Struct payload = 5;
   */
  payload?: Struct;

  /**
   * @generated from field: zitadel.event.v1.EventType type = 6;
   */
  type?: EventType;

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.event.v1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "editor", kind: "message", T: Editor },
    { no: 2, name: "aggregate", kind: "message", T: Aggregate },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "creation_date", kind: "message", T: Timestamp },
    { no: 5, name: "payload", kind: "message", T: Struct },
    { no: 6, name: "type", kind: "message", T: EventType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message zitadel.event.v1.Editor
 */
export class Editor extends Message<Editor> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * @generated from field: string service = 3;
   */
  service = "";

  constructor(data?: PartialMessage<Editor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.event.v1.Editor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Editor {
    return new Editor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Editor {
    return new Editor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Editor {
    return new Editor().fromJsonString(jsonString, options);
  }

  static equals(a: Editor | PlainMessage<Editor> | undefined, b: Editor | PlainMessage<Editor> | undefined): boolean {
    return proto3.util.equals(Editor, a, b);
  }
}

/**
 * @generated from message zitadel.event.v1.Aggregate
 */
export class Aggregate extends Message<Aggregate> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.event.v1.AggregateType type = 2;
   */
  type?: AggregateType;

  /**
   * @generated from field: string resource_owner = 3;
   */
  resourceOwner = "";

  constructor(data?: PartialMessage<Aggregate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.event.v1.Aggregate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "message", T: AggregateType },
    { no: 3, name: "resource_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Aggregate {
    return new Aggregate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Aggregate {
    return new Aggregate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Aggregate {
    return new Aggregate().fromJsonString(jsonString, options);
  }

  static equals(a: Aggregate | PlainMessage<Aggregate> | undefined, b: Aggregate | PlainMessage<Aggregate> | undefined): boolean {
    return proto3.util.equals(Aggregate, a, b);
  }
}

/**
 * @generated from message zitadel.event.v1.EventType
 */
export class EventType extends Message<EventType> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: zitadel.v1.LocalizedMessage localized = 2;
   */
  localized?: LocalizedMessage;

  constructor(data?: PartialMessage<EventType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.event.v1.EventType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "localized", kind: "message", T: LocalizedMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventType {
    return new EventType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventType {
    return new EventType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventType {
    return new EventType().fromJsonString(jsonString, options);
  }

  static equals(a: EventType | PlainMessage<EventType> | undefined, b: EventType | PlainMessage<EventType> | undefined): boolean {
    return proto3.util.equals(EventType, a, b);
  }
}

/**
 * @generated from message zitadel.event.v1.AggregateType
 */
export class AggregateType extends Message<AggregateType> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: zitadel.v1.LocalizedMessage localized = 2;
   */
  localized?: LocalizedMessage;

  constructor(data?: PartialMessage<AggregateType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.event.v1.AggregateType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "localized", kind: "message", T: LocalizedMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregateType {
    return new AggregateType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregateType {
    return new AggregateType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregateType {
    return new AggregateType().fromJsonString(jsonString, options);
  }

  static equals(a: AggregateType | PlainMessage<AggregateType> | undefined, b: AggregateType | PlainMessage<AggregateType> | undefined): boolean {
    return proto3.util.equals(AggregateType, a, b);
  }
}

