// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/session/v2beta/session_service.proto (package zitadel.session.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Struct } from "@bufbuild/protobuf";
import { Details, ListDetails, ListQuery } from "../../object/v2beta/object_pb.js";
import { SearchQuery, Session, SessionFieldName, UserAgent } from "./session_pb.js";
import { Challenges, RequestChallenges } from "./challenge_pb.js";

/**
 * @generated from message zitadel.session.v2beta.ListSessionsRequest
 */
export class ListSessionsRequest extends Message<ListSessionsRequest> {
  /**
   * @generated from field: zitadel.object.v2beta.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * @generated from field: repeated zitadel.session.v2beta.SearchQuery queries = 2;
   */
  queries: SearchQuery[] = [];

  /**
   * @generated from field: zitadel.session.v2beta.SessionFieldName sorting_column = 3;
   */
  sortingColumn = SessionFieldName.UNSPECIFIED;

  constructor(data?: PartialMessage<ListSessionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.ListSessionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListQuery },
    { no: 2, name: "queries", kind: "message", T: SearchQuery, repeated: true },
    { no: 3, name: "sorting_column", kind: "enum", T: proto3.getEnumType(SessionFieldName) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSessionsRequest {
    return new ListSessionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSessionsRequest {
    return new ListSessionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSessionsRequest {
    return new ListSessionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSessionsRequest | PlainMessage<ListSessionsRequest> | undefined, b: ListSessionsRequest | PlainMessage<ListSessionsRequest> | undefined): boolean {
    return proto3.util.equals(ListSessionsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.ListSessionsResponse
 */
export class ListSessionsResponse extends Message<ListSessionsResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * @generated from field: repeated zitadel.session.v2beta.Session sessions = 2;
   */
  sessions: Session[] = [];

  constructor(data?: PartialMessage<ListSessionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.ListSessionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "sessions", kind: "message", T: Session, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSessionsResponse {
    return new ListSessionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSessionsResponse {
    return new ListSessionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSessionsResponse {
    return new ListSessionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSessionsResponse | PlainMessage<ListSessionsResponse> | undefined, b: ListSessionsResponse | PlainMessage<ListSessionsResponse> | undefined): boolean {
    return proto3.util.equals(ListSessionsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.GetSessionRequest
 */
export class GetSessionRequest extends Message<GetSessionRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: optional string session_token = 2;
   */
  sessionToken?: string;

  constructor(data?: PartialMessage<GetSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.GetSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionRequest {
    return new GetSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionRequest {
    return new GetSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionRequest {
    return new GetSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSessionRequest | PlainMessage<GetSessionRequest> | undefined, b: GetSessionRequest | PlainMessage<GetSessionRequest> | undefined): boolean {
    return proto3.util.equals(GetSessionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.GetSessionResponse
 */
export class GetSessionResponse extends Message<GetSessionResponse> {
  /**
   * @generated from field: zitadel.session.v2beta.Session session = 1;
   */
  session?: Session;

  constructor(data?: PartialMessage<GetSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.GetSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "message", T: Session },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionResponse {
    return new GetSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionResponse {
    return new GetSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionResponse {
    return new GetSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSessionResponse | PlainMessage<GetSessionResponse> | undefined, b: GetSessionResponse | PlainMessage<GetSessionResponse> | undefined): boolean {
    return proto3.util.equals(GetSessionResponse, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CreateSessionRequest
 */
export class CreateSessionRequest extends Message<CreateSessionRequest> {
  /**
   * @generated from field: zitadel.session.v2beta.Checks checks = 1;
   */
  checks?: Checks;

  /**
   * @generated from field: map<string, bytes> metadata = 2;
   */
  metadata: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: zitadel.session.v2beta.RequestChallenges challenges = 3;
   */
  challenges?: RequestChallenges;

  /**
   * @generated from field: zitadel.session.v2beta.UserAgent user_agent = 4;
   */
  userAgent?: UserAgent;

  /**
   * @generated from field: optional google.protobuf.Duration lifetime = 5;
   */
  lifetime?: Duration;

  constructor(data?: PartialMessage<CreateSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CreateSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "checks", kind: "message", T: Checks },
    { no: 2, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 3, name: "challenges", kind: "message", T: RequestChallenges },
    { no: 4, name: "user_agent", kind: "message", T: UserAgent },
    { no: 5, name: "lifetime", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined, b: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined): boolean {
    return proto3.util.equals(CreateSessionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CreateSessionResponse
 */
export class CreateSessionResponse extends Message<CreateSessionResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: string session_token = 3;
   */
  sessionToken = "";

  /**
   * @generated from field: zitadel.session.v2beta.Challenges challenges = 4;
   */
  challenges?: Challenges;

  constructor(data?: PartialMessage<CreateSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CreateSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "challenges", kind: "message", T: Challenges },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined, b: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined): boolean {
    return proto3.util.equals(CreateSessionResponse, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.SetSessionRequest
 */
export class SetSessionRequest extends Message<SetSessionRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string session_token = 2;
   */
  sessionToken = "";

  /**
   * @generated from field: zitadel.session.v2beta.Checks checks = 3;
   */
  checks?: Checks;

  /**
   * @generated from field: map<string, bytes> metadata = 4;
   */
  metadata: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: zitadel.session.v2beta.RequestChallenges challenges = 5;
   */
  challenges?: RequestChallenges;

  /**
   * @generated from field: optional google.protobuf.Duration lifetime = 6;
   */
  lifetime?: Duration;

  constructor(data?: PartialMessage<SetSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.SetSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "checks", kind: "message", T: Checks },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 5, name: "challenges", kind: "message", T: RequestChallenges },
    { no: 6, name: "lifetime", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSessionRequest {
    return new SetSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSessionRequest {
    return new SetSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSessionRequest {
    return new SetSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSessionRequest | PlainMessage<SetSessionRequest> | undefined, b: SetSessionRequest | PlainMessage<SetSessionRequest> | undefined): boolean {
    return proto3.util.equals(SetSessionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.SetSessionResponse
 */
export class SetSessionResponse extends Message<SetSessionResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * @generated from field: string session_token = 2;
   */
  sessionToken = "";

  /**
   * @generated from field: zitadel.session.v2beta.Challenges challenges = 3;
   */
  challenges?: Challenges;

  constructor(data?: PartialMessage<SetSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.SetSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "challenges", kind: "message", T: Challenges },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSessionResponse {
    return new SetSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSessionResponse {
    return new SetSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSessionResponse {
    return new SetSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSessionResponse | PlainMessage<SetSessionResponse> | undefined, b: SetSessionResponse | PlainMessage<SetSessionResponse> | undefined): boolean {
    return proto3.util.equals(SetSessionResponse, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.DeleteSessionRequest
 */
export class DeleteSessionRequest extends Message<DeleteSessionRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: optional string session_token = 2;
   */
  sessionToken?: string;

  constructor(data?: PartialMessage<DeleteSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.DeleteSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSessionRequest {
    return new DeleteSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSessionRequest {
    return new DeleteSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSessionRequest {
    return new DeleteSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSessionRequest | PlainMessage<DeleteSessionRequest> | undefined, b: DeleteSessionRequest | PlainMessage<DeleteSessionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSessionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.DeleteSessionResponse
 */
export class DeleteSessionResponse extends Message<DeleteSessionResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeleteSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.DeleteSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSessionResponse {
    return new DeleteSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSessionResponse {
    return new DeleteSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSessionResponse {
    return new DeleteSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSessionResponse | PlainMessage<DeleteSessionResponse> | undefined, b: DeleteSessionResponse | PlainMessage<DeleteSessionResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSessionResponse, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.Checks
 */
export class Checks extends Message<Checks> {
  /**
   * @generated from field: optional zitadel.session.v2beta.CheckUser user = 1;
   */
  user?: CheckUser;

  /**
   * @generated from field: optional zitadel.session.v2beta.CheckPassword password = 2;
   */
  password?: CheckPassword;

  /**
   * @generated from field: optional zitadel.session.v2beta.CheckWebAuthN web_auth_n = 3;
   */
  webAuthN?: CheckWebAuthN;

  /**
   * @generated from field: optional zitadel.session.v2beta.CheckIDPIntent idp_intent = 4;
   */
  idpIntent?: CheckIDPIntent;

  /**
   * @generated from field: optional zitadel.session.v2beta.CheckTOTP totp = 5;
   */
  totp?: CheckTOTP;

  /**
   * @generated from field: optional zitadel.session.v2beta.CheckOTP otp_sms = 6;
   */
  otpSms?: CheckOTP;

  /**
   * @generated from field: optional zitadel.session.v2beta.CheckOTP otp_email = 7;
   */
  otpEmail?: CheckOTP;

  constructor(data?: PartialMessage<Checks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.Checks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: CheckUser, opt: true },
    { no: 2, name: "password", kind: "message", T: CheckPassword, opt: true },
    { no: 3, name: "web_auth_n", kind: "message", T: CheckWebAuthN, opt: true },
    { no: 4, name: "idp_intent", kind: "message", T: CheckIDPIntent, opt: true },
    { no: 5, name: "totp", kind: "message", T: CheckTOTP, opt: true },
    { no: 6, name: "otp_sms", kind: "message", T: CheckOTP, opt: true },
    { no: 7, name: "otp_email", kind: "message", T: CheckOTP, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Checks {
    return new Checks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Checks {
    return new Checks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Checks {
    return new Checks().fromJsonString(jsonString, options);
  }

  static equals(a: Checks | PlainMessage<Checks> | undefined, b: Checks | PlainMessage<Checks> | undefined): boolean {
    return proto3.util.equals(Checks, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CheckUser
 */
export class CheckUser extends Message<CheckUser> {
  /**
   * @generated from oneof zitadel.session.v2beta.CheckUser.search
   */
  search: {
    /**
     * @generated from field: string user_id = 1;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string login_name = 2;
     */
    value: string;
    case: "loginName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CheckUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CheckUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "search" },
    { no: 2, name: "login_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "search" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckUser {
    return new CheckUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckUser {
    return new CheckUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckUser {
    return new CheckUser().fromJsonString(jsonString, options);
  }

  static equals(a: CheckUser | PlainMessage<CheckUser> | undefined, b: CheckUser | PlainMessage<CheckUser> | undefined): boolean {
    return proto3.util.equals(CheckUser, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CheckPassword
 */
export class CheckPassword extends Message<CheckPassword> {
  /**
   * @generated from field: string password = 1;
   */
  password = "";

  constructor(data?: PartialMessage<CheckPassword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CheckPassword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPassword {
    return new CheckPassword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPassword {
    return new CheckPassword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPassword {
    return new CheckPassword().fromJsonString(jsonString, options);
  }

  static equals(a: CheckPassword | PlainMessage<CheckPassword> | undefined, b: CheckPassword | PlainMessage<CheckPassword> | undefined): boolean {
    return proto3.util.equals(CheckPassword, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CheckWebAuthN
 */
export class CheckWebAuthN extends Message<CheckWebAuthN> {
  /**
   * @generated from field: google.protobuf.Struct credential_assertion_data = 1;
   */
  credentialAssertionData?: Struct;

  constructor(data?: PartialMessage<CheckWebAuthN>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CheckWebAuthN";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_assertion_data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckWebAuthN {
    return new CheckWebAuthN().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckWebAuthN {
    return new CheckWebAuthN().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckWebAuthN {
    return new CheckWebAuthN().fromJsonString(jsonString, options);
  }

  static equals(a: CheckWebAuthN | PlainMessage<CheckWebAuthN> | undefined, b: CheckWebAuthN | PlainMessage<CheckWebAuthN> | undefined): boolean {
    return proto3.util.equals(CheckWebAuthN, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CheckIDPIntent
 */
export class CheckIDPIntent extends Message<CheckIDPIntent> {
  /**
   * @generated from field: string idp_intent_id = 1;
   */
  idpIntentId = "";

  /**
   * @generated from field: string idp_intent_token = 2;
   */
  idpIntentToken = "";

  constructor(data?: PartialMessage<CheckIDPIntent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CheckIDPIntent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idp_intent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_intent_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckIDPIntent {
    return new CheckIDPIntent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckIDPIntent {
    return new CheckIDPIntent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckIDPIntent {
    return new CheckIDPIntent().fromJsonString(jsonString, options);
  }

  static equals(a: CheckIDPIntent | PlainMessage<CheckIDPIntent> | undefined, b: CheckIDPIntent | PlainMessage<CheckIDPIntent> | undefined): boolean {
    return proto3.util.equals(CheckIDPIntent, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CheckTOTP
 */
export class CheckTOTP extends Message<CheckTOTP> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<CheckTOTP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CheckTOTP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTOTP {
    return new CheckTOTP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTOTP {
    return new CheckTOTP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTOTP {
    return new CheckTOTP().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTOTP | PlainMessage<CheckTOTP> | undefined, b: CheckTOTP | PlainMessage<CheckTOTP> | undefined): boolean {
    return proto3.util.equals(CheckTOTP, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CheckOTP
 */
export class CheckOTP extends Message<CheckOTP> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<CheckOTP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CheckOTP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckOTP {
    return new CheckOTP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckOTP {
    return new CheckOTP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckOTP {
    return new CheckOTP().fromJsonString(jsonString, options);
  }

  static equals(a: CheckOTP | PlainMessage<CheckOTP> | undefined, b: CheckOTP | PlainMessage<CheckOTP> | undefined): boolean {
    return proto3.util.equals(CheckOTP, a, b);
  }
}

