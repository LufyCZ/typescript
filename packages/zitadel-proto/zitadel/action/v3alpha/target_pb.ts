// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/action/v3alpha/target.proto (package zitadel.action.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { Details } from "../../object/v2beta/object_pb.js";

/**
 * Wait for response but response body is ignored, status is checked, call is sent as post.
 *
 * @generated from message zitadel.action.v3alpha.SetRESTWebhook
 */
export class SetRESTWebhook extends Message<SetRESTWebhook> {
  /**
   * Define if any error stops the whole execution. By default the process continues as normal.
   *
   * @generated from field: bool interrupt_on_error = 1;
   */
  interruptOnError = false;

  constructor(data?: PartialMessage<SetRESTWebhook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.SetRESTWebhook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interrupt_on_error", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRESTWebhook {
    return new SetRESTWebhook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRESTWebhook {
    return new SetRESTWebhook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRESTWebhook {
    return new SetRESTWebhook().fromJsonString(jsonString, options);
  }

  static equals(a: SetRESTWebhook | PlainMessage<SetRESTWebhook> | undefined, b: SetRESTWebhook | PlainMessage<SetRESTWebhook> | undefined): boolean {
    return proto3.util.equals(SetRESTWebhook, a, b);
  }
}

/**
 * Wait for response and response body is used, status is checked, call is sent as post.
 *
 * @generated from message zitadel.action.v3alpha.SetRESTCall
 */
export class SetRESTCall extends Message<SetRESTCall> {
  /**
   * Define if any error stops the whole execution. By default the process continues as normal.
   *
   * @generated from field: bool interrupt_on_error = 1;
   */
  interruptOnError = false;

  constructor(data?: PartialMessage<SetRESTCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.SetRESTCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interrupt_on_error", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRESTCall {
    return new SetRESTCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRESTCall {
    return new SetRESTCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRESTCall {
    return new SetRESTCall().fromJsonString(jsonString, options);
  }

  static equals(a: SetRESTCall | PlainMessage<SetRESTCall> | undefined, b: SetRESTCall | PlainMessage<SetRESTCall> | undefined): boolean {
    return proto3.util.equals(SetRESTCall, a, b);
  }
}

/**
 * Call is executed in parallel to others, ZITADEL does not wait until the call is finished. The state is ignored, call is sent as post.
 *
 * @generated from message zitadel.action.v3alpha.SetRESTAsync
 */
export class SetRESTAsync extends Message<SetRESTAsync> {
  constructor(data?: PartialMessage<SetRESTAsync>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.SetRESTAsync";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRESTAsync {
    return new SetRESTAsync().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRESTAsync {
    return new SetRESTAsync().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRESTAsync {
    return new SetRESTAsync().fromJsonString(jsonString, options);
  }

  static equals(a: SetRESTAsync | PlainMessage<SetRESTAsync> | undefined, b: SetRESTAsync | PlainMessage<SetRESTAsync> | undefined): boolean {
    return proto3.util.equals(SetRESTAsync, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.Target
 */
export class Target extends Message<Target> {
  /**
   * ID is the read-only unique identifier of the target.
   *
   * @generated from field: string target_id = 1;
   */
  targetId = "";

  /**
   * Details provide some base information (such as the last change date) of the target.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  /**
   * Unique name of the target.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Defines the target type and how the response of the target is treated.
   *
   * @generated from oneof zitadel.action.v3alpha.Target.target_type
   */
  targetType: {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTWebhook rest_webhook = 4;
     */
    value: SetRESTWebhook;
    case: "restWebhook";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTCall rest_call = 5;
     */
    value: SetRESTCall;
    case: "restCall";
  } | {
    /**
     * @generated from field: zitadel.action.v3alpha.SetRESTAsync rest_async = 6;
     */
    value: SetRESTAsync;
    case: "restAsync";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Timeout defines the duration until ZITADEL cancels the execution.
   *
   * @generated from field: google.protobuf.Duration timeout = 7;
   */
  timeout?: Duration;

  /**
   * @generated from field: string endpoint = 8;
   */
  endpoint = "";

  constructor(data?: PartialMessage<Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: Details },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rest_webhook", kind: "message", T: SetRESTWebhook, oneof: "target_type" },
    { no: 5, name: "rest_call", kind: "message", T: SetRESTCall, oneof: "target_type" },
    { no: 6, name: "rest_async", kind: "message", T: SetRESTAsync, oneof: "target_type" },
    { no: 7, name: "timeout", kind: "message", T: Duration },
    { no: 8, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Target {
    return new Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJsonString(jsonString, options);
  }

  static equals(a: Target | PlainMessage<Target> | undefined, b: Target | PlainMessage<Target> | undefined): boolean {
    return proto3.util.equals(Target, a, b);
  }
}

