// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/system.proto (package zitadel.system.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { ListDetails, ListQuery, ObjectDetails } from "./object_pb.js";
import { Domain, DomainFieldName, DomainSearchQuery, FieldName, Instance, InstanceDetail, Query } from "./instance_pb.js";
import { KeyType } from "./auth_n_key_pb.js";
import { Member, SearchQuery } from "./member_pb.js";
import { Notification, Unit } from "./quota_pb.js";
import { InstanceFeature } from "./feature_pb.js";

/**
 * This is an empty request
 *
 * @generated from message zitadel.system.v1.HealthzRequest
 */
export class HealthzRequest extends Message<HealthzRequest> {
  constructor(data?: PartialMessage<HealthzRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.HealthzRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthzRequest {
    return new HealthzRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthzRequest {
    return new HealthzRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthzRequest {
    return new HealthzRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthzRequest | PlainMessage<HealthzRequest> | undefined, b: HealthzRequest | PlainMessage<HealthzRequest> | undefined): boolean {
    return proto3.util.equals(HealthzRequest, a, b);
  }
}

/**
 * This is an empty response
 *
 * @generated from message zitadel.system.v1.HealthzResponse
 */
export class HealthzResponse extends Message<HealthzResponse> {
  constructor(data?: PartialMessage<HealthzResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.HealthzResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthzResponse {
    return new HealthzResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthzResponse {
    return new HealthzResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthzResponse {
    return new HealthzResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HealthzResponse | PlainMessage<HealthzResponse> | undefined, b: HealthzResponse | PlainMessage<HealthzResponse> | undefined): boolean {
    return proto3.util.equals(HealthzResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * list limitations and ordering
   *
   * @generated from field: zitadel.v1.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * the field the result is sorted
   *
   * @generated from field: zitadel.instance.v1.FieldName sorting_column = 2;
   */
  sortingColumn = FieldName.UNSPECIFIED;

  /**
   * criterias the client is looking for
   *
   * @generated from field: repeated zitadel.instance.v1.Query queries = 3;
   */
  queries: Query[] = [];

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListQuery },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(FieldName) },
    { no: 3, name: "queries", kind: "message", T: Query, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * @generated from field: zitadel.v1.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * @generated from field: zitadel.instance.v1.FieldName sorting_column = 2;
   */
  sortingColumn = FieldName.UNSPECIFIED;

  /**
   * @generated from field: repeated zitadel.instance.v1.Instance result = 3;
   */
  result: Instance[] = [];

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(FieldName) },
    { no: 3, name: "result", kind: "message", T: Instance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.GetInstanceResponse
 */
export class GetInstanceResponse extends Message<GetInstanceResponse> {
  /**
   * @generated from field: zitadel.instance.v1.InstanceDetail instance = 1;
   */
  instance?: InstanceDetail;

  constructor(data?: PartialMessage<GetInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.GetInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: InstanceDetail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined, b: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddInstanceRequest
 */
export class AddInstanceRequest extends Message<AddInstanceRequest> {
  /**
   * @generated from field: string instance_name = 1;
   */
  instanceName = "";

  /**
   * @generated from field: string first_org_name = 2;
   */
  firstOrgName = "";

  /**
   * @generated from field: string custom_domain = 3;
   */
  customDomain = "";

  /**
   * @generated from field: string owner_user_name = 4;
   */
  ownerUserName = "";

  /**
   * @generated from field: zitadel.system.v1.AddInstanceRequest.Email owner_email = 5;
   */
  ownerEmail?: AddInstanceRequest_Email;

  /**
   * @generated from field: zitadel.system.v1.AddInstanceRequest.Profile owner_profile = 6;
   */
  ownerProfile?: AddInstanceRequest_Profile;

  /**
   * @generated from field: zitadel.system.v1.AddInstanceRequest.Password owner_password = 7;
   */
  ownerPassword?: AddInstanceRequest_Password;

  /**
   * @generated from field: string default_language = 8;
   */
  defaultLanguage = "";

  constructor(data?: PartialMessage<AddInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "custom_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "owner_user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner_email", kind: "message", T: AddInstanceRequest_Email },
    { no: 6, name: "owner_profile", kind: "message", T: AddInstanceRequest_Profile },
    { no: 7, name: "owner_password", kind: "message", T: AddInstanceRequest_Password },
    { no: 8, name: "default_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddInstanceRequest {
    return new AddInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddInstanceRequest {
    return new AddInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddInstanceRequest {
    return new AddInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddInstanceRequest | PlainMessage<AddInstanceRequest> | undefined, b: AddInstanceRequest | PlainMessage<AddInstanceRequest> | undefined): boolean {
    return proto3.util.equals(AddInstanceRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddInstanceRequest.Profile
 */
export class AddInstanceRequest_Profile extends Message<AddInstanceRequest_Profile> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  /**
   * @generated from field: string preferred_language = 5;
   */
  preferredLanguage = "";

  constructor(data?: PartialMessage<AddInstanceRequest_Profile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddInstanceRequest.Profile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "preferred_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddInstanceRequest_Profile {
    return new AddInstanceRequest_Profile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddInstanceRequest_Profile {
    return new AddInstanceRequest_Profile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddInstanceRequest_Profile {
    return new AddInstanceRequest_Profile().fromJsonString(jsonString, options);
  }

  static equals(a: AddInstanceRequest_Profile | PlainMessage<AddInstanceRequest_Profile> | undefined, b: AddInstanceRequest_Profile | PlainMessage<AddInstanceRequest_Profile> | undefined): boolean {
    return proto3.util.equals(AddInstanceRequest_Profile, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddInstanceRequest.Email
 */
export class AddInstanceRequest_Email extends Message<AddInstanceRequest_Email> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: bool is_email_verified = 2;
   */
  isEmailVerified = false;

  constructor(data?: PartialMessage<AddInstanceRequest_Email>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddInstanceRequest.Email";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddInstanceRequest_Email {
    return new AddInstanceRequest_Email().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddInstanceRequest_Email {
    return new AddInstanceRequest_Email().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddInstanceRequest_Email {
    return new AddInstanceRequest_Email().fromJsonString(jsonString, options);
  }

  static equals(a: AddInstanceRequest_Email | PlainMessage<AddInstanceRequest_Email> | undefined, b: AddInstanceRequest_Email | PlainMessage<AddInstanceRequest_Email> | undefined): boolean {
    return proto3.util.equals(AddInstanceRequest_Email, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddInstanceRequest.Password
 */
export class AddInstanceRequest_Password extends Message<AddInstanceRequest_Password> {
  /**
   * @generated from field: string password = 1;
   */
  password = "";

  /**
   * @generated from field: bool password_change_required = 2;
   */
  passwordChangeRequired = false;

  constructor(data?: PartialMessage<AddInstanceRequest_Password>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddInstanceRequest.Password";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password_change_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddInstanceRequest_Password {
    return new AddInstanceRequest_Password().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddInstanceRequest_Password {
    return new AddInstanceRequest_Password().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddInstanceRequest_Password {
    return new AddInstanceRequest_Password().fromJsonString(jsonString, options);
  }

  static equals(a: AddInstanceRequest_Password | PlainMessage<AddInstanceRequest_Password> | undefined, b: AddInstanceRequest_Password | PlainMessage<AddInstanceRequest_Password> | undefined): boolean {
    return proto3.util.equals(AddInstanceRequest_Password, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddInstanceResponse
 */
export class AddInstanceResponse extends Message<AddInstanceResponse> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<AddInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddInstanceResponse {
    return new AddInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddInstanceResponse {
    return new AddInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddInstanceResponse {
    return new AddInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddInstanceResponse | PlainMessage<AddInstanceResponse> | undefined, b: AddInstanceResponse | PlainMessage<AddInstanceResponse> | undefined): boolean {
    return proto3.util.equals(AddInstanceResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * @generated from field: string instance_name = 1;
   */
  instanceName = "";

  /**
   * @generated from field: string first_org_name = 2;
   */
  firstOrgName = "";

  /**
   * @generated from field: string custom_domain = 3;
   */
  customDomain = "";

  /**
   * @generated from oneof zitadel.system.v1.CreateInstanceRequest.owner
   */
  owner: {
    /**
     * oneof field for the user managing the instance
     *
     * @generated from field: zitadel.system.v1.CreateInstanceRequest.Human human = 4;
     */
    value: CreateInstanceRequest_Human;
    case: "human";
  } | {
    /**
     * @generated from field: zitadel.system.v1.CreateInstanceRequest.Machine machine = 5;
     */
    value: CreateInstanceRequest_Machine;
    case: "machine";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string default_language = 6;
   */
  defaultLanguage = "";

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "custom_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "human", kind: "message", T: CreateInstanceRequest_Human, oneof: "owner" },
    { no: 5, name: "machine", kind: "message", T: CreateInstanceRequest_Machine, oneof: "owner" },
    { no: 6, name: "default_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.Profile
 */
export class CreateInstanceRequest_Profile extends Message<CreateInstanceRequest_Profile> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  /**
   * @generated from field: string preferred_language = 3;
   */
  preferredLanguage = "";

  constructor(data?: PartialMessage<CreateInstanceRequest_Profile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.Profile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "preferred_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_Profile {
    return new CreateInstanceRequest_Profile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Profile {
    return new CreateInstanceRequest_Profile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Profile {
    return new CreateInstanceRequest_Profile().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_Profile | PlainMessage<CreateInstanceRequest_Profile> | undefined, b: CreateInstanceRequest_Profile | PlainMessage<CreateInstanceRequest_Profile> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_Profile, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.Email
 */
export class CreateInstanceRequest_Email extends Message<CreateInstanceRequest_Email> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: bool is_email_verified = 2;
   */
  isEmailVerified = false;

  constructor(data?: PartialMessage<CreateInstanceRequest_Email>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.Email";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_Email {
    return new CreateInstanceRequest_Email().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Email {
    return new CreateInstanceRequest_Email().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Email {
    return new CreateInstanceRequest_Email().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_Email | PlainMessage<CreateInstanceRequest_Email> | undefined, b: CreateInstanceRequest_Email | PlainMessage<CreateInstanceRequest_Email> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_Email, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.Password
 */
export class CreateInstanceRequest_Password extends Message<CreateInstanceRequest_Password> {
  /**
   * @generated from field: string password = 1;
   */
  password = "";

  /**
   * @generated from field: bool password_change_required = 2;
   */
  passwordChangeRequired = false;

  constructor(data?: PartialMessage<CreateInstanceRequest_Password>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.Password";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password_change_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_Password {
    return new CreateInstanceRequest_Password().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Password {
    return new CreateInstanceRequest_Password().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Password {
    return new CreateInstanceRequest_Password().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_Password | PlainMessage<CreateInstanceRequest_Password> | undefined, b: CreateInstanceRequest_Password | PlainMessage<CreateInstanceRequest_Password> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_Password, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.Human
 */
export class CreateInstanceRequest_Human extends Message<CreateInstanceRequest_Human> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: zitadel.system.v1.CreateInstanceRequest.Email email = 2;
   */
  email?: CreateInstanceRequest_Email;

  /**
   * @generated from field: zitadel.system.v1.CreateInstanceRequest.Profile profile = 3;
   */
  profile?: CreateInstanceRequest_Profile;

  /**
   * @generated from field: zitadel.system.v1.CreateInstanceRequest.Password password = 4;
   */
  password?: CreateInstanceRequest_Password;

  constructor(data?: PartialMessage<CreateInstanceRequest_Human>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.Human";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "message", T: CreateInstanceRequest_Email },
    { no: 3, name: "profile", kind: "message", T: CreateInstanceRequest_Profile },
    { no: 4, name: "password", kind: "message", T: CreateInstanceRequest_Password },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_Human {
    return new CreateInstanceRequest_Human().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Human {
    return new CreateInstanceRequest_Human().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Human {
    return new CreateInstanceRequest_Human().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_Human | PlainMessage<CreateInstanceRequest_Human> | undefined, b: CreateInstanceRequest_Human | PlainMessage<CreateInstanceRequest_Human> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_Human, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.PersonalAccessToken
 */
export class CreateInstanceRequest_PersonalAccessToken extends Message<CreateInstanceRequest_PersonalAccessToken> {
  /**
   * @generated from field: google.protobuf.Timestamp expiration_date = 1;
   */
  expirationDate?: Timestamp;

  constructor(data?: PartialMessage<CreateInstanceRequest_PersonalAccessToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.PersonalAccessToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expiration_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_PersonalAccessToken {
    return new CreateInstanceRequest_PersonalAccessToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_PersonalAccessToken {
    return new CreateInstanceRequest_PersonalAccessToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_PersonalAccessToken {
    return new CreateInstanceRequest_PersonalAccessToken().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_PersonalAccessToken | PlainMessage<CreateInstanceRequest_PersonalAccessToken> | undefined, b: CreateInstanceRequest_PersonalAccessToken | PlainMessage<CreateInstanceRequest_PersonalAccessToken> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_PersonalAccessToken, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.MachineKey
 */
export class CreateInstanceRequest_MachineKey extends Message<CreateInstanceRequest_MachineKey> {
  /**
   * @generated from field: zitadel.authn.v1.KeyType type = 1;
   */
  type = KeyType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp expiration_date = 2;
   */
  expirationDate?: Timestamp;

  constructor(data?: PartialMessage<CreateInstanceRequest_MachineKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.MachineKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(KeyType) },
    { no: 2, name: "expiration_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_MachineKey {
    return new CreateInstanceRequest_MachineKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_MachineKey {
    return new CreateInstanceRequest_MachineKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_MachineKey {
    return new CreateInstanceRequest_MachineKey().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_MachineKey | PlainMessage<CreateInstanceRequest_MachineKey> | undefined, b: CreateInstanceRequest_MachineKey | PlainMessage<CreateInstanceRequest_MachineKey> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_MachineKey, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceRequest.Machine
 */
export class CreateInstanceRequest_Machine extends Message<CreateInstanceRequest_Machine> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: zitadel.system.v1.CreateInstanceRequest.PersonalAccessToken personal_access_token = 3;
   */
  personalAccessToken?: CreateInstanceRequest_PersonalAccessToken;

  /**
   * @generated from field: zitadel.system.v1.CreateInstanceRequest.MachineKey machine_key = 4;
   */
  machineKey?: CreateInstanceRequest_MachineKey;

  constructor(data?: PartialMessage<CreateInstanceRequest_Machine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceRequest.Machine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "personal_access_token", kind: "message", T: CreateInstanceRequest_PersonalAccessToken },
    { no: 4, name: "machine_key", kind: "message", T: CreateInstanceRequest_MachineKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest_Machine {
    return new CreateInstanceRequest_Machine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Machine {
    return new CreateInstanceRequest_Machine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest_Machine {
    return new CreateInstanceRequest_Machine().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest_Machine | PlainMessage<CreateInstanceRequest_Machine> | undefined, b: CreateInstanceRequest_Machine | PlainMessage<CreateInstanceRequest_Machine> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest_Machine, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.CreateInstanceResponse
 */
export class CreateInstanceResponse extends Message<CreateInstanceResponse> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string pat = 3;
   */
  pat = "";

  /**
   * @generated from field: bytes machine_key = 4;
   */
  machineKey = new Uint8Array(0);

  constructor(data?: PartialMessage<CreateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.CreateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "pat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "machine_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined, b: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(CreateInstanceResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.UpdateInstanceRequest
 */
export class UpdateInstanceRequest extends Message<UpdateInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string instance_name = 2;
   */
  instanceName = "";

  constructor(data?: PartialMessage<UpdateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.UpdateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined, b: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateInstanceRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.UpdateInstanceResponse
 */
export class UpdateInstanceResponse extends Message<UpdateInstanceResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<UpdateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.UpdateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceResponse {
    return new UpdateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceResponse {
    return new UpdateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceResponse {
    return new UpdateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateInstanceResponse | PlainMessage<UpdateInstanceResponse> | undefined, b: UpdateInstanceResponse | PlainMessage<UpdateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateInstanceResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveInstanceRequest
 */
export class RemoveInstanceRequest extends Message<RemoveInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<RemoveInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveInstanceRequest {
    return new RemoveInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveInstanceRequest {
    return new RemoveInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveInstanceRequest {
    return new RemoveInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveInstanceRequest | PlainMessage<RemoveInstanceRequest> | undefined, b: RemoveInstanceRequest | PlainMessage<RemoveInstanceRequest> | undefined): boolean {
    return proto3.util.equals(RemoveInstanceRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveInstanceResponse
 */
export class RemoveInstanceResponse extends Message<RemoveInstanceResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<RemoveInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveInstanceResponse {
    return new RemoveInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveInstanceResponse {
    return new RemoveInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveInstanceResponse {
    return new RemoveInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveInstanceResponse | PlainMessage<RemoveInstanceResponse> | undefined, b: RemoveInstanceResponse | PlainMessage<RemoveInstanceResponse> | undefined): boolean {
    return proto3.util.equals(RemoveInstanceResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListIAMMembersRequest
 */
export class ListIAMMembersRequest extends Message<ListIAMMembersRequest> {
  /**
   * @generated from field: zitadel.v1.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * @generated from field: repeated zitadel.member.v1.SearchQuery queries = 3;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<ListIAMMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListIAMMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListQuery },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIAMMembersRequest {
    return new ListIAMMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIAMMembersRequest {
    return new ListIAMMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIAMMembersRequest {
    return new ListIAMMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIAMMembersRequest | PlainMessage<ListIAMMembersRequest> | undefined, b: ListIAMMembersRequest | PlainMessage<ListIAMMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListIAMMembersRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListIAMMembersResponse
 */
export class ListIAMMembersResponse extends Message<ListIAMMembersResponse> {
  /**
   * @generated from field: zitadel.v1.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * @generated from field: repeated zitadel.member.v1.Member result = 2;
   */
  result: Member[] = [];

  constructor(data?: PartialMessage<ListIAMMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListIAMMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "result", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIAMMembersResponse {
    return new ListIAMMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIAMMembersResponse {
    return new ListIAMMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIAMMembersResponse {
    return new ListIAMMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIAMMembersResponse | PlainMessage<ListIAMMembersResponse> | undefined, b: ListIAMMembersResponse | PlainMessage<ListIAMMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListIAMMembersResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.GetUsageRequest
 */
export class GetUsageRequest extends Message<GetUsageRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.GetUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsageRequest {
    return new GetUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsageRequest | PlainMessage<GetUsageRequest> | undefined, b: GetUsageRequest | PlainMessage<GetUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetUsageRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddQuotaRequest
 */
export class AddQuotaRequest extends Message<AddQuotaRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * the unit a quota should be imposed on
   *
   * @generated from field: zitadel.quota.v1.Unit unit = 2;
   */
  unit = Unit.UNIMPLEMENTED;

  /**
   * the starting time from which the current quota period is calculated from. This is relevant for querying the current usage.
   *
   * @generated from field: google.protobuf.Timestamp from = 3;
   */
  from?: Timestamp;

  /**
   * the quota periods duration
   *
   * @generated from field: google.protobuf.Duration reset_interval = 4;
   */
  resetInterval?: Duration;

  /**
   * the quota amount of units
   *
   * @generated from field: uint64 amount = 5;
   */
  amount = protoInt64.zero;

  /**
   * whether ZITADEL should block further usage when the configured amount is used
   *
   * @generated from field: bool limit = 6;
   */
  limit = false;

  /**
   * the handlers, ZITADEL executes when certain quota percentages are reached
   *
   * @generated from field: repeated zitadel.quota.v1.Notification notifications = 7;
   */
  notifications: Notification[] = [];

  constructor(data?: PartialMessage<AddQuotaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddQuotaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unit", kind: "enum", T: proto3.getEnumType(Unit) },
    { no: 3, name: "from", kind: "message", T: Timestamp },
    { no: 4, name: "reset_interval", kind: "message", T: Duration },
    { no: 5, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "limit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "notifications", kind: "message", T: Notification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddQuotaRequest {
    return new AddQuotaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddQuotaRequest {
    return new AddQuotaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddQuotaRequest {
    return new AddQuotaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddQuotaRequest | PlainMessage<AddQuotaRequest> | undefined, b: AddQuotaRequest | PlainMessage<AddQuotaRequest> | undefined): boolean {
    return proto3.util.equals(AddQuotaRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddQuotaResponse
 */
export class AddQuotaResponse extends Message<AddQuotaResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<AddQuotaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddQuotaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddQuotaResponse {
    return new AddQuotaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddQuotaResponse {
    return new AddQuotaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddQuotaResponse {
    return new AddQuotaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddQuotaResponse | PlainMessage<AddQuotaResponse> | undefined, b: AddQuotaResponse | PlainMessage<AddQuotaResponse> | undefined): boolean {
    return proto3.util.equals(AddQuotaResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetQuotaRequest
 */
export class SetQuotaRequest extends Message<SetQuotaRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * the unit a quota should be imposed on
   *
   * @generated from field: zitadel.quota.v1.Unit unit = 2;
   */
  unit = Unit.UNIMPLEMENTED;

  /**
   * the starting time from which the current quota period is calculated from. This is relevant for querying the current usage.
   *
   * @generated from field: google.protobuf.Timestamp from = 3;
   */
  from?: Timestamp;

  /**
   * the quota periods duration
   *
   * @generated from field: google.protobuf.Duration reset_interval = 4;
   */
  resetInterval?: Duration;

  /**
   * the quota amount of units
   *
   * @generated from field: uint64 amount = 5;
   */
  amount = protoInt64.zero;

  /**
   * whether ZITADEL should block further usage when the configured amount is used
   *
   * @generated from field: bool limit = 6;
   */
  limit = false;

  /**
   * the handlers, ZITADEL executes when certain quota percentages are reached
   *
   * @generated from field: repeated zitadel.quota.v1.Notification notifications = 7;
   */
  notifications: Notification[] = [];

  constructor(data?: PartialMessage<SetQuotaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetQuotaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unit", kind: "enum", T: proto3.getEnumType(Unit) },
    { no: 3, name: "from", kind: "message", T: Timestamp },
    { no: 4, name: "reset_interval", kind: "message", T: Duration },
    { no: 5, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "limit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "notifications", kind: "message", T: Notification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetQuotaRequest {
    return new SetQuotaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetQuotaRequest {
    return new SetQuotaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetQuotaRequest {
    return new SetQuotaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetQuotaRequest | PlainMessage<SetQuotaRequest> | undefined, b: SetQuotaRequest | PlainMessage<SetQuotaRequest> | undefined): boolean {
    return proto3.util.equals(SetQuotaRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetQuotaResponse
 */
export class SetQuotaResponse extends Message<SetQuotaResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<SetQuotaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetQuotaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetQuotaResponse {
    return new SetQuotaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetQuotaResponse {
    return new SetQuotaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetQuotaResponse {
    return new SetQuotaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetQuotaResponse | PlainMessage<SetQuotaResponse> | undefined, b: SetQuotaResponse | PlainMessage<SetQuotaResponse> | undefined): boolean {
    return proto3.util.equals(SetQuotaResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveQuotaRequest
 */
export class RemoveQuotaRequest extends Message<RemoveQuotaRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: zitadel.quota.v1.Unit unit = 2;
   */
  unit = Unit.UNIMPLEMENTED;

  constructor(data?: PartialMessage<RemoveQuotaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveQuotaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unit", kind: "enum", T: proto3.getEnumType(Unit) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveQuotaRequest {
    return new RemoveQuotaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveQuotaRequest {
    return new RemoveQuotaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveQuotaRequest {
    return new RemoveQuotaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveQuotaRequest | PlainMessage<RemoveQuotaRequest> | undefined, b: RemoveQuotaRequest | PlainMessage<RemoveQuotaRequest> | undefined): boolean {
    return proto3.util.equals(RemoveQuotaRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveQuotaResponse
 */
export class RemoveQuotaResponse extends Message<RemoveQuotaResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<RemoveQuotaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveQuotaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveQuotaResponse {
    return new RemoveQuotaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveQuotaResponse {
    return new RemoveQuotaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveQuotaResponse {
    return new RemoveQuotaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveQuotaResponse | PlainMessage<RemoveQuotaResponse> | undefined, b: RemoveQuotaResponse | PlainMessage<RemoveQuotaResponse> | undefined): boolean {
    return proto3.util.equals(RemoveQuotaResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetLimitsRequest
 */
export class SetLimitsRequest extends Message<SetLimitsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: google.protobuf.Duration audit_log_retention = 2;
   */
  auditLogRetention?: Duration;

  /**
   * @generated from field: optional bool block = 3;
   */
  block?: boolean;

  constructor(data?: PartialMessage<SetLimitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetLimitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "audit_log_retention", kind: "message", T: Duration },
    { no: 3, name: "block", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLimitsRequest {
    return new SetLimitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLimitsRequest {
    return new SetLimitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLimitsRequest {
    return new SetLimitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetLimitsRequest | PlainMessage<SetLimitsRequest> | undefined, b: SetLimitsRequest | PlainMessage<SetLimitsRequest> | undefined): boolean {
    return proto3.util.equals(SetLimitsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetLimitsResponse
 */
export class SetLimitsResponse extends Message<SetLimitsResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<SetLimitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetLimitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLimitsResponse {
    return new SetLimitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLimitsResponse {
    return new SetLimitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLimitsResponse {
    return new SetLimitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetLimitsResponse | PlainMessage<SetLimitsResponse> | undefined, b: SetLimitsResponse | PlainMessage<SetLimitsResponse> | undefined): boolean {
    return proto3.util.equals(SetLimitsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.BulkSetLimitsRequest
 */
export class BulkSetLimitsRequest extends Message<BulkSetLimitsRequest> {
  /**
   * @generated from field: repeated zitadel.system.v1.SetLimitsRequest limits = 1;
   */
  limits: SetLimitsRequest[] = [];

  constructor(data?: PartialMessage<BulkSetLimitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.BulkSetLimitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limits", kind: "message", T: SetLimitsRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BulkSetLimitsRequest {
    return new BulkSetLimitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BulkSetLimitsRequest {
    return new BulkSetLimitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BulkSetLimitsRequest {
    return new BulkSetLimitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BulkSetLimitsRequest | PlainMessage<BulkSetLimitsRequest> | undefined, b: BulkSetLimitsRequest | PlainMessage<BulkSetLimitsRequest> | undefined): boolean {
    return proto3.util.equals(BulkSetLimitsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.BulkSetLimitsResponse
 */
export class BulkSetLimitsResponse extends Message<BulkSetLimitsResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: repeated zitadel.v1.ObjectDetails target_details = 2;
   */
  targetDetails: ObjectDetails[] = [];

  constructor(data?: PartialMessage<BulkSetLimitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.BulkSetLimitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
    { no: 2, name: "target_details", kind: "message", T: ObjectDetails, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BulkSetLimitsResponse {
    return new BulkSetLimitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BulkSetLimitsResponse {
    return new BulkSetLimitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BulkSetLimitsResponse {
    return new BulkSetLimitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BulkSetLimitsResponse | PlainMessage<BulkSetLimitsResponse> | undefined, b: BulkSetLimitsResponse | PlainMessage<BulkSetLimitsResponse> | undefined): boolean {
    return proto3.util.equals(BulkSetLimitsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ResetLimitsRequest
 */
export class ResetLimitsRequest extends Message<ResetLimitsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<ResetLimitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ResetLimitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetLimitsRequest {
    return new ResetLimitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetLimitsRequest {
    return new ResetLimitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetLimitsRequest {
    return new ResetLimitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetLimitsRequest | PlainMessage<ResetLimitsRequest> | undefined, b: ResetLimitsRequest | PlainMessage<ResetLimitsRequest> | undefined): boolean {
    return proto3.util.equals(ResetLimitsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ResetLimitsResponse
 */
export class ResetLimitsResponse extends Message<ResetLimitsResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<ResetLimitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ResetLimitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetLimitsResponse {
    return new ResetLimitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetLimitsResponse {
    return new ResetLimitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetLimitsResponse {
    return new ResetLimitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetLimitsResponse | PlainMessage<ResetLimitsResponse> | undefined, b: ResetLimitsResponse | PlainMessage<ResetLimitsResponse> | undefined): boolean {
    return proto3.util.equals(ResetLimitsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ExistsDomainRequest
 */
export class ExistsDomainRequest extends Message<ExistsDomainRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  constructor(data?: PartialMessage<ExistsDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ExistsDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistsDomainRequest {
    return new ExistsDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistsDomainRequest {
    return new ExistsDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistsDomainRequest {
    return new ExistsDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExistsDomainRequest | PlainMessage<ExistsDomainRequest> | undefined, b: ExistsDomainRequest | PlainMessage<ExistsDomainRequest> | undefined): boolean {
    return proto3.util.equals(ExistsDomainRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ExistsDomainResponse
 */
export class ExistsDomainResponse extends Message<ExistsDomainResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<ExistsDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ExistsDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistsDomainResponse {
    return new ExistsDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistsDomainResponse {
    return new ExistsDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistsDomainResponse {
    return new ExistsDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExistsDomainResponse | PlainMessage<ExistsDomainResponse> | undefined, b: ExistsDomainResponse | PlainMessage<ExistsDomainResponse> | undefined): boolean {
    return proto3.util.equals(ExistsDomainResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListDomainsRequest
 */
export class ListDomainsRequest extends Message<ListDomainsRequest> {
  /**
   * list limitations and ordering
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: zitadel.v1.ListQuery query = 2;
   */
  query?: ListQuery;

  /**
   * the field the result is sorted
   *
   * @generated from field: zitadel.instance.v1.DomainFieldName sorting_column = 3;
   */
  sortingColumn = DomainFieldName.UNSPECIFIED;

  /**
   * criterias the client is looking for
   *
   * @generated from field: repeated zitadel.instance.v1.DomainSearchQuery queries = 4;
   */
  queries: DomainSearchQuery[] = [];

  constructor(data?: PartialMessage<ListDomainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListDomainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "query", kind: "message", T: ListQuery },
    { no: 3, name: "sorting_column", kind: "enum", T: proto3.getEnumType(DomainFieldName) },
    { no: 4, name: "queries", kind: "message", T: DomainSearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDomainsRequest {
    return new ListDomainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDomainsRequest {
    return new ListDomainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDomainsRequest {
    return new ListDomainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDomainsRequest | PlainMessage<ListDomainsRequest> | undefined, b: ListDomainsRequest | PlainMessage<ListDomainsRequest> | undefined): boolean {
    return proto3.util.equals(ListDomainsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListDomainsResponse
 */
export class ListDomainsResponse extends Message<ListDomainsResponse> {
  /**
   * @generated from field: zitadel.v1.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * @generated from field: zitadel.instance.v1.DomainFieldName sorting_column = 2;
   */
  sortingColumn = DomainFieldName.UNSPECIFIED;

  /**
   * @generated from field: repeated zitadel.instance.v1.Domain result = 3;
   */
  result: Domain[] = [];

  constructor(data?: PartialMessage<ListDomainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListDomainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(DomainFieldName) },
    { no: 3, name: "result", kind: "message", T: Domain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDomainsResponse {
    return new ListDomainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDomainsResponse {
    return new ListDomainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDomainsResponse {
    return new ListDomainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDomainsResponse | PlainMessage<ListDomainsResponse> | undefined, b: ListDomainsResponse | PlainMessage<ListDomainsResponse> | undefined): boolean {
    return proto3.util.equals(ListDomainsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddDomainRequest
 */
export class AddDomainRequest extends Message<AddDomainRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<AddDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddDomainRequest {
    return new AddDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddDomainRequest {
    return new AddDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddDomainRequest {
    return new AddDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddDomainRequest | PlainMessage<AddDomainRequest> | undefined, b: AddDomainRequest | PlainMessage<AddDomainRequest> | undefined): boolean {
    return proto3.util.equals(AddDomainRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.AddDomainResponse
 */
export class AddDomainResponse extends Message<AddDomainResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<AddDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.AddDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddDomainResponse {
    return new AddDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddDomainResponse {
    return new AddDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddDomainResponse {
    return new AddDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddDomainResponse | PlainMessage<AddDomainResponse> | undefined, b: AddDomainResponse | PlainMessage<AddDomainResponse> | undefined): boolean {
    return proto3.util.equals(AddDomainResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveDomainRequest
 */
export class RemoveDomainRequest extends Message<RemoveDomainRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<RemoveDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveDomainRequest {
    return new RemoveDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveDomainRequest {
    return new RemoveDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveDomainRequest {
    return new RemoveDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveDomainRequest | PlainMessage<RemoveDomainRequest> | undefined, b: RemoveDomainRequest | PlainMessage<RemoveDomainRequest> | undefined): boolean {
    return proto3.util.equals(RemoveDomainRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveDomainResponse
 */
export class RemoveDomainResponse extends Message<RemoveDomainResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<RemoveDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveDomainResponse {
    return new RemoveDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveDomainResponse {
    return new RemoveDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveDomainResponse {
    return new RemoveDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveDomainResponse | PlainMessage<RemoveDomainResponse> | undefined, b: RemoveDomainResponse | PlainMessage<RemoveDomainResponse> | undefined): boolean {
    return proto3.util.equals(RemoveDomainResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetPrimaryDomainRequest
 */
export class SetPrimaryDomainRequest extends Message<SetPrimaryDomainRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<SetPrimaryDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetPrimaryDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPrimaryDomainRequest {
    return new SetPrimaryDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPrimaryDomainRequest {
    return new SetPrimaryDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPrimaryDomainRequest {
    return new SetPrimaryDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPrimaryDomainRequest | PlainMessage<SetPrimaryDomainRequest> | undefined, b: SetPrimaryDomainRequest | PlainMessage<SetPrimaryDomainRequest> | undefined): boolean {
    return proto3.util.equals(SetPrimaryDomainRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetPrimaryDomainResponse
 */
export class SetPrimaryDomainResponse extends Message<SetPrimaryDomainResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<SetPrimaryDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetPrimaryDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPrimaryDomainResponse {
    return new SetPrimaryDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPrimaryDomainResponse {
    return new SetPrimaryDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPrimaryDomainResponse {
    return new SetPrimaryDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPrimaryDomainResponse | PlainMessage<SetPrimaryDomainResponse> | undefined, b: SetPrimaryDomainResponse | PlainMessage<SetPrimaryDomainResponse> | undefined): boolean {
    return proto3.util.equals(SetPrimaryDomainResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ChangeSubscriptionRequest
 */
export class ChangeSubscriptionRequest extends Message<ChangeSubscriptionRequest> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: string subscription_name = 2;
   */
  subscriptionName = "";

  /**
   * @generated from field: uint64 request_limit = 3;
   */
  requestLimit = protoInt64.zero;

  /**
   * @generated from field: uint64 action_mins_limit = 4;
   */
  actionMinsLimit = protoInt64.zero;

  constructor(data?: PartialMessage<ChangeSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ChangeSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subscription_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "action_mins_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeSubscriptionRequest {
    return new ChangeSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeSubscriptionRequest {
    return new ChangeSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeSubscriptionRequest {
    return new ChangeSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeSubscriptionRequest | PlainMessage<ChangeSubscriptionRequest> | undefined, b: ChangeSubscriptionRequest | PlainMessage<ChangeSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(ChangeSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ChangeSubscriptionResponse
 */
export class ChangeSubscriptionResponse extends Message<ChangeSubscriptionResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<ChangeSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ChangeSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeSubscriptionResponse {
    return new ChangeSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeSubscriptionResponse {
    return new ChangeSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeSubscriptionResponse {
    return new ChangeSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeSubscriptionResponse | PlainMessage<ChangeSubscriptionResponse> | undefined, b: ChangeSubscriptionResponse | PlainMessage<ChangeSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(ChangeSubscriptionResponse, a, b);
  }
}

/**
 * This is an empty request
 *
 * @generated from message zitadel.system.v1.ListViewsRequest
 */
export class ListViewsRequest extends Message<ListViewsRequest> {
  constructor(data?: PartialMessage<ListViewsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListViewsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListViewsRequest {
    return new ListViewsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListViewsRequest {
    return new ListViewsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListViewsRequest {
    return new ListViewsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListViewsRequest | PlainMessage<ListViewsRequest> | undefined, b: ListViewsRequest | PlainMessage<ListViewsRequest> | undefined): boolean {
    return proto3.util.equals(ListViewsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListViewsResponse
 */
export class ListViewsResponse extends Message<ListViewsResponse> {
  /**
   * TODO: list details
   *
   * @generated from field: repeated zitadel.system.v1.View result = 1;
   */
  result: View[] = [];

  constructor(data?: PartialMessage<ListViewsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListViewsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: View, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListViewsResponse {
    return new ListViewsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListViewsResponse {
    return new ListViewsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListViewsResponse {
    return new ListViewsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListViewsResponse | PlainMessage<ListViewsResponse> | undefined, b: ListViewsResponse | PlainMessage<ListViewsResponse> | undefined): boolean {
    return proto3.util.equals(ListViewsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ClearViewRequest
 */
export class ClearViewRequest extends Message<ClearViewRequest> {
  /**
   * @generated from field: string database = 1;
   */
  database = "";

  /**
   * @generated from field: string view_name = 2;
   */
  viewName = "";

  constructor(data?: PartialMessage<ClearViewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ClearViewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearViewRequest {
    return new ClearViewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearViewRequest {
    return new ClearViewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearViewRequest {
    return new ClearViewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClearViewRequest | PlainMessage<ClearViewRequest> | undefined, b: ClearViewRequest | PlainMessage<ClearViewRequest> | undefined): boolean {
    return proto3.util.equals(ClearViewRequest, a, b);
  }
}

/**
 * This is an empty response
 *
 * @generated from message zitadel.system.v1.ClearViewResponse
 */
export class ClearViewResponse extends Message<ClearViewResponse> {
  constructor(data?: PartialMessage<ClearViewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ClearViewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearViewResponse {
    return new ClearViewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearViewResponse {
    return new ClearViewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearViewResponse {
    return new ClearViewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClearViewResponse | PlainMessage<ClearViewResponse> | undefined, b: ClearViewResponse | PlainMessage<ClearViewResponse> | undefined): boolean {
    return proto3.util.equals(ClearViewResponse, a, b);
  }
}

/**
 * This is an empty request
 *
 * @generated from message zitadel.system.v1.ListFailedEventsRequest
 */
export class ListFailedEventsRequest extends Message<ListFailedEventsRequest> {
  constructor(data?: PartialMessage<ListFailedEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListFailedEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFailedEventsRequest {
    return new ListFailedEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFailedEventsRequest {
    return new ListFailedEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFailedEventsRequest {
    return new ListFailedEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFailedEventsRequest | PlainMessage<ListFailedEventsRequest> | undefined, b: ListFailedEventsRequest | PlainMessage<ListFailedEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListFailedEventsRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.ListFailedEventsResponse
 */
export class ListFailedEventsResponse extends Message<ListFailedEventsResponse> {
  /**
   * TODO: list details
   *
   * @generated from field: repeated zitadel.system.v1.FailedEvent result = 1;
   */
  result: FailedEvent[] = [];

  constructor(data?: PartialMessage<ListFailedEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.ListFailedEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: FailedEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFailedEventsResponse {
    return new ListFailedEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFailedEventsResponse {
    return new ListFailedEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFailedEventsResponse {
    return new ListFailedEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFailedEventsResponse | PlainMessage<ListFailedEventsResponse> | undefined, b: ListFailedEventsResponse | PlainMessage<ListFailedEventsResponse> | undefined): boolean {
    return proto3.util.equals(ListFailedEventsResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.RemoveFailedEventRequest
 */
export class RemoveFailedEventRequest extends Message<RemoveFailedEventRequest> {
  /**
   * @generated from field: string database = 1;
   */
  database = "";

  /**
   * @generated from field: string view_name = 2;
   */
  viewName = "";

  /**
   * @generated from field: uint64 failed_sequence = 3;
   */
  failedSequence = protoInt64.zero;

  /**
   * @generated from field: string instance_id = 4;
   */
  instanceId = "";

  constructor(data?: PartialMessage<RemoveFailedEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveFailedEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "failed_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveFailedEventRequest {
    return new RemoveFailedEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveFailedEventRequest {
    return new RemoveFailedEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveFailedEventRequest {
    return new RemoveFailedEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveFailedEventRequest | PlainMessage<RemoveFailedEventRequest> | undefined, b: RemoveFailedEventRequest | PlainMessage<RemoveFailedEventRequest> | undefined): boolean {
    return proto3.util.equals(RemoveFailedEventRequest, a, b);
  }
}

/**
 * This is an empty response
 *
 * @generated from message zitadel.system.v1.RemoveFailedEventResponse
 */
export class RemoveFailedEventResponse extends Message<RemoveFailedEventResponse> {
  constructor(data?: PartialMessage<RemoveFailedEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.RemoveFailedEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveFailedEventResponse {
    return new RemoveFailedEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveFailedEventResponse {
    return new RemoveFailedEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveFailedEventResponse {
    return new RemoveFailedEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveFailedEventResponse | PlainMessage<RemoveFailedEventResponse> | undefined, b: RemoveFailedEventResponse | PlainMessage<RemoveFailedEventResponse> | undefined): boolean {
    return proto3.util.equals(RemoveFailedEventResponse, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.View
 */
export class View extends Message<View> {
  /**
   * @generated from field: string database = 1;
   */
  database = "";

  /**
   * @generated from field: string view_name = 2;
   */
  viewName = "";

  /**
   * @generated from field: uint64 processed_sequence = 3;
   */
  processedSequence = protoInt64.zero;

  /**
   * The timestamp the event occured
   *
   * @generated from field: google.protobuf.Timestamp event_timestamp = 4;
   */
  eventTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_successful_spooler_run = 5;
   */
  lastSuccessfulSpoolerRun?: Timestamp;

  /**
   * @generated from field: string instance = 6;
   */
  instance = "";

  constructor(data?: PartialMessage<View>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.View";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "processed_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "event_timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "last_successful_spooler_run", kind: "message", T: Timestamp },
    { no: 6, name: "instance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): View {
    return new View().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): View {
    return new View().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): View {
    return new View().fromJsonString(jsonString, options);
  }

  static equals(a: View | PlainMessage<View> | undefined, b: View | PlainMessage<View> | undefined): boolean {
    return proto3.util.equals(View, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.FailedEvent
 */
export class FailedEvent extends Message<FailedEvent> {
  /**
   * @generated from field: string database = 1;
   */
  database = "";

  /**
   * @generated from field: string view_name = 2;
   */
  viewName = "";

  /**
   * @generated from field: uint64 failed_sequence = 3;
   */
  failedSequence = protoInt64.zero;

  /**
   * @generated from field: uint64 failure_count = 4;
   */
  failureCount = protoInt64.zero;

  /**
   * @generated from field: string error_message = 5;
   */
  errorMessage = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_failed = 6;
   */
  lastFailed?: Timestamp;

  constructor(data?: PartialMessage<FailedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.FailedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "failed_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "failure_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "last_failed", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailedEvent {
    return new FailedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailedEvent {
    return new FailedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailedEvent {
    return new FailedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FailedEvent | PlainMessage<FailedEvent> | undefined, b: FailedEvent | PlainMessage<FailedEvent> | undefined): boolean {
    return proto3.util.equals(FailedEvent, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetInstanceFeatureRequest
 */
export class SetInstanceFeatureRequest extends Message<SetInstanceFeatureRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: zitadel.feature.v1.InstanceFeature feature_id = 2;
   */
  featureId = InstanceFeature.UNSPECIFIED;

  /**
   * value based on the feature type
   *
   * @generated from oneof zitadel.system.v1.SetInstanceFeatureRequest.value
   */
  value: {
    /**
     * @generated from field: bool bool = 3;
     */
    value: boolean;
    case: "bool";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SetInstanceFeatureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetInstanceFeatureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feature_id", kind: "enum", T: proto3.getEnumType(InstanceFeature) },
    { no: 3, name: "bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetInstanceFeatureRequest {
    return new SetInstanceFeatureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetInstanceFeatureRequest {
    return new SetInstanceFeatureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetInstanceFeatureRequest {
    return new SetInstanceFeatureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetInstanceFeatureRequest | PlainMessage<SetInstanceFeatureRequest> | undefined, b: SetInstanceFeatureRequest | PlainMessage<SetInstanceFeatureRequest> | undefined): boolean {
    return proto3.util.equals(SetInstanceFeatureRequest, a, b);
  }
}

/**
 * @generated from message zitadel.system.v1.SetInstanceFeatureResponse
 */
export class SetInstanceFeatureResponse extends Message<SetInstanceFeatureResponse> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<SetInstanceFeatureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.system.v1.SetInstanceFeatureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetInstanceFeatureResponse {
    return new SetInstanceFeatureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetInstanceFeatureResponse {
    return new SetInstanceFeatureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetInstanceFeatureResponse {
    return new SetInstanceFeatureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetInstanceFeatureResponse | PlainMessage<SetInstanceFeatureResponse> | undefined, b: SetInstanceFeatureResponse | PlainMessage<SetInstanceFeatureResponse> | undefined): boolean {
    return proto3.util.equals(SetInstanceFeatureResponse, a, b);
  }
}

