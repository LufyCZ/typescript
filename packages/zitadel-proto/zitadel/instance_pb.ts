// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/instance.proto (package zitadel.instance.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";

/**
 * @generated from enum zitadel.instance.v1.State
 */
export enum State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATE_CREATING = 1;
   */
  CREATING = 1,

  /**
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: STATE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * @generated from enum value: STATE_STOPPED = 4;
   */
  STOPPED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(State)
proto3.util.setEnumType(State, "zitadel.instance.v1.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_CREATING" },
  { no: 2, name: "STATE_RUNNING" },
  { no: 3, name: "STATE_STOPPING" },
  { no: 4, name: "STATE_STOPPED" },
]);

/**
 * @generated from enum zitadel.instance.v1.FieldName
 */
export enum FieldName {
  /**
   * @generated from enum value: FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FIELD_NAME_ID = 1;
   */
  ID = 1,

  /**
   * @generated from enum value: FIELD_NAME_NAME = 2;
   */
  NAME = 2,

  /**
   * @generated from enum value: FIELD_NAME_CREATION_DATE = 3;
   */
  CREATION_DATE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(FieldName)
proto3.util.setEnumType(FieldName, "zitadel.instance.v1.FieldName", [
  { no: 0, name: "FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "FIELD_NAME_ID" },
  { no: 2, name: "FIELD_NAME_NAME" },
  { no: 3, name: "FIELD_NAME_CREATION_DATE" },
]);

/**
 * @generated from enum zitadel.instance.v1.DomainFieldName
 */
export enum DomainFieldName {
  /**
   * @generated from enum value: DOMAIN_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DOMAIN_FIELD_NAME_DOMAIN = 1;
   */
  DOMAIN = 1,

  /**
   * @generated from enum value: DOMAIN_FIELD_NAME_PRIMARY = 2;
   */
  PRIMARY = 2,

  /**
   * @generated from enum value: DOMAIN_FIELD_NAME_GENERATED = 3;
   */
  GENERATED = 3,

  /**
   * @generated from enum value: DOMAIN_FIELD_NAME_CREATION_DATE = 4;
   */
  CREATION_DATE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DomainFieldName)
proto3.util.setEnumType(DomainFieldName, "zitadel.instance.v1.DomainFieldName", [
  { no: 0, name: "DOMAIN_FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "DOMAIN_FIELD_NAME_DOMAIN" },
  { no: 2, name: "DOMAIN_FIELD_NAME_PRIMARY" },
  { no: 3, name: "DOMAIN_FIELD_NAME_GENERATED" },
  { no: 4, name: "DOMAIN_FIELD_NAME_CREATION_DATE" },
]);

/**
 * @generated from message zitadel.instance.v1.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.instance.v1.State state = 3;
   */
  state = State.UNSPECIFIED;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: repeated zitadel.instance.v1.Domain domains = 6;
   */
  domains: Domain[] = [];

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "domains", kind: "message", T: Domain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * @generated from message zitadel.instance.v1.InstanceDetail
 */
export class InstanceDetail extends Message<InstanceDetail> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.instance.v1.State state = 3;
   */
  state = State.UNSPECIFIED;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: repeated zitadel.instance.v1.Domain domains = 6;
   */
  domains: Domain[] = [];

  constructor(data?: PartialMessage<InstanceDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.InstanceDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "domains", kind: "message", T: Domain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceDetail {
    return new InstanceDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceDetail {
    return new InstanceDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceDetail {
    return new InstanceDetail().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceDetail | PlainMessage<InstanceDetail> | undefined, b: InstanceDetail | PlainMessage<InstanceDetail> | undefined): boolean {
    return proto3.util.equals(InstanceDetail, a, b);
  }
}

/**
 * @generated from message zitadel.instance.v1.Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from oneof zitadel.instance.v1.Query.query
   */
  query: {
    /**
     * @generated from field: zitadel.instance.v1.IdsQuery id_query = 1;
     */
    value: IdsQuery;
    case: "idQuery";
  } | {
    /**
     * @generated from field: zitadel.instance.v1.DomainsQuery domain_query = 2;
     */
    value: DomainsQuery;
    case: "domainQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id_query", kind: "message", T: IdsQuery, oneof: "query" },
    { no: 2, name: "domain_query", kind: "message", T: DomainsQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * IdQuery always equals
 *
 * @generated from message zitadel.instance.v1.IdsQuery
 */
export class IdsQuery extends Message<IdsQuery> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<IdsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.IdsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdsQuery {
    return new IdsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdsQuery {
    return new IdsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdsQuery {
    return new IdsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IdsQuery | PlainMessage<IdsQuery> | undefined, b: IdsQuery | PlainMessage<IdsQuery> | undefined): boolean {
    return proto3.util.equals(IdsQuery, a, b);
  }
}

/**
 * @generated from message zitadel.instance.v1.DomainsQuery
 */
export class DomainsQuery extends Message<DomainsQuery> {
  /**
   * @generated from field: repeated string domains = 1;
   */
  domains: string[] = [];

  constructor(data?: PartialMessage<DomainsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.DomainsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainsQuery {
    return new DomainsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainsQuery {
    return new DomainsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainsQuery {
    return new DomainsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainsQuery | PlainMessage<DomainsQuery> | undefined, b: DomainsQuery | PlainMessage<DomainsQuery> | undefined): boolean {
    return proto3.util.equals(DomainsQuery, a, b);
  }
}

/**
 * @generated from message zitadel.instance.v1.Domain
 */
export class Domain extends Message<Domain> {
  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 1;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: bool primary = 3;
   */
  primary = false;

  /**
   * @generated from field: bool generated = 4;
   */
  generated = false;

  constructor(data?: PartialMessage<Domain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.Domain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ObjectDetails },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "generated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Domain {
    return new Domain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Domain {
    return new Domain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Domain {
    return new Domain().fromJsonString(jsonString, options);
  }

  static equals(a: Domain | PlainMessage<Domain> | undefined, b: Domain | PlainMessage<Domain> | undefined): boolean {
    return proto3.util.equals(Domain, a, b);
  }
}

/**
 * @generated from message zitadel.instance.v1.DomainSearchQuery
 */
export class DomainSearchQuery extends Message<DomainSearchQuery> {
  /**
   * @generated from oneof zitadel.instance.v1.DomainSearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.instance.v1.DomainQuery domain_query = 1;
     */
    value: DomainQuery;
    case: "domainQuery";
  } | {
    /**
     * @generated from field: zitadel.instance.v1.DomainGeneratedQuery generated_query = 2;
     */
    value: DomainGeneratedQuery;
    case: "generatedQuery";
  } | {
    /**
     * @generated from field: zitadel.instance.v1.DomainPrimaryQuery primary_query = 3;
     */
    value: DomainPrimaryQuery;
    case: "primaryQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DomainSearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.DomainSearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain_query", kind: "message", T: DomainQuery, oneof: "query" },
    { no: 2, name: "generated_query", kind: "message", T: DomainGeneratedQuery, oneof: "query" },
    { no: 3, name: "primary_query", kind: "message", T: DomainPrimaryQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainSearchQuery {
    return new DomainSearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainSearchQuery {
    return new DomainSearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainSearchQuery {
    return new DomainSearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainSearchQuery | PlainMessage<DomainSearchQuery> | undefined, b: DomainSearchQuery | PlainMessage<DomainSearchQuery> | undefined): boolean {
    return proto3.util.equals(DomainSearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.instance.v1.DomainQuery
 */
export class DomainQuery extends Message<DomainQuery> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<DomainQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.DomainQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainQuery {
    return new DomainQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainQuery {
    return new DomainQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainQuery {
    return new DomainQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainQuery | PlainMessage<DomainQuery> | undefined, b: DomainQuery | PlainMessage<DomainQuery> | undefined): boolean {
    return proto3.util.equals(DomainQuery, a, b);
  }
}

/**
 * DomainGeneratedQuery is always equals
 *
 * @generated from message zitadel.instance.v1.DomainGeneratedQuery
 */
export class DomainGeneratedQuery extends Message<DomainGeneratedQuery> {
  /**
   * @generated from field: bool generated = 1;
   */
  generated = false;

  constructor(data?: PartialMessage<DomainGeneratedQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.DomainGeneratedQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "generated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainGeneratedQuery {
    return new DomainGeneratedQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainGeneratedQuery {
    return new DomainGeneratedQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainGeneratedQuery {
    return new DomainGeneratedQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainGeneratedQuery | PlainMessage<DomainGeneratedQuery> | undefined, b: DomainGeneratedQuery | PlainMessage<DomainGeneratedQuery> | undefined): boolean {
    return proto3.util.equals(DomainGeneratedQuery, a, b);
  }
}

/**
 * DomainPrimaryQuery is always equals
 *
 * @generated from message zitadel.instance.v1.DomainPrimaryQuery
 */
export class DomainPrimaryQuery extends Message<DomainPrimaryQuery> {
  /**
   * @generated from field: bool primary = 1;
   */
  primary = false;

  constructor(data?: PartialMessage<DomainPrimaryQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.instance.v1.DomainPrimaryQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainPrimaryQuery {
    return new DomainPrimaryQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainPrimaryQuery {
    return new DomainPrimaryQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainPrimaryQuery {
    return new DomainPrimaryQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainPrimaryQuery | PlainMessage<DomainPrimaryQuery> | undefined, b: DomainPrimaryQuery | PlainMessage<DomainPrimaryQuery> | undefined): boolean {
    return proto3.util.equals(DomainPrimaryQuery, a, b);
  }
}

