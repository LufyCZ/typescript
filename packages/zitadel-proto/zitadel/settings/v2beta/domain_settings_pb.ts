// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/settings/v2beta/domain_settings.proto (package zitadel.settings.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ResourceOwnerType } from "./settings_pb.js";

/**
 * @generated from message zitadel.settings.v2beta.DomainSettings
 */
export class DomainSettings extends Message<DomainSettings> {
  /**
   * @generated from field: bool login_name_includes_domain = 1;
   */
  loginNameIncludesDomain = false;

  /**
   * @generated from field: bool require_org_domain_verification = 2;
   */
  requireOrgDomainVerification = false;

  /**
   * @generated from field: bool smtp_sender_address_matches_instance_domain = 3;
   */
  smtpSenderAddressMatchesInstanceDomain = false;

  /**
   * resource_owner_type returns if the setting is managed on the organization or on the instance
   *
   * @generated from field: zitadel.settings.v2beta.ResourceOwnerType resource_owner_type = 6;
   */
  resourceOwnerType = ResourceOwnerType.UNSPECIFIED;

  constructor(data?: PartialMessage<DomainSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.settings.v2beta.DomainSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_name_includes_domain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "require_org_domain_verification", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "smtp_sender_address_matches_instance_domain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "resource_owner_type", kind: "enum", T: proto3.getEnumType(ResourceOwnerType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainSettings {
    return new DomainSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainSettings {
    return new DomainSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainSettings {
    return new DomainSettings().fromJsonString(jsonString, options);
  }

  static equals(a: DomainSettings | PlainMessage<DomainSettings> | undefined, b: DomainSettings | PlainMessage<DomainSettings> | undefined): boolean {
    return proto3.util.equals(DomainSettings, a, b);
  }
}

