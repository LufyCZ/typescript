// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/idp.proto (package zitadel.idp.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";

/**
 * @generated from enum zitadel.idp.v1.IDPState
 */
export enum IDPState {
  /**
   * @generated from enum value: IDP_STATE_UNSPECIFIED = 0;
   */
  IDP_STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: IDP_STATE_ACTIVE = 1;
   */
  IDP_STATE_ACTIVE = 1,

  /**
   * @generated from enum value: IDP_STATE_INACTIVE = 2;
   */
  IDP_STATE_INACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IDPState)
proto3.util.setEnumType(IDPState, "zitadel.idp.v1.IDPState", [
  { no: 0, name: "IDP_STATE_UNSPECIFIED" },
  { no: 1, name: "IDP_STATE_ACTIVE" },
  { no: 2, name: "IDP_STATE_INACTIVE" },
]);

/**
 * @generated from enum zitadel.idp.v1.IDPStylingType
 */
export enum IDPStylingType {
  /**
   * @generated from enum value: STYLING_TYPE_UNSPECIFIED = 0;
   */
  STYLING_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STYLING_TYPE_GOOGLE = 1;
   */
  STYLING_TYPE_GOOGLE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(IDPStylingType)
proto3.util.setEnumType(IDPStylingType, "zitadel.idp.v1.IDPStylingType", [
  { no: 0, name: "STYLING_TYPE_UNSPECIFIED" },
  { no: 1, name: "STYLING_TYPE_GOOGLE" },
]);

/**
 * authorization framework of the identity provider
 *
 * @generated from enum zitadel.idp.v1.IDPType
 */
export enum IDPType {
  /**
   * @generated from enum value: IDP_TYPE_UNSPECIFIED = 0;
   */
  IDP_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: IDP_TYPE_OIDC = 1;
   */
  IDP_TYPE_OIDC = 1,

  /**
   * @generated from enum value: IDP_TYPE_JWT = 3;
   */
  IDP_TYPE_JWT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(IDPType)
proto3.util.setEnumType(IDPType, "zitadel.idp.v1.IDPType", [
  { no: 0, name: "IDP_TYPE_UNSPECIFIED" },
  { no: 1, name: "IDP_TYPE_OIDC" },
  { no: 3, name: "IDP_TYPE_JWT" },
]);

/**
 * the owner of the identity provider.
 *
 * @generated from enum zitadel.idp.v1.IDPOwnerType
 */
export enum IDPOwnerType {
  /**
   * @generated from enum value: IDP_OWNER_TYPE_UNSPECIFIED = 0;
   */
  IDP_OWNER_TYPE_UNSPECIFIED = 0,

  /**
   * system is managed by the ZITADEL administrators
   *
   * @generated from enum value: IDP_OWNER_TYPE_SYSTEM = 1;
   */
  IDP_OWNER_TYPE_SYSTEM = 1,

  /**
   * org is managed by de organization administrators
   *
   * @generated from enum value: IDP_OWNER_TYPE_ORG = 2;
   */
  IDP_OWNER_TYPE_ORG = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IDPOwnerType)
proto3.util.setEnumType(IDPOwnerType, "zitadel.idp.v1.IDPOwnerType", [
  { no: 0, name: "IDP_OWNER_TYPE_UNSPECIFIED" },
  { no: 1, name: "IDP_OWNER_TYPE_SYSTEM" },
  { no: 2, name: "IDP_OWNER_TYPE_ORG" },
]);

/**
 * @generated from enum zitadel.idp.v1.OIDCMappingField
 */
export enum OIDCMappingField {
  /**
   * @generated from enum value: OIDC_MAPPING_FIELD_UNSPECIFIED = 0;
   */
  OIDC_MAPPING_FIELD_UNSPECIFIED = 0,

  /**
   * @generated from enum value: OIDC_MAPPING_FIELD_PREFERRED_USERNAME = 1;
   */
  OIDC_MAPPING_FIELD_PREFERRED_USERNAME = 1,

  /**
   * @generated from enum value: OIDC_MAPPING_FIELD_EMAIL = 2;
   */
  OIDC_MAPPING_FIELD_EMAIL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(OIDCMappingField)
proto3.util.setEnumType(OIDCMappingField, "zitadel.idp.v1.OIDCMappingField", [
  { no: 0, name: "OIDC_MAPPING_FIELD_UNSPECIFIED" },
  { no: 1, name: "OIDC_MAPPING_FIELD_PREFERRED_USERNAME" },
  { no: 2, name: "OIDC_MAPPING_FIELD_EMAIL" },
]);

/**
 * @generated from enum zitadel.idp.v1.IDPFieldName
 */
export enum IDPFieldName {
  /**
   * @generated from enum value: IDP_FIELD_NAME_UNSPECIFIED = 0;
   */
  IDP_FIELD_NAME_UNSPECIFIED = 0,

  /**
   * @generated from enum value: IDP_FIELD_NAME_NAME = 1;
   */
  IDP_FIELD_NAME_NAME = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(IDPFieldName)
proto3.util.setEnumType(IDPFieldName, "zitadel.idp.v1.IDPFieldName", [
  { no: 0, name: "IDP_FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "IDP_FIELD_NAME_NAME" },
]);

/**
 * @generated from enum zitadel.idp.v1.ProviderType
 */
export enum ProviderType {
  /**
   * @generated from enum value: PROVIDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROVIDER_TYPE_OIDC = 1;
   */
  OIDC = 1,

  /**
   * @generated from enum value: PROVIDER_TYPE_JWT = 2;
   */
  JWT = 2,

  /**
   * @generated from enum value: PROVIDER_TYPE_LDAP = 3;
   */
  LDAP = 3,

  /**
   * @generated from enum value: PROVIDER_TYPE_OAUTH = 4;
   */
  OAUTH = 4,

  /**
   * @generated from enum value: PROVIDER_TYPE_AZURE_AD = 5;
   */
  AZURE_AD = 5,

  /**
   * @generated from enum value: PROVIDER_TYPE_GITHUB = 6;
   */
  GITHUB = 6,

  /**
   * @generated from enum value: PROVIDER_TYPE_GITHUB_ES = 7;
   */
  GITHUB_ES = 7,

  /**
   * @generated from enum value: PROVIDER_TYPE_GITLAB = 8;
   */
  GITLAB = 8,

  /**
   * @generated from enum value: PROVIDER_TYPE_GITLAB_SELF_HOSTED = 9;
   */
  GITLAB_SELF_HOSTED = 9,

  /**
   * @generated from enum value: PROVIDER_TYPE_GOOGLE = 10;
   */
  GOOGLE = 10,

  /**
   * @generated from enum value: PROVIDER_TYPE_APPLE = 11;
   */
  APPLE = 11,

  /**
   * @generated from enum value: PROVIDER_TYPE_SAML = 12;
   */
  SAML = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(ProviderType)
proto3.util.setEnumType(ProviderType, "zitadel.idp.v1.ProviderType", [
  { no: 0, name: "PROVIDER_TYPE_UNSPECIFIED" },
  { no: 1, name: "PROVIDER_TYPE_OIDC" },
  { no: 2, name: "PROVIDER_TYPE_JWT" },
  { no: 3, name: "PROVIDER_TYPE_LDAP" },
  { no: 4, name: "PROVIDER_TYPE_OAUTH" },
  { no: 5, name: "PROVIDER_TYPE_AZURE_AD" },
  { no: 6, name: "PROVIDER_TYPE_GITHUB" },
  { no: 7, name: "PROVIDER_TYPE_GITHUB_ES" },
  { no: 8, name: "PROVIDER_TYPE_GITLAB" },
  { no: 9, name: "PROVIDER_TYPE_GITLAB_SELF_HOSTED" },
  { no: 10, name: "PROVIDER_TYPE_GOOGLE" },
  { no: 11, name: "PROVIDER_TYPE_APPLE" },
  { no: 12, name: "PROVIDER_TYPE_SAML" },
]);

/**
 * @generated from enum zitadel.idp.v1.SAMLBinding
 */
export enum SAMLBinding {
  /**
   * @generated from enum value: SAML_BINDING_UNSPECIFIED = 0;
   */
  SAML_BINDING_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SAML_BINDING_POST = 1;
   */
  SAML_BINDING_POST = 1,

  /**
   * @generated from enum value: SAML_BINDING_REDIRECT = 2;
   */
  SAML_BINDING_REDIRECT = 2,

  /**
   * @generated from enum value: SAML_BINDING_ARTIFACT = 3;
   */
  SAML_BINDING_ARTIFACT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SAMLBinding)
proto3.util.setEnumType(SAMLBinding, "zitadel.idp.v1.SAMLBinding", [
  { no: 0, name: "SAML_BINDING_UNSPECIFIED" },
  { no: 1, name: "SAML_BINDING_POST" },
  { no: 2, name: "SAML_BINDING_REDIRECT" },
  { no: 3, name: "SAML_BINDING_ARTIFACT" },
]);

/**
 * @generated from enum zitadel.idp.v1.SAMLNameIDFormat
 */
export enum SAMLNameIDFormat {
  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_UNSPECIFIED = 0;
   */
  SAML_NAME_ID_FORMAT_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_EMAIL_ADDRESS = 1;
   */
  SAML_NAME_ID_FORMAT_EMAIL_ADDRESS = 1,

  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_PERSISTENT = 2;
   */
  SAML_NAME_ID_FORMAT_PERSISTENT = 2,

  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_TRANSIENT = 3;
   */
  SAML_NAME_ID_FORMAT_TRANSIENT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SAMLNameIDFormat)
proto3.util.setEnumType(SAMLNameIDFormat, "zitadel.idp.v1.SAMLNameIDFormat", [
  { no: 0, name: "SAML_NAME_ID_FORMAT_UNSPECIFIED" },
  { no: 1, name: "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS" },
  { no: 2, name: "SAML_NAME_ID_FORMAT_PERSISTENT" },
  { no: 3, name: "SAML_NAME_ID_FORMAT_TRANSIENT" },
]);

/**
 * @generated from enum zitadel.idp.v1.AutoLinkingOption
 */
export enum AutoLinkingOption {
  /**
   * AUTO_LINKING_OPTION_UNSPECIFIED disables the auto linking prompt.
   *
   * @generated from enum value: AUTO_LINKING_OPTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * AUTO_LINKING_OPTION_USERNAME will use the username of the external user to check for a corresponding ZITADEL user.
   *
   * @generated from enum value: AUTO_LINKING_OPTION_USERNAME = 1;
   */
  USERNAME = 1,

  /**
   * AUTO_LINKING_OPTION_EMAIL  will use the email of the external user to check for a corresponding ZITADEL user with the same verified email
   * Note that in case multiple users match, no prompt will be shown.
   *
   * @generated from enum value: AUTO_LINKING_OPTION_EMAIL = 2;
   */
  EMAIL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AutoLinkingOption)
proto3.util.setEnumType(AutoLinkingOption, "zitadel.idp.v1.AutoLinkingOption", [
  { no: 0, name: "AUTO_LINKING_OPTION_UNSPECIFIED" },
  { no: 1, name: "AUTO_LINKING_OPTION_USERNAME" },
  { no: 2, name: "AUTO_LINKING_OPTION_EMAIL" },
]);

/**
 * @generated from enum zitadel.idp.v1.AzureADTenantType
 */
export enum AzureADTenantType {
  /**
   * @generated from enum value: AZURE_AD_TENANT_TYPE_COMMON = 0;
   */
  AZURE_AD_TENANT_TYPE_COMMON = 0,

  /**
   * @generated from enum value: AZURE_AD_TENANT_TYPE_ORGANISATIONS = 1;
   */
  AZURE_AD_TENANT_TYPE_ORGANISATIONS = 1,

  /**
   * @generated from enum value: AZURE_AD_TENANT_TYPE_CONSUMERS = 2;
   */
  AZURE_AD_TENANT_TYPE_CONSUMERS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AzureADTenantType)
proto3.util.setEnumType(AzureADTenantType, "zitadel.idp.v1.AzureADTenantType", [
  { no: 0, name: "AZURE_AD_TENANT_TYPE_COMMON" },
  { no: 1, name: "AZURE_AD_TENANT_TYPE_ORGANISATIONS" },
  { no: 2, name: "AZURE_AD_TENANT_TYPE_CONSUMERS" },
]);

/**
 * @generated from message zitadel.idp.v1.IDP
 */
export class IDP extends Message<IDP> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.idp.v1.IDPState state = 3;
   */
  state = IDPState.IDP_STATE_UNSPECIFIED;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: zitadel.idp.v1.IDPStylingType styling_type = 5;
   */
  stylingType = IDPStylingType.STYLING_TYPE_UNSPECIFIED;

  /**
   * @generated from field: zitadel.idp.v1.IDPOwnerType owner = 6;
   */
  owner = IDPOwnerType.IDP_OWNER_TYPE_UNSPECIFIED;

  /**
   * @generated from oneof zitadel.idp.v1.IDP.config
   */
  config: {
    /**
     * @generated from field: zitadel.idp.v1.OIDCConfig oidc_config = 7;
     */
    value: OIDCConfig;
    case: "oidcConfig";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.JWTConfig jwt_config = 9;
     */
    value: JWTConfig;
    case: "jwtConfig";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: bool auto_register = 8;
   */
  autoRegister = false;

  constructor(data?: PartialMessage<IDP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.IDP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(IDPState) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "styling_type", kind: "enum", T: proto3.getEnumType(IDPStylingType) },
    { no: 6, name: "owner", kind: "enum", T: proto3.getEnumType(IDPOwnerType) },
    { no: 7, name: "oidc_config", kind: "message", T: OIDCConfig, oneof: "config" },
    { no: 9, name: "jwt_config", kind: "message", T: JWTConfig, oneof: "config" },
    { no: 8, name: "auto_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDP {
    return new IDP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDP {
    return new IDP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDP {
    return new IDP().fromJsonString(jsonString, options);
  }

  static equals(a: IDP | PlainMessage<IDP> | undefined, b: IDP | PlainMessage<IDP> | undefined): boolean {
    return proto3.util.equals(IDP, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.IDPUserLink
 */
export class IDPUserLink extends Message<IDPUserLink> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string idp_id = 2;
   */
  idpId = "";

  /**
   * @generated from field: string idp_name = 3;
   */
  idpName = "";

  /**
   * @generated from field: string provided_user_id = 4;
   */
  providedUserId = "";

  /**
   * @generated from field: string provided_user_name = 5;
   */
  providedUserName = "";

  /**
   * @generated from field: zitadel.idp.v1.IDPType idp_type = 6;
   */
  idpType = IDPType.IDP_TYPE_UNSPECIFIED;

  constructor(data?: PartialMessage<IDPUserLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.IDPUserLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "idp_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "provided_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "provided_user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "idp_type", kind: "enum", T: proto3.getEnumType(IDPType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPUserLink {
    return new IDPUserLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPUserLink {
    return new IDPUserLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPUserLink {
    return new IDPUserLink().fromJsonString(jsonString, options);
  }

  static equals(a: IDPUserLink | PlainMessage<IDPUserLink> | undefined, b: IDPUserLink | PlainMessage<IDPUserLink> | undefined): boolean {
    return proto3.util.equals(IDPUserLink, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.IDPLoginPolicyLink
 */
export class IDPLoginPolicyLink extends Message<IDPLoginPolicyLink> {
  /**
   * @generated from field: string idp_id = 1;
   */
  idpId = "";

  /**
   * @generated from field: string idp_name = 2;
   */
  idpName = "";

  /**
   * @generated from field: zitadel.idp.v1.IDPType idp_type = 3;
   */
  idpType = IDPType.IDP_TYPE_UNSPECIFIED;

  constructor(data?: PartialMessage<IDPLoginPolicyLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.IDPLoginPolicyLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "idp_type", kind: "enum", T: proto3.getEnumType(IDPType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPLoginPolicyLink {
    return new IDPLoginPolicyLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPLoginPolicyLink {
    return new IDPLoginPolicyLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPLoginPolicyLink {
    return new IDPLoginPolicyLink().fromJsonString(jsonString, options);
  }

  static equals(a: IDPLoginPolicyLink | PlainMessage<IDPLoginPolicyLink> | undefined, b: IDPLoginPolicyLink | PlainMessage<IDPLoginPolicyLink> | undefined): boolean {
    return proto3.util.equals(IDPLoginPolicyLink, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.OIDCConfig
 */
export class OIDCConfig extends Message<OIDCConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[] = [];

  /**
   * @generated from field: zitadel.idp.v1.OIDCMappingField display_name_mapping = 4;
   */
  displayNameMapping = OIDCMappingField.OIDC_MAPPING_FIELD_UNSPECIFIED;

  /**
   * @generated from field: zitadel.idp.v1.OIDCMappingField username_mapping = 5;
   */
  usernameMapping = OIDCMappingField.OIDC_MAPPING_FIELD_UNSPECIFIED;

  constructor(data?: PartialMessage<OIDCConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.OIDCConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "display_name_mapping", kind: "enum", T: proto3.getEnumType(OIDCMappingField) },
    { no: 5, name: "username_mapping", kind: "enum", T: proto3.getEnumType(OIDCMappingField) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OIDCConfig {
    return new OIDCConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OIDCConfig {
    return new OIDCConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OIDCConfig {
    return new OIDCConfig().fromJsonString(jsonString, options);
  }

  static equals(a: OIDCConfig | PlainMessage<OIDCConfig> | undefined, b: OIDCConfig | PlainMessage<OIDCConfig> | undefined): boolean {
    return proto3.util.equals(OIDCConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.JWTConfig
 */
export class JWTConfig extends Message<JWTConfig> {
  /**
   * @generated from field: string jwt_endpoint = 1;
   */
  jwtEndpoint = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: string keys_endpoint = 3;
   */
  keysEndpoint = "";

  /**
   * @generated from field: string header_name = 4;
   */
  headerName = "";

  constructor(data?: PartialMessage<JWTConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.JWTConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jwt_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keys_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "header_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWTConfig {
    return new JWTConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWTConfig {
    return new JWTConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWTConfig {
    return new JWTConfig().fromJsonString(jsonString, options);
  }

  static equals(a: JWTConfig | PlainMessage<JWTConfig> | undefined, b: JWTConfig | PlainMessage<JWTConfig> | undefined): boolean {
    return proto3.util.equals(JWTConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.IDPIDQuery
 */
export class IDPIDQuery extends Message<IDPIDQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<IDPIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.IDPIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPIDQuery {
    return new IDPIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPIDQuery {
    return new IDPIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPIDQuery {
    return new IDPIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IDPIDQuery | PlainMessage<IDPIDQuery> | undefined, b: IDPIDQuery | PlainMessage<IDPIDQuery> | undefined): boolean {
    return proto3.util.equals(IDPIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.IDPNameQuery
 */
export class IDPNameQuery extends Message<IDPNameQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<IDPNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.IDPNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPNameQuery {
    return new IDPNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPNameQuery {
    return new IDPNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPNameQuery {
    return new IDPNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IDPNameQuery | PlainMessage<IDPNameQuery> | undefined, b: IDPNameQuery | PlainMessage<IDPNameQuery> | undefined): boolean {
    return proto3.util.equals(IDPNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.IDPOwnerTypeQuery
 */
export class IDPOwnerTypeQuery extends Message<IDPOwnerTypeQuery> {
  /**
   * @generated from field: zitadel.idp.v1.IDPOwnerType owner_type = 1;
   */
  ownerType = IDPOwnerType.IDP_OWNER_TYPE_UNSPECIFIED;

  constructor(data?: PartialMessage<IDPOwnerTypeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.IDPOwnerTypeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_type", kind: "enum", T: proto3.getEnumType(IDPOwnerType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPOwnerTypeQuery {
    return new IDPOwnerTypeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPOwnerTypeQuery {
    return new IDPOwnerTypeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPOwnerTypeQuery {
    return new IDPOwnerTypeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IDPOwnerTypeQuery | PlainMessage<IDPOwnerTypeQuery> | undefined, b: IDPOwnerTypeQuery | PlainMessage<IDPOwnerTypeQuery> | undefined): boolean {
    return proto3.util.equals(IDPOwnerTypeQuery, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.Provider
 */
export class Provider extends Message<Provider> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.idp.v1.IDPState state = 3;
   */
  state = IDPState.IDP_STATE_UNSPECIFIED;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: zitadel.idp.v1.IDPOwnerType owner = 5;
   */
  owner = IDPOwnerType.IDP_OWNER_TYPE_UNSPECIFIED;

  /**
   * @generated from field: zitadel.idp.v1.ProviderType type = 6;
   */
  type = ProviderType.UNSPECIFIED;

  /**
   * @generated from field: zitadel.idp.v1.ProviderConfig config = 7;
   */
  config?: ProviderConfig;

  constructor(data?: PartialMessage<Provider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.Provider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(IDPState) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "owner", kind: "enum", T: proto3.getEnumType(IDPOwnerType) },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(ProviderType) },
    { no: 7, name: "config", kind: "message", T: ProviderConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provider {
    return new Provider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJsonString(jsonString, options);
  }

  static equals(a: Provider | PlainMessage<Provider> | undefined, b: Provider | PlainMessage<Provider> | undefined): boolean {
    return proto3.util.equals(Provider, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.ProviderConfig
 */
export class ProviderConfig extends Message<ProviderConfig> {
  /**
   * @generated from field: zitadel.idp.v1.Options options = 1;
   */
  options?: Options;

  /**
   * @generated from oneof zitadel.idp.v1.ProviderConfig.config
   */
  config: {
    /**
     * @generated from field: zitadel.idp.v1.LDAPConfig ldap = 2;
     */
    value: LDAPConfig;
    case: "ldap";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.GoogleConfig google = 3;
     */
    value: GoogleConfig;
    case: "google";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.OAuthConfig oauth = 4;
     */
    value: OAuthConfig;
    case: "oauth";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.GenericOIDCConfig oidc = 5;
     */
    value: GenericOIDCConfig;
    case: "oidc";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.JWTConfig jwt = 6;
     */
    value: JWTConfig;
    case: "jwt";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.GitHubConfig github = 7;
     */
    value: GitHubConfig;
    case: "github";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.GitHubEnterpriseServerConfig github_es = 8;
     */
    value: GitHubEnterpriseServerConfig;
    case: "githubEs";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.GitLabConfig gitlab = 9;
     */
    value: GitLabConfig;
    case: "gitlab";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.GitLabSelfHostedConfig gitlab_self_hosted = 10;
     */
    value: GitLabSelfHostedConfig;
    case: "gitlabSelfHosted";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.AzureADConfig azure_ad = 11;
     */
    value: AzureADConfig;
    case: "azureAd";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.AppleConfig apple = 12;
     */
    value: AppleConfig;
    case: "apple";
  } | {
    /**
     * @generated from field: zitadel.idp.v1.SAMLConfig saml = 13;
     */
    value: SAMLConfig;
    case: "saml";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProviderConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.ProviderConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: Options },
    { no: 2, name: "ldap", kind: "message", T: LDAPConfig, oneof: "config" },
    { no: 3, name: "google", kind: "message", T: GoogleConfig, oneof: "config" },
    { no: 4, name: "oauth", kind: "message", T: OAuthConfig, oneof: "config" },
    { no: 5, name: "oidc", kind: "message", T: GenericOIDCConfig, oneof: "config" },
    { no: 6, name: "jwt", kind: "message", T: JWTConfig, oneof: "config" },
    { no: 7, name: "github", kind: "message", T: GitHubConfig, oneof: "config" },
    { no: 8, name: "github_es", kind: "message", T: GitHubEnterpriseServerConfig, oneof: "config" },
    { no: 9, name: "gitlab", kind: "message", T: GitLabConfig, oneof: "config" },
    { no: 10, name: "gitlab_self_hosted", kind: "message", T: GitLabSelfHostedConfig, oneof: "config" },
    { no: 11, name: "azure_ad", kind: "message", T: AzureADConfig, oneof: "config" },
    { no: 12, name: "apple", kind: "message", T: AppleConfig, oneof: "config" },
    { no: 13, name: "saml", kind: "message", T: SAMLConfig, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderConfig {
    return new ProviderConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderConfig {
    return new ProviderConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderConfig {
    return new ProviderConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ProviderConfig | PlainMessage<ProviderConfig> | undefined, b: ProviderConfig | PlainMessage<ProviderConfig> | undefined): boolean {
    return proto3.util.equals(ProviderConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.OAuthConfig
 */
export class OAuthConfig extends Message<OAuthConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint = "";

  /**
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint = "";

  /**
   * @generated from field: string user_endpoint = 4;
   */
  userEndpoint = "";

  /**
   * @generated from field: repeated string scopes = 5;
   */
  scopes: string[] = [];

  /**
   * @generated from field: string id_attribute = 6;
   */
  idAttribute = "";

  constructor(data?: PartialMessage<OAuthConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.OAuthConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authorization_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "id_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthConfig {
    return new OAuthConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthConfig {
    return new OAuthConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthConfig {
    return new OAuthConfig().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthConfig | PlainMessage<OAuthConfig> | undefined, b: OAuthConfig | PlainMessage<OAuthConfig> | undefined): boolean {
    return proto3.util.equals(OAuthConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.GenericOIDCConfig
 */
export class GenericOIDCConfig extends Message<GenericOIDCConfig> {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[] = [];

  /**
   * @generated from field: bool is_id_token_mapping = 4;
   */
  isIdTokenMapping = false;

  constructor(data?: PartialMessage<GenericOIDCConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.GenericOIDCConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "is_id_token_mapping", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericOIDCConfig {
    return new GenericOIDCConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericOIDCConfig {
    return new GenericOIDCConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericOIDCConfig {
    return new GenericOIDCConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GenericOIDCConfig | PlainMessage<GenericOIDCConfig> | undefined, b: GenericOIDCConfig | PlainMessage<GenericOIDCConfig> | undefined): boolean {
    return proto3.util.equals(GenericOIDCConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.GitHubConfig
 */
export class GitHubConfig extends Message<GitHubConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<GitHubConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.GitHubConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitHubConfig {
    return new GitHubConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitHubConfig {
    return new GitHubConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitHubConfig {
    return new GitHubConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GitHubConfig | PlainMessage<GitHubConfig> | undefined, b: GitHubConfig | PlainMessage<GitHubConfig> | undefined): boolean {
    return proto3.util.equals(GitHubConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.GitHubEnterpriseServerConfig
 */
export class GitHubEnterpriseServerConfig extends Message<GitHubEnterpriseServerConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint = "";

  /**
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint = "";

  /**
   * @generated from field: string user_endpoint = 4;
   */
  userEndpoint = "";

  /**
   * @generated from field: repeated string scopes = 5;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<GitHubEnterpriseServerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.GitHubEnterpriseServerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authorization_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitHubEnterpriseServerConfig {
    return new GitHubEnterpriseServerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitHubEnterpriseServerConfig {
    return new GitHubEnterpriseServerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitHubEnterpriseServerConfig {
    return new GitHubEnterpriseServerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GitHubEnterpriseServerConfig | PlainMessage<GitHubEnterpriseServerConfig> | undefined, b: GitHubEnterpriseServerConfig | PlainMessage<GitHubEnterpriseServerConfig> | undefined): boolean {
    return proto3.util.equals(GitHubEnterpriseServerConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.GoogleConfig
 */
export class GoogleConfig extends Message<GoogleConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<GoogleConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.GoogleConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoogleConfig {
    return new GoogleConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoogleConfig {
    return new GoogleConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoogleConfig {
    return new GoogleConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GoogleConfig | PlainMessage<GoogleConfig> | undefined, b: GoogleConfig | PlainMessage<GoogleConfig> | undefined): boolean {
    return proto3.util.equals(GoogleConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.GitLabConfig
 */
export class GitLabConfig extends Message<GitLabConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<GitLabConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.GitLabConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitLabConfig {
    return new GitLabConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitLabConfig {
    return new GitLabConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitLabConfig {
    return new GitLabConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GitLabConfig | PlainMessage<GitLabConfig> | undefined, b: GitLabConfig | PlainMessage<GitLabConfig> | undefined): boolean {
    return proto3.util.equals(GitLabConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.GitLabSelfHostedConfig
 */
export class GitLabSelfHostedConfig extends Message<GitLabSelfHostedConfig> {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<GitLabSelfHostedConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.GitLabSelfHostedConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitLabSelfHostedConfig {
    return new GitLabSelfHostedConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitLabSelfHostedConfig {
    return new GitLabSelfHostedConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitLabSelfHostedConfig {
    return new GitLabSelfHostedConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GitLabSelfHostedConfig | PlainMessage<GitLabSelfHostedConfig> | undefined, b: GitLabSelfHostedConfig | PlainMessage<GitLabSelfHostedConfig> | undefined): boolean {
    return proto3.util.equals(GitLabSelfHostedConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.LDAPConfig
 */
export class LDAPConfig extends Message<LDAPConfig> {
  /**
   * @generated from field: repeated string servers = 1;
   */
  servers: string[] = [];

  /**
   * @generated from field: bool start_tls = 2;
   */
  startTls = false;

  /**
   * @generated from field: string base_dn = 3;
   */
  baseDn = "";

  /**
   * @generated from field: string bind_dn = 4;
   */
  bindDn = "";

  /**
   * @generated from field: string user_base = 5;
   */
  userBase = "";

  /**
   * @generated from field: repeated string user_object_classes = 6;
   */
  userObjectClasses: string[] = [];

  /**
   * @generated from field: repeated string user_filters = 7;
   */
  userFilters: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration timeout = 8;
   */
  timeout?: Duration;

  /**
   * @generated from field: zitadel.idp.v1.LDAPAttributes attributes = 9;
   */
  attributes?: LDAPAttributes;

  constructor(data?: PartialMessage<LDAPConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.LDAPConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "servers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "start_tls", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "base_dn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bind_dn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "user_object_classes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "user_filters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "timeout", kind: "message", T: Duration },
    { no: 9, name: "attributes", kind: "message", T: LDAPAttributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LDAPConfig {
    return new LDAPConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LDAPConfig {
    return new LDAPConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LDAPConfig {
    return new LDAPConfig().fromJsonString(jsonString, options);
  }

  static equals(a: LDAPConfig | PlainMessage<LDAPConfig> | undefined, b: LDAPConfig | PlainMessage<LDAPConfig> | undefined): boolean {
    return proto3.util.equals(LDAPConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.SAMLConfig
 */
export class SAMLConfig extends Message<SAMLConfig> {
  /**
   * Metadata of the SAML identity provider.
   *
   * @generated from field: bytes metadata_xml = 1;
   */
  metadataXml = new Uint8Array(0);

  /**
   * Binding which defines the type of communication with the identity provider.
   *
   * @generated from field: zitadel.idp.v1.SAMLBinding binding = 2;
   */
  binding = SAMLBinding.SAML_BINDING_UNSPECIFIED;

  /**
   * Boolean which defines if the authentication requests are signed.
   *
   * @generated from field: bool with_signed_request = 3;
   */
  withSignedRequest = false;

  /**
   * `nameid-format` for the SAML Request.
   *
   * @generated from field: zitadel.idp.v1.SAMLNameIDFormat name_id_format = 4;
   */
  nameIdFormat = SAMLNameIDFormat.SAML_NAME_ID_FORMAT_UNSPECIFIED;

  /**
   * Optional name of the attribute, which will be used to map the user
   * in case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
   *
   * @generated from field: optional string transient_mapping_attribute_name = 5;
   */
  transientMappingAttributeName?: string;

  constructor(data?: PartialMessage<SAMLConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.SAMLConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_xml", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "binding", kind: "enum", T: proto3.getEnumType(SAMLBinding) },
    { no: 3, name: "with_signed_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "name_id_format", kind: "enum", T: proto3.getEnumType(SAMLNameIDFormat) },
    { no: 5, name: "transient_mapping_attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SAMLConfig {
    return new SAMLConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SAMLConfig {
    return new SAMLConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SAMLConfig {
    return new SAMLConfig().fromJsonString(jsonString, options);
  }

  static equals(a: SAMLConfig | PlainMessage<SAMLConfig> | undefined, b: SAMLConfig | PlainMessage<SAMLConfig> | undefined): boolean {
    return proto3.util.equals(SAMLConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.AzureADConfig
 */
export class AzureADConfig extends Message<AzureADConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: zitadel.idp.v1.AzureADTenant tenant = 2;
   */
  tenant?: AzureADTenant;

  /**
   * @generated from field: bool email_verified = 3;
   */
  emailVerified = false;

  /**
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<AzureADConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.AzureADConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant", kind: "message", T: AzureADTenant },
    { no: 3, name: "email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AzureADConfig {
    return new AzureADConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AzureADConfig {
    return new AzureADConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AzureADConfig {
    return new AzureADConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AzureADConfig | PlainMessage<AzureADConfig> | undefined, b: AzureADConfig | PlainMessage<AzureADConfig> | undefined): boolean {
    return proto3.util.equals(AzureADConfig, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.Options
 */
export class Options extends Message<Options> {
  /**
   * @generated from field: bool is_linking_allowed = 1;
   */
  isLinkingAllowed = false;

  /**
   * @generated from field: bool is_creation_allowed = 2;
   */
  isCreationAllowed = false;

  /**
   * @generated from field: bool is_auto_creation = 3;
   */
  isAutoCreation = false;

  /**
   * @generated from field: bool is_auto_update = 4;
   */
  isAutoUpdate = false;

  /**
   * @generated from field: zitadel.idp.v1.AutoLinkingOption auto_linking = 5;
   */
  autoLinking = AutoLinkingOption.UNSPECIFIED;

  constructor(data?: PartialMessage<Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_linking_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_creation_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_auto_creation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "is_auto_update", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "auto_linking", kind: "enum", T: proto3.getEnumType(AutoLinkingOption) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Options {
    return new Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Options {
    return new Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Options {
    return new Options().fromJsonString(jsonString, options);
  }

  static equals(a: Options | PlainMessage<Options> | undefined, b: Options | PlainMessage<Options> | undefined): boolean {
    return proto3.util.equals(Options, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.LDAPAttributes
 */
export class LDAPAttributes extends Message<LDAPAttributes> {
  /**
   * @generated from field: string id_attribute = 1;
   */
  idAttribute = "";

  /**
   * @generated from field: string first_name_attribute = 2;
   */
  firstNameAttribute = "";

  /**
   * @generated from field: string last_name_attribute = 3;
   */
  lastNameAttribute = "";

  /**
   * @generated from field: string display_name_attribute = 4;
   */
  displayNameAttribute = "";

  /**
   * @generated from field: string nick_name_attribute = 5;
   */
  nickNameAttribute = "";

  /**
   * @generated from field: string preferred_username_attribute = 6;
   */
  preferredUsernameAttribute = "";

  /**
   * @generated from field: string email_attribute = 7;
   */
  emailAttribute = "";

  /**
   * @generated from field: string email_verified_attribute = 8;
   */
  emailVerifiedAttribute = "";

  /**
   * @generated from field: string phone_attribute = 9;
   */
  phoneAttribute = "";

  /**
   * @generated from field: string phone_verified_attribute = 10;
   */
  phoneVerifiedAttribute = "";

  /**
   * @generated from field: string preferred_language_attribute = 11;
   */
  preferredLanguageAttribute = "";

  /**
   * @generated from field: string avatar_url_attribute = 12;
   */
  avatarUrlAttribute = "";

  /**
   * @generated from field: string profile_attribute = 13;
   */
  profileAttribute = "";

  constructor(data?: PartialMessage<LDAPAttributes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.LDAPAttributes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "nick_name_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "preferred_username_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "email_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "email_verified_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "phone_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "phone_verified_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "preferred_language_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "avatar_url_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "profile_attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LDAPAttributes {
    return new LDAPAttributes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LDAPAttributes {
    return new LDAPAttributes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LDAPAttributes {
    return new LDAPAttributes().fromJsonString(jsonString, options);
  }

  static equals(a: LDAPAttributes | PlainMessage<LDAPAttributes> | undefined, b: LDAPAttributes | PlainMessage<LDAPAttributes> | undefined): boolean {
    return proto3.util.equals(LDAPAttributes, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.AzureADTenant
 */
export class AzureADTenant extends Message<AzureADTenant> {
  /**
   * @generated from oneof zitadel.idp.v1.AzureADTenant.type
   */
  type: {
    /**
     * @generated from field: zitadel.idp.v1.AzureADTenantType tenant_type = 1;
     */
    value: AzureADTenantType;
    case: "tenantType";
  } | {
    /**
     * @generated from field: string tenant_id = 2;
     */
    value: string;
    case: "tenantId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AzureADTenant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.AzureADTenant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_type", kind: "enum", T: proto3.getEnumType(AzureADTenantType), oneof: "type" },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AzureADTenant {
    return new AzureADTenant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AzureADTenant {
    return new AzureADTenant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AzureADTenant {
    return new AzureADTenant().fromJsonString(jsonString, options);
  }

  static equals(a: AzureADTenant | PlainMessage<AzureADTenant> | undefined, b: AzureADTenant | PlainMessage<AzureADTenant> | undefined): boolean {
    return proto3.util.equals(AzureADTenant, a, b);
  }
}

/**
 * @generated from message zitadel.idp.v1.AppleConfig
 */
export class AppleConfig extends Message<AppleConfig> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string team_id = 2;
   */
  teamId = "";

  /**
   * @generated from field: string key_id = 3;
   */
  keyId = "";

  /**
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<AppleConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.idp.v1.AppleConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "team_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppleConfig {
    return new AppleConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppleConfig {
    return new AppleConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppleConfig {
    return new AppleConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AppleConfig | PlainMessage<AppleConfig> | undefined, b: AppleConfig | PlainMessage<AppleConfig> | undefined): boolean {
    return proto3.util.equals(AppleConfig, a, b);
  }
}

