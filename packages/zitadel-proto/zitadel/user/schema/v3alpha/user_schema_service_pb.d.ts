// @generated by protoc-gen-es v1.10.0
// @generated from file zitadel/user/schema/v3alpha/user_schema_service.proto (package zitadel.user.schema.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Details, ListDetails, ListQuery } from "../../../object/v2beta/object_pb.js";
import type { AuthenticatorType, FieldName, SearchQuery, UserSchema } from "./user_schema_pb.js";

/**
 * @generated from message zitadel.user.schema.v3alpha.ListUserSchemasRequest
 */
export declare class ListUserSchemasRequest extends Message<ListUserSchemasRequest> {
  /**
   * list limitations and ordering.
   *
   * @generated from field: zitadel.object.v2beta.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * the field the result is sorted.
   *
   * @generated from field: zitadel.user.schema.v3alpha.FieldName sorting_column = 2;
   */
  sortingColumn: FieldName;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.user.schema.v3alpha.SearchQuery queries = 3;
   */
  queries: SearchQuery[];

  constructor(data?: PartialMessage<ListUserSchemasRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.ListUserSchemasRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserSchemasRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserSchemasRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserSchemasRequest;

  static equals(a: ListUserSchemasRequest | PlainMessage<ListUserSchemasRequest> | undefined, b: ListUserSchemasRequest | PlainMessage<ListUserSchemasRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.ListUserSchemasResponse
 */
export declare class ListUserSchemasResponse extends Message<ListUserSchemasResponse> {
  /**
   * Details provides information about the returned result including total amount found.
   *
   * @generated from field: zitadel.object.v2beta.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * States by which field the results are sorted.
   *
   * @generated from field: zitadel.user.schema.v3alpha.FieldName sorting_column = 2;
   */
  sortingColumn: FieldName;

  /**
   * The result contains the user schemas, which matched the queries.
   *
   * @generated from field: repeated zitadel.user.schema.v3alpha.UserSchema result = 3;
   */
  result: UserSchema[];

  constructor(data?: PartialMessage<ListUserSchemasResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.ListUserSchemasResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserSchemasResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserSchemasResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserSchemasResponse;

  static equals(a: ListUserSchemasResponse | PlainMessage<ListUserSchemasResponse> | undefined, b: ListUserSchemasResponse | PlainMessage<ListUserSchemasResponse> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.GetUserSchemaByIDRequest
 */
export declare class GetUserSchemaByIDRequest extends Message<GetUserSchemaByIDRequest> {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<GetUserSchemaByIDRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.GetUserSchemaByIDRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserSchemaByIDRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserSchemaByIDRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserSchemaByIDRequest;

  static equals(a: GetUserSchemaByIDRequest | PlainMessage<GetUserSchemaByIDRequest> | undefined, b: GetUserSchemaByIDRequest | PlainMessage<GetUserSchemaByIDRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.GetUserSchemaByIDResponse
 */
export declare class GetUserSchemaByIDResponse extends Message<GetUserSchemaByIDResponse> {
  /**
   * @generated from field: zitadel.user.schema.v3alpha.UserSchema schema = 1;
   */
  schema?: UserSchema;

  constructor(data?: PartialMessage<GetUserSchemaByIDResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.GetUserSchemaByIDResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserSchemaByIDResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserSchemaByIDResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserSchemaByIDResponse;

  static equals(a: GetUserSchemaByIDResponse | PlainMessage<GetUserSchemaByIDResponse> | undefined, b: GetUserSchemaByIDResponse | PlainMessage<GetUserSchemaByIDResponse> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.CreateUserSchemaRequest
 */
export declare class CreateUserSchemaRequest extends Message<CreateUserSchemaRequest> {
  /**
   * Type is a human readable word describing the schema.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from oneof zitadel.user.schema.v3alpha.CreateUserSchemaRequest.data_type
   */
  dataType: {
    /**
     * JSON schema representation defining the user.
     *
     * @generated from field: google.protobuf.Struct schema = 2;
     */
    value: Struct;
    case: "schema";
  } | { case: undefined; value?: undefined };

  /**
   * Defines the possible types of authenticators.
   *
   * @generated from field: repeated zitadel.user.schema.v3alpha.AuthenticatorType possible_authenticators = 3;
   */
  possibleAuthenticators: AuthenticatorType[];

  constructor(data?: PartialMessage<CreateUserSchemaRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.CreateUserSchemaRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserSchemaRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserSchemaRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserSchemaRequest;

  static equals(a: CreateUserSchemaRequest | PlainMessage<CreateUserSchemaRequest> | undefined, b: CreateUserSchemaRequest | PlainMessage<CreateUserSchemaRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.CreateUserSchemaResponse
 */
export declare class CreateUserSchemaResponse extends Message<CreateUserSchemaResponse> {
  /**
   * ID is the read-only unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  constructor(data?: PartialMessage<CreateUserSchemaResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.CreateUserSchemaResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserSchemaResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserSchemaResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserSchemaResponse;

  static equals(a: CreateUserSchemaResponse | PlainMessage<CreateUserSchemaResponse> | undefined, b: CreateUserSchemaResponse | PlainMessage<CreateUserSchemaResponse> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.UpdateUserSchemaRequest
 */
export declare class UpdateUserSchemaRequest extends Message<UpdateUserSchemaRequest> {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Type is a human readable word describing the schema.
   *
   * @generated from field: optional string type = 2;
   */
  type?: string;

  /**
   * @generated from oneof zitadel.user.schema.v3alpha.UpdateUserSchemaRequest.data_type
   */
  dataType: {
    /**
     * JSON schema representation defining the user.
     *
     * @generated from field: google.protobuf.Struct schema = 3;
     */
    value: Struct;
    case: "schema";
  } | { case: undefined; value?: undefined };

  /**
   * Defines the possible types of authenticators.
   *
   * Removal of an authenticator does not remove the authenticator on a user.
   *
   * @generated from field: repeated zitadel.user.schema.v3alpha.AuthenticatorType possible_authenticators = 4;
   */
  possibleAuthenticators: AuthenticatorType[];

  constructor(data?: PartialMessage<UpdateUserSchemaRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.UpdateUserSchemaRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserSchemaRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserSchemaRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserSchemaRequest;

  static equals(a: UpdateUserSchemaRequest | PlainMessage<UpdateUserSchemaRequest> | undefined, b: UpdateUserSchemaRequest | PlainMessage<UpdateUserSchemaRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.UpdateUserSchemaResponse
 */
export declare class UpdateUserSchemaResponse extends Message<UpdateUserSchemaResponse> {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<UpdateUserSchemaResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.UpdateUserSchemaResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserSchemaResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserSchemaResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserSchemaResponse;

  static equals(a: UpdateUserSchemaResponse | PlainMessage<UpdateUserSchemaResponse> | undefined, b: UpdateUserSchemaResponse | PlainMessage<UpdateUserSchemaResponse> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.DeactivateUserSchemaRequest
 */
export declare class DeactivateUserSchemaRequest extends Message<DeactivateUserSchemaRequest> {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DeactivateUserSchemaRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.DeactivateUserSchemaRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateUserSchemaRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateUserSchemaRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateUserSchemaRequest;

  static equals(a: DeactivateUserSchemaRequest | PlainMessage<DeactivateUserSchemaRequest> | undefined, b: DeactivateUserSchemaRequest | PlainMessage<DeactivateUserSchemaRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.DeactivateUserSchemaResponse
 */
export declare class DeactivateUserSchemaResponse extends Message<DeactivateUserSchemaResponse> {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeactivateUserSchemaResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.DeactivateUserSchemaResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateUserSchemaResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateUserSchemaResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateUserSchemaResponse;

  static equals(a: DeactivateUserSchemaResponse | PlainMessage<DeactivateUserSchemaResponse> | undefined, b: DeactivateUserSchemaResponse | PlainMessage<DeactivateUserSchemaResponse> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.ReactivateUserSchemaRequest
 */
export declare class ReactivateUserSchemaRequest extends Message<ReactivateUserSchemaRequest> {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<ReactivateUserSchemaRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.ReactivateUserSchemaRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactivateUserSchemaRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactivateUserSchemaRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactivateUserSchemaRequest;

  static equals(a: ReactivateUserSchemaRequest | PlainMessage<ReactivateUserSchemaRequest> | undefined, b: ReactivateUserSchemaRequest | PlainMessage<ReactivateUserSchemaRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.ReactivateUserSchemaResponse
 */
export declare class ReactivateUserSchemaResponse extends Message<ReactivateUserSchemaResponse> {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<ReactivateUserSchemaResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.ReactivateUserSchemaResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactivateUserSchemaResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactivateUserSchemaResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactivateUserSchemaResponse;

  static equals(a: ReactivateUserSchemaResponse | PlainMessage<ReactivateUserSchemaResponse> | undefined, b: ReactivateUserSchemaResponse | PlainMessage<ReactivateUserSchemaResponse> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.DeleteUserSchemaRequest
 */
export declare class DeleteUserSchemaRequest extends Message<DeleteUserSchemaRequest> {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DeleteUserSchemaRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.DeleteUserSchemaRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserSchemaRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserSchemaRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserSchemaRequest;

  static equals(a: DeleteUserSchemaRequest | PlainMessage<DeleteUserSchemaRequest> | undefined, b: DeleteUserSchemaRequest | PlainMessage<DeleteUserSchemaRequest> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.schema.v3alpha.DeleteUserSchemaResponse
 */
export declare class DeleteUserSchemaResponse extends Message<DeleteUserSchemaResponse> {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeleteUserSchemaResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.schema.v3alpha.DeleteUserSchemaResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserSchemaResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserSchemaResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserSchemaResponse;

  static equals(a: DeleteUserSchemaResponse | PlainMessage<DeleteUserSchemaResponse> | undefined, b: DeleteUserSchemaResponse | PlainMessage<DeleteUserSchemaResponse> | undefined): boolean;
}

