// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/action.proto (package zitadel.action.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";
import { LocalizedMessage } from "./message_pb.js";

/**
 * @generated from enum zitadel.action.v1.ActionState
 */
export enum ActionState {
  /**
   * @generated from enum value: ACTION_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTION_STATE_INACTIVE = 1;
   */
  INACTIVE = 1,

  /**
   * @generated from enum value: ACTION_STATE_ACTIVE = 2;
   */
  ACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ActionState)
proto3.util.setEnumType(ActionState, "zitadel.action.v1.ActionState", [
  { no: 0, name: "ACTION_STATE_UNSPECIFIED" },
  { no: 1, name: "ACTION_STATE_INACTIVE" },
  { no: 2, name: "ACTION_STATE_ACTIVE" },
]);

/**
 * @generated from enum zitadel.action.v1.ActionFieldName
 */
export enum ActionFieldName {
  /**
   * @generated from enum value: ACTION_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTION_FIELD_NAME_NAME = 1;
   */
  NAME = 1,

  /**
   * @generated from enum value: ACTION_FIELD_NAME_ID = 2;
   */
  ID = 2,

  /**
   * @generated from enum value: ACTION_FIELD_NAME_STATE = 3;
   */
  STATE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ActionFieldName)
proto3.util.setEnumType(ActionFieldName, "zitadel.action.v1.ActionFieldName", [
  { no: 0, name: "ACTION_FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "ACTION_FIELD_NAME_NAME" },
  { no: 2, name: "ACTION_FIELD_NAME_ID" },
  { no: 3, name: "ACTION_FIELD_NAME_STATE" },
]);

/**
 * @generated from enum zitadel.action.v1.FlowState
 */
export enum FlowState {
  /**
   * @generated from enum value: FLOW_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FLOW_STATE_INACTIVE = 1;
   */
  INACTIVE = 1,

  /**
   * @generated from enum value: FLOW_STATE_ACTIVE = 2;
   */
  ACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FlowState)
proto3.util.setEnumType(FlowState, "zitadel.action.v1.FlowState", [
  { no: 0, name: "FLOW_STATE_UNSPECIFIED" },
  { no: 1, name: "FLOW_STATE_INACTIVE" },
  { no: 2, name: "FLOW_STATE_ACTIVE" },
]);

/**
 * @generated from message zitadel.action.v1.Action
 */
export class Action extends Message<Action> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.action.v1.ActionState state = 3;
   */
  state = ActionState.UNSPECIFIED;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string script = 5;
   */
  script = "";

  /**
   * @generated from field: google.protobuf.Duration timeout = 6;
   */
  timeout?: Duration;

  /**
   * @generated from field: bool allowed_to_fail = 7;
   */
  allowedToFail = false;

  constructor(data?: PartialMessage<Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(ActionState) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "script", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timeout", kind: "message", T: Duration },
    { no: 7, name: "allowed_to_fail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action {
    return new Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJsonString(jsonString, options);
  }

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean {
    return proto3.util.equals(Action, a, b);
  }
}

/**
 * @generated from message zitadel.action.v1.ActionIDQuery
 */
export class ActionIDQuery extends Message<ActionIDQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ActionIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.ActionIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionIDQuery {
    return new ActionIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionIDQuery {
    return new ActionIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionIDQuery {
    return new ActionIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ActionIDQuery | PlainMessage<ActionIDQuery> | undefined, b: ActionIDQuery | PlainMessage<ActionIDQuery> | undefined): boolean {
    return proto3.util.equals(ActionIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v1.ActionNameQuery
 */
export class ActionNameQuery extends Message<ActionNameQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<ActionNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.ActionNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionNameQuery {
    return new ActionNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionNameQuery {
    return new ActionNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionNameQuery {
    return new ActionNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ActionNameQuery | PlainMessage<ActionNameQuery> | undefined, b: ActionNameQuery | PlainMessage<ActionNameQuery> | undefined): boolean {
    return proto3.util.equals(ActionNameQuery, a, b);
  }
}

/**
 * ActionStateQuery always equals
 *
 * @generated from message zitadel.action.v1.ActionStateQuery
 */
export class ActionStateQuery extends Message<ActionStateQuery> {
  /**
   * @generated from field: zitadel.action.v1.ActionState state = 1;
   */
  state = ActionState.UNSPECIFIED;

  constructor(data?: PartialMessage<ActionStateQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.ActionStateQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(ActionState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionStateQuery {
    return new ActionStateQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionStateQuery {
    return new ActionStateQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionStateQuery {
    return new ActionStateQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ActionStateQuery | PlainMessage<ActionStateQuery> | undefined, b: ActionStateQuery | PlainMessage<ActionStateQuery> | undefined): boolean {
    return proto3.util.equals(ActionStateQuery, a, b);
  }
}

/**
 * @generated from message zitadel.action.v1.Flow
 */
export class Flow extends Message<Flow> {
  /**
   * id of the flow type
   *
   * @generated from field: zitadel.action.v1.FlowType type = 1;
   */
  type?: FlowType;

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.action.v1.FlowState state = 3;
   */
  state = FlowState.UNSPECIFIED;

  /**
   * @generated from field: repeated zitadel.action.v1.TriggerAction trigger_actions = 4;
   */
  triggerActions: TriggerAction[] = [];

  constructor(data?: PartialMessage<Flow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.Flow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "message", T: FlowType },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(FlowState) },
    { no: 4, name: "trigger_actions", kind: "message", T: TriggerAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Flow {
    return new Flow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Flow {
    return new Flow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Flow {
    return new Flow().fromJsonString(jsonString, options);
  }

  static equals(a: Flow | PlainMessage<Flow> | undefined, b: Flow | PlainMessage<Flow> | undefined): boolean {
    return proto3.util.equals(Flow, a, b);
  }
}

/**
 * @generated from message zitadel.action.v1.FlowType
 */
export class FlowType extends Message<FlowType> {
  /**
   * identifier of the type
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * key and name of the type
   *
   * @generated from field: zitadel.v1.LocalizedMessage name = 2;
   */
  name?: LocalizedMessage;

  constructor(data?: PartialMessage<FlowType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.FlowType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "message", T: LocalizedMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlowType {
    return new FlowType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlowType {
    return new FlowType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlowType {
    return new FlowType().fromJsonString(jsonString, options);
  }

  static equals(a: FlowType | PlainMessage<FlowType> | undefined, b: FlowType | PlainMessage<FlowType> | undefined): boolean {
    return proto3.util.equals(FlowType, a, b);
  }
}

/**
 * @generated from message zitadel.action.v1.TriggerType
 */
export class TriggerType extends Message<TriggerType> {
  /**
   * identifier of the type
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * key and name of the type
   *
   * @generated from field: zitadel.v1.LocalizedMessage name = 2;
   */
  name?: LocalizedMessage;

  constructor(data?: PartialMessage<TriggerType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.TriggerType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "message", T: LocalizedMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerType {
    return new TriggerType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerType {
    return new TriggerType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerType {
    return new TriggerType().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerType | PlainMessage<TriggerType> | undefined, b: TriggerType | PlainMessage<TriggerType> | undefined): boolean {
    return proto3.util.equals(TriggerType, a, b);
  }
}

/**
 * @generated from message zitadel.action.v1.TriggerAction
 */
export class TriggerAction extends Message<TriggerAction> {
  /**
   * id of the trigger type
   *
   * @generated from field: zitadel.action.v1.TriggerType trigger_type = 1;
   */
  triggerType?: TriggerType;

  /**
   * @generated from field: repeated zitadel.action.v1.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<TriggerAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v1.TriggerAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trigger_type", kind: "message", T: TriggerType },
    { no: 2, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerAction {
    return new TriggerAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerAction {
    return new TriggerAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerAction {
    return new TriggerAction().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerAction | PlainMessage<TriggerAction> | undefined, b: TriggerAction | PlainMessage<TriggerAction> | undefined): boolean {
    return proto3.util.equals(TriggerAction, a, b);
  }
}

