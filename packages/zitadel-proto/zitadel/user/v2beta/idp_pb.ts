// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/v2beta/idp.proto (package zitadel.user.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message zitadel.user.v2beta.LDAPCredentials
 */
export class LDAPCredentials extends Message<LDAPCredentials> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LDAPCredentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.LDAPCredentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LDAPCredentials {
    return new LDAPCredentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LDAPCredentials {
    return new LDAPCredentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LDAPCredentials {
    return new LDAPCredentials().fromJsonString(jsonString, options);
  }

  static equals(a: LDAPCredentials | PlainMessage<LDAPCredentials> | undefined, b: LDAPCredentials | PlainMessage<LDAPCredentials> | undefined): boolean {
    return proto3.util.equals(LDAPCredentials, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.RedirectURLs
 */
export class RedirectURLs extends Message<RedirectURLs> {
  /**
   * @generated from field: string success_url = 1;
   */
  successUrl = "";

  /**
   * @generated from field: string failure_url = 2;
   */
  failureUrl = "";

  constructor(data?: PartialMessage<RedirectURLs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.RedirectURLs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "failure_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedirectURLs {
    return new RedirectURLs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedirectURLs {
    return new RedirectURLs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedirectURLs {
    return new RedirectURLs().fromJsonString(jsonString, options);
  }

  static equals(a: RedirectURLs | PlainMessage<RedirectURLs> | undefined, b: RedirectURLs | PlainMessage<RedirectURLs> | undefined): boolean {
    return proto3.util.equals(RedirectURLs, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.IDPIntent
 */
export class IDPIntent extends Message<IDPIntent> {
  /**
   * @generated from field: string idp_intent_id = 1;
   */
  idpIntentId = "";

  /**
   * @generated from field: string idp_intent_token = 2;
   */
  idpIntentToken = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  constructor(data?: PartialMessage<IDPIntent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.IDPIntent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idp_intent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_intent_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPIntent {
    return new IDPIntent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPIntent {
    return new IDPIntent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPIntent {
    return new IDPIntent().fromJsonString(jsonString, options);
  }

  static equals(a: IDPIntent | PlainMessage<IDPIntent> | undefined, b: IDPIntent | PlainMessage<IDPIntent> | undefined): boolean {
    return proto3.util.equals(IDPIntent, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.IDPInformation
 */
export class IDPInformation extends Message<IDPInformation> {
  /**
   * @generated from oneof zitadel.user.v2beta.IDPInformation.access
   */
  access: {
    /**
     * @generated from field: zitadel.user.v2beta.IDPOAuthAccessInformation oauth = 1;
     */
    value: IDPOAuthAccessInformation;
    case: "oauth";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.IDPLDAPAccessInformation ldap = 6;
     */
    value: IDPLDAPAccessInformation;
    case: "ldap";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.IDPSAMLAccessInformation saml = 7;
     */
    value: IDPSAMLAccessInformation;
    case: "saml";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string idp_id = 2;
   */
  idpId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 4;
   */
  userName = "";

  /**
   * @generated from field: google.protobuf.Struct raw_information = 5;
   */
  rawInformation?: Struct;

  constructor(data?: PartialMessage<IDPInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.IDPInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "oauth", kind: "message", T: IDPOAuthAccessInformation, oneof: "access" },
    { no: 6, name: "ldap", kind: "message", T: IDPLDAPAccessInformation, oneof: "access" },
    { no: 7, name: "saml", kind: "message", T: IDPSAMLAccessInformation, oneof: "access" },
    { no: 2, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "raw_information", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPInformation {
    return new IDPInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPInformation {
    return new IDPInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPInformation {
    return new IDPInformation().fromJsonString(jsonString, options);
  }

  static equals(a: IDPInformation | PlainMessage<IDPInformation> | undefined, b: IDPInformation | PlainMessage<IDPInformation> | undefined): boolean {
    return proto3.util.equals(IDPInformation, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.IDPOAuthAccessInformation
 */
export class IDPOAuthAccessInformation extends Message<IDPOAuthAccessInformation> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: optional string id_token = 2;
   */
  idToken?: string;

  constructor(data?: PartialMessage<IDPOAuthAccessInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.IDPOAuthAccessInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPOAuthAccessInformation {
    return new IDPOAuthAccessInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPOAuthAccessInformation {
    return new IDPOAuthAccessInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPOAuthAccessInformation {
    return new IDPOAuthAccessInformation().fromJsonString(jsonString, options);
  }

  static equals(a: IDPOAuthAccessInformation | PlainMessage<IDPOAuthAccessInformation> | undefined, b: IDPOAuthAccessInformation | PlainMessage<IDPOAuthAccessInformation> | undefined): boolean {
    return proto3.util.equals(IDPOAuthAccessInformation, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.IDPLDAPAccessInformation
 */
export class IDPLDAPAccessInformation extends Message<IDPLDAPAccessInformation> {
  /**
   * @generated from field: google.protobuf.Struct attributes = 1;
   */
  attributes?: Struct;

  constructor(data?: PartialMessage<IDPLDAPAccessInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.IDPLDAPAccessInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPLDAPAccessInformation {
    return new IDPLDAPAccessInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPLDAPAccessInformation {
    return new IDPLDAPAccessInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPLDAPAccessInformation {
    return new IDPLDAPAccessInformation().fromJsonString(jsonString, options);
  }

  static equals(a: IDPLDAPAccessInformation | PlainMessage<IDPLDAPAccessInformation> | undefined, b: IDPLDAPAccessInformation | PlainMessage<IDPLDAPAccessInformation> | undefined): boolean {
    return proto3.util.equals(IDPLDAPAccessInformation, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.IDPSAMLAccessInformation
 */
export class IDPSAMLAccessInformation extends Message<IDPSAMLAccessInformation> {
  /**
   * @generated from field: bytes assertion = 1;
   */
  assertion = new Uint8Array(0);

  constructor(data?: PartialMessage<IDPSAMLAccessInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.IDPSAMLAccessInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assertion", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPSAMLAccessInformation {
    return new IDPSAMLAccessInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPSAMLAccessInformation {
    return new IDPSAMLAccessInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPSAMLAccessInformation {
    return new IDPSAMLAccessInformation().fromJsonString(jsonString, options);
  }

  static equals(a: IDPSAMLAccessInformation | PlainMessage<IDPSAMLAccessInformation> | undefined, b: IDPSAMLAccessInformation | PlainMessage<IDPSAMLAccessInformation> | undefined): boolean {
    return proto3.util.equals(IDPSAMLAccessInformation, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.IDPLink
 */
export class IDPLink extends Message<IDPLink> {
  /**
   * @generated from field: string idp_id = 1;
   */
  idpId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 3;
   */
  userName = "";

  constructor(data?: PartialMessage<IDPLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.IDPLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPLink {
    return new IDPLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPLink {
    return new IDPLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPLink {
    return new IDPLink().fromJsonString(jsonString, options);
  }

  static equals(a: IDPLink | PlainMessage<IDPLink> | undefined, b: IDPLink | PlainMessage<IDPLink> | undefined): boolean {
    return proto3.util.equals(IDPLink, a, b);
  }
}

