// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/session/v2beta/session.proto (package zitadel.session.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { TimestampQueryMethod } from "../../object_pb.js";

/**
 * @generated from enum zitadel.session.v2beta.SessionFieldName
 */
export enum SessionFieldName {
  /**
   * @generated from enum value: SESSION_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SESSION_FIELD_NAME_CREATION_DATE = 1;
   */
  CREATION_DATE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SessionFieldName)
proto3.util.setEnumType(SessionFieldName, "zitadel.session.v2beta.SessionFieldName", [
  { no: 0, name: "SESSION_FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "SESSION_FIELD_NAME_CREATION_DATE" },
]);

/**
 * @generated from message zitadel.session.v2beta.Session
 */
export class Session extends Message<Session> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: Timestamp;

  /**
   * @generated from field: uint64 sequence = 4;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: zitadel.session.v2beta.Factors factors = 5;
   */
  factors?: Factors;

  /**
   * @generated from field: map<string, bytes> metadata = 6;
   */
  metadata: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: zitadel.session.v2beta.UserAgent user_agent = 7;
   */
  userAgent?: UserAgent;

  /**
   * @generated from field: optional google.protobuf.Timestamp expiration_date = 8;
   */
  expirationDate?: Timestamp;

  constructor(data?: PartialMessage<Session>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.Session";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creation_date", kind: "message", T: Timestamp },
    { no: 3, name: "change_date", kind: "message", T: Timestamp },
    { no: 4, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "factors", kind: "message", T: Factors },
    { no: 6, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 7, name: "user_agent", kind: "message", T: UserAgent },
    { no: 8, name: "expiration_date", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session {
    return new Session().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJsonString(jsonString, options);
  }

  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean {
    return proto3.util.equals(Session, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.Factors
 */
export class Factors extends Message<Factors> {
  /**
   * @generated from field: zitadel.session.v2beta.UserFactor user = 1;
   */
  user?: UserFactor;

  /**
   * @generated from field: zitadel.session.v2beta.PasswordFactor password = 2;
   */
  password?: PasswordFactor;

  /**
   * @generated from field: zitadel.session.v2beta.WebAuthNFactor web_auth_n = 3;
   */
  webAuthN?: WebAuthNFactor;

  /**
   * @generated from field: zitadel.session.v2beta.IntentFactor intent = 4;
   */
  intent?: IntentFactor;

  /**
   * @generated from field: zitadel.session.v2beta.TOTPFactor totp = 5;
   */
  totp?: TOTPFactor;

  /**
   * @generated from field: zitadel.session.v2beta.OTPFactor otp_sms = 6;
   */
  otpSms?: OTPFactor;

  /**
   * @generated from field: zitadel.session.v2beta.OTPFactor otp_email = 7;
   */
  otpEmail?: OTPFactor;

  constructor(data?: PartialMessage<Factors>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.Factors";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserFactor },
    { no: 2, name: "password", kind: "message", T: PasswordFactor },
    { no: 3, name: "web_auth_n", kind: "message", T: WebAuthNFactor },
    { no: 4, name: "intent", kind: "message", T: IntentFactor },
    { no: 5, name: "totp", kind: "message", T: TOTPFactor },
    { no: 6, name: "otp_sms", kind: "message", T: OTPFactor },
    { no: 7, name: "otp_email", kind: "message", T: OTPFactor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Factors {
    return new Factors().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Factors {
    return new Factors().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Factors {
    return new Factors().fromJsonString(jsonString, options);
  }

  static equals(a: Factors | PlainMessage<Factors> | undefined, b: Factors | PlainMessage<Factors> | undefined): boolean {
    return proto3.util.equals(Factors, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.UserFactor
 */
export class UserFactor extends Message<UserFactor> {
  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 1;
   */
  verifiedAt?: Timestamp;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string login_name = 3;
   */
  loginName = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string organization_id = 6;
   */
  organizationId = "";

  constructor(data?: PartialMessage<UserFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.UserFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified_at", kind: "message", T: Timestamp },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserFactor {
    return new UserFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserFactor {
    return new UserFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserFactor {
    return new UserFactor().fromJsonString(jsonString, options);
  }

  static equals(a: UserFactor | PlainMessage<UserFactor> | undefined, b: UserFactor | PlainMessage<UserFactor> | undefined): boolean {
    return proto3.util.equals(UserFactor, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.PasswordFactor
 */
export class PasswordFactor extends Message<PasswordFactor> {
  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 1;
   */
  verifiedAt?: Timestamp;

  constructor(data?: PartialMessage<PasswordFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.PasswordFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PasswordFactor {
    return new PasswordFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PasswordFactor {
    return new PasswordFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PasswordFactor {
    return new PasswordFactor().fromJsonString(jsonString, options);
  }

  static equals(a: PasswordFactor | PlainMessage<PasswordFactor> | undefined, b: PasswordFactor | PlainMessage<PasswordFactor> | undefined): boolean {
    return proto3.util.equals(PasswordFactor, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.IntentFactor
 */
export class IntentFactor extends Message<IntentFactor> {
  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 1;
   */
  verifiedAt?: Timestamp;

  constructor(data?: PartialMessage<IntentFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.IntentFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentFactor {
    return new IntentFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentFactor {
    return new IntentFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentFactor {
    return new IntentFactor().fromJsonString(jsonString, options);
  }

  static equals(a: IntentFactor | PlainMessage<IntentFactor> | undefined, b: IntentFactor | PlainMessage<IntentFactor> | undefined): boolean {
    return proto3.util.equals(IntentFactor, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.WebAuthNFactor
 */
export class WebAuthNFactor extends Message<WebAuthNFactor> {
  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 1;
   */
  verifiedAt?: Timestamp;

  /**
   * @generated from field: bool user_verified = 2;
   */
  userVerified = false;

  constructor(data?: PartialMessage<WebAuthNFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.WebAuthNFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified_at", kind: "message", T: Timestamp },
    { no: 2, name: "user_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthNFactor {
    return new WebAuthNFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthNFactor {
    return new WebAuthNFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthNFactor {
    return new WebAuthNFactor().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthNFactor | PlainMessage<WebAuthNFactor> | undefined, b: WebAuthNFactor | PlainMessage<WebAuthNFactor> | undefined): boolean {
    return proto3.util.equals(WebAuthNFactor, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.TOTPFactor
 */
export class TOTPFactor extends Message<TOTPFactor> {
  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 1;
   */
  verifiedAt?: Timestamp;

  constructor(data?: PartialMessage<TOTPFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.TOTPFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TOTPFactor {
    return new TOTPFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TOTPFactor {
    return new TOTPFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TOTPFactor {
    return new TOTPFactor().fromJsonString(jsonString, options);
  }

  static equals(a: TOTPFactor | PlainMessage<TOTPFactor> | undefined, b: TOTPFactor | PlainMessage<TOTPFactor> | undefined): boolean {
    return proto3.util.equals(TOTPFactor, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.OTPFactor
 */
export class OTPFactor extends Message<OTPFactor> {
  /**
   * @generated from field: google.protobuf.Timestamp verified_at = 1;
   */
  verifiedAt?: Timestamp;

  constructor(data?: PartialMessage<OTPFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.OTPFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "verified_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OTPFactor {
    return new OTPFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OTPFactor {
    return new OTPFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OTPFactor {
    return new OTPFactor().fromJsonString(jsonString, options);
  }

  static equals(a: OTPFactor | PlainMessage<OTPFactor> | undefined, b: OTPFactor | PlainMessage<OTPFactor> | undefined): boolean {
    return proto3.util.equals(OTPFactor, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.SearchQuery
 */
export class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.session.v2beta.SearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.session.v2beta.IDsQuery ids_query = 1;
     */
    value: IDsQuery;
    case: "idsQuery";
  } | {
    /**
     * @generated from field: zitadel.session.v2beta.UserIDQuery user_id_query = 2;
     */
    value: UserIDQuery;
    case: "userIdQuery";
  } | {
    /**
     * @generated from field: zitadel.session.v2beta.CreationDateQuery creation_date_query = 3;
     */
    value: CreationDateQuery;
    case: "creationDateQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.SearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids_query", kind: "message", T: IDsQuery, oneof: "query" },
    { no: 2, name: "user_id_query", kind: "message", T: UserIDQuery, oneof: "query" },
    { no: 3, name: "creation_date_query", kind: "message", T: CreationDateQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery {
    return new SearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean {
    return proto3.util.equals(SearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.IDsQuery
 */
export class IDsQuery extends Message<IDsQuery> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<IDsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.IDsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDsQuery {
    return new IDsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDsQuery {
    return new IDsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDsQuery {
    return new IDsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: IDsQuery | PlainMessage<IDsQuery> | undefined, b: IDsQuery | PlainMessage<IDsQuery> | undefined): boolean {
    return proto3.util.equals(IDsQuery, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.UserIDQuery
 */
export class UserIDQuery extends Message<UserIDQuery> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UserIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.UserIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserIDQuery {
    return new UserIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserIDQuery {
    return new UserIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserIDQuery {
    return new UserIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserIDQuery | PlainMessage<UserIDQuery> | undefined, b: UserIDQuery | PlainMessage<UserIDQuery> | undefined): boolean {
    return proto3.util.equals(UserIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.CreationDateQuery
 */
export class CreationDateQuery extends Message<CreationDateQuery> {
  /**
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: Timestamp;

  /**
   * @generated from field: zitadel.v1.TimestampQueryMethod method = 2;
   */
  method = TimestampQueryMethod.EQUALS;

  constructor(data?: PartialMessage<CreationDateQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.CreationDateQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creation_date", kind: "message", T: Timestamp },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TimestampQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreationDateQuery {
    return new CreationDateQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreationDateQuery {
    return new CreationDateQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreationDateQuery {
    return new CreationDateQuery().fromJsonString(jsonString, options);
  }

  static equals(a: CreationDateQuery | PlainMessage<CreationDateQuery> | undefined, b: CreationDateQuery | PlainMessage<CreationDateQuery> | undefined): boolean {
    return proto3.util.equals(CreationDateQuery, a, b);
  }
}

/**
 * @generated from message zitadel.session.v2beta.UserAgent
 */
export class UserAgent extends Message<UserAgent> {
  /**
   * @generated from field: optional string fingerprint_id = 1;
   */
  fingerprintId?: string;

  /**
   * @generated from field: optional string ip = 2;
   */
  ip?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: map<string, zitadel.session.v2beta.UserAgent.HeaderValues> header = 4;
   */
  header: { [key: string]: UserAgent_HeaderValues } = {};

  constructor(data?: PartialMessage<UserAgent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.UserAgent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fingerprint_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "header", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: UserAgent_HeaderValues} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAgent {
    return new UserAgent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAgent {
    return new UserAgent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAgent {
    return new UserAgent().fromJsonString(jsonString, options);
  }

  static equals(a: UserAgent | PlainMessage<UserAgent> | undefined, b: UserAgent | PlainMessage<UserAgent> | undefined): boolean {
    return proto3.util.equals(UserAgent, a, b);
  }
}

/**
 * A header may have multiple values.
 * In Go, headers are defined
 * as map[string][]string, but protobuf
 * doesn't allow this scheme.
 *
 * @generated from message zitadel.session.v2beta.UserAgent.HeaderValues
 */
export class UserAgent_HeaderValues extends Message<UserAgent_HeaderValues> {
  /**
   * @generated from field: repeated string values = 1;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<UserAgent_HeaderValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.session.v2beta.UserAgent.HeaderValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAgent_HeaderValues {
    return new UserAgent_HeaderValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAgent_HeaderValues {
    return new UserAgent_HeaderValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAgent_HeaderValues {
    return new UserAgent_HeaderValues().fromJsonString(jsonString, options);
  }

  static equals(a: UserAgent_HeaderValues | PlainMessage<UserAgent_HeaderValues> | undefined, b: UserAgent_HeaderValues | PlainMessage<UserAgent_HeaderValues> | undefined): boolean {
    return proto3.util.equals(UserAgent_HeaderValues, a, b);
  }
}

