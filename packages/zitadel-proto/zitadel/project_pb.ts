// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/project.proto (package zitadel.project.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";

/**
 * @generated from enum zitadel.project.v1.ProjectState
 */
export enum ProjectState {
  /**
   * @generated from enum value: PROJECT_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROJECT_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: PROJECT_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ProjectState)
proto3.util.setEnumType(ProjectState, "zitadel.project.v1.ProjectState", [
  { no: 0, name: "PROJECT_STATE_UNSPECIFIED" },
  { no: 1, name: "PROJECT_STATE_ACTIVE" },
  { no: 2, name: "PROJECT_STATE_INACTIVE" },
]);

/**
 * @generated from enum zitadel.project.v1.PrivateLabelingSetting
 */
export enum PrivateLabelingSetting {
  /**
   * @generated from enum value: PRIVATE_LABELING_SETTING_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY = 1;
   */
  ENFORCE_PROJECT_RESOURCE_OWNER_POLICY = 1,

  /**
   * @generated from enum value: PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY = 2;
   */
  ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PrivateLabelingSetting)
proto3.util.setEnumType(PrivateLabelingSetting, "zitadel.project.v1.PrivateLabelingSetting", [
  { no: 0, name: "PRIVATE_LABELING_SETTING_UNSPECIFIED" },
  { no: 1, name: "PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY" },
  { no: 2, name: "PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY" },
]);

/**
 * @generated from enum zitadel.project.v1.ProjectGrantState
 */
export enum ProjectGrantState {
  /**
   * @generated from enum value: PROJECT_GRANT_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROJECT_GRANT_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: PROJECT_GRANT_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ProjectGrantState)
proto3.util.setEnumType(ProjectGrantState, "zitadel.project.v1.ProjectGrantState", [
  { no: 0, name: "PROJECT_GRANT_STATE_UNSPECIFIED" },
  { no: 1, name: "PROJECT_GRANT_STATE_ACTIVE" },
  { no: 2, name: "PROJECT_GRANT_STATE_INACTIVE" },
]);

/**
 * @generated from message zitadel.project.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: zitadel.project.v1.ProjectState state = 4;
   */
  state = ProjectState.UNSPECIFIED;

  /**
   * describes if the roles of the user should be added to the token
   *
   * @generated from field: bool project_role_assertion = 5;
   */
  projectRoleAssertion = false;

  /**
   * ZITADEL checks if the user has at least one on this project
   *
   * @generated from field: bool project_role_check = 6;
   */
  projectRoleCheck = false;

  /**
   * ZITADEL checks if the org of the user has permission for this project
   *
   * @generated from field: bool has_project_check = 7;
   */
  hasProjectCheck = false;

  /**
   * Defines from where the private labeling should be triggered
   *
   * @generated from field: zitadel.project.v1.PrivateLabelingSetting private_labeling_setting = 8;
   */
  privateLabelingSetting = PrivateLabelingSetting.UNSPECIFIED;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(ProjectState) },
    { no: 5, name: "project_role_assertion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "project_role_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "has_project_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "private_labeling_setting", kind: "enum", T: proto3.getEnumType(PrivateLabelingSetting) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.GrantedProject
 */
export class GrantedProject extends Message<GrantedProject> {
  /**
   * @generated from field: string grant_id = 1;
   */
  grantId = "";

  /**
   * @generated from field: string granted_org_id = 2;
   */
  grantedOrgId = "";

  /**
   * @generated from field: string granted_org_name = 3;
   */
  grantedOrgName = "";

  /**
   * @generated from field: repeated string granted_role_keys = 4;
   */
  grantedRoleKeys: string[] = [];

  /**
   * @generated from field: zitadel.project.v1.ProjectGrantState state = 5;
   */
  state = ProjectGrantState.UNSPECIFIED;

  /**
   * @generated from field: string project_id = 6;
   */
  projectId = "";

  /**
   * @generated from field: string project_name = 7;
   */
  projectName = "";

  /**
   * @generated from field: string project_owner_id = 8;
   */
  projectOwnerId = "";

  /**
   * @generated from field: string project_owner_name = 9;
   */
  projectOwnerName = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 10;
   */
  details?: ObjectDetails;

  constructor(data?: PartialMessage<GrantedProject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.GrantedProject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "granted_org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "granted_org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "granted_role_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "state", kind: "enum", T: proto3.getEnumType(ProjectGrantState) },
    { no: 6, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "project_owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "project_owner_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "details", kind: "message", T: ObjectDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrantedProject {
    return new GrantedProject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrantedProject {
    return new GrantedProject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrantedProject {
    return new GrantedProject().fromJsonString(jsonString, options);
  }

  static equals(a: GrantedProject | PlainMessage<GrantedProject> | undefined, b: GrantedProject | PlainMessage<GrantedProject> | undefined): boolean {
    return proto3.util.equals(GrantedProject, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.ProjectQuery
 */
export class ProjectQuery extends Message<ProjectQuery> {
  /**
   * @generated from oneof zitadel.project.v1.ProjectQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.project.v1.ProjectNameQuery name_query = 1;
     */
    value: ProjectNameQuery;
    case: "nameQuery";
  } | {
    /**
     * @generated from field: zitadel.project.v1.ProjectResourceOwnerQuery project_resource_owner_query = 2;
     */
    value: ProjectResourceOwnerQuery;
    case: "projectResourceOwnerQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProjectQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.ProjectQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_query", kind: "message", T: ProjectNameQuery, oneof: "query" },
    { no: 2, name: "project_resource_owner_query", kind: "message", T: ProjectResourceOwnerQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectQuery {
    return new ProjectQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectQuery {
    return new ProjectQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectQuery {
    return new ProjectQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectQuery | PlainMessage<ProjectQuery> | undefined, b: ProjectQuery | PlainMessage<ProjectQuery> | undefined): boolean {
    return proto3.util.equals(ProjectQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.ProjectNameQuery
 */
export class ProjectNameQuery extends Message<ProjectNameQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<ProjectNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.ProjectNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectNameQuery {
    return new ProjectNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectNameQuery {
    return new ProjectNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectNameQuery {
    return new ProjectNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectNameQuery | PlainMessage<ProjectNameQuery> | undefined, b: ProjectNameQuery | PlainMessage<ProjectNameQuery> | undefined): boolean {
    return proto3.util.equals(ProjectNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.ProjectResourceOwnerQuery
 */
export class ProjectResourceOwnerQuery extends Message<ProjectResourceOwnerQuery> {
  /**
   * @generated from field: string resource_owner = 1;
   */
  resourceOwner = "";

  constructor(data?: PartialMessage<ProjectResourceOwnerQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.ProjectResourceOwnerQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectResourceOwnerQuery {
    return new ProjectResourceOwnerQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectResourceOwnerQuery {
    return new ProjectResourceOwnerQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectResourceOwnerQuery {
    return new ProjectResourceOwnerQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectResourceOwnerQuery | PlainMessage<ProjectResourceOwnerQuery> | undefined, b: ProjectResourceOwnerQuery | PlainMessage<ProjectResourceOwnerQuery> | undefined): boolean {
    return proto3.util.equals(ProjectResourceOwnerQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.Role
 */
export class Role extends Message<Role> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: string group = 4;
   */
  group = "";

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.RoleQuery
 */
export class RoleQuery extends Message<RoleQuery> {
  /**
   * @generated from oneof zitadel.project.v1.RoleQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.project.v1.RoleKeyQuery key_query = 1;
     */
    value: RoleKeyQuery;
    case: "keyQuery";
  } | {
    /**
     * @generated from field: zitadel.project.v1.RoleDisplayNameQuery display_name_query = 2;
     */
    value: RoleDisplayNameQuery;
    case: "displayNameQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RoleQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.RoleQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_query", kind: "message", T: RoleKeyQuery, oneof: "query" },
    { no: 2, name: "display_name_query", kind: "message", T: RoleDisplayNameQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleQuery {
    return new RoleQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleQuery {
    return new RoleQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleQuery {
    return new RoleQuery().fromJsonString(jsonString, options);
  }

  static equals(a: RoleQuery | PlainMessage<RoleQuery> | undefined, b: RoleQuery | PlainMessage<RoleQuery> | undefined): boolean {
    return proto3.util.equals(RoleQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.RoleKeyQuery
 */
export class RoleKeyQuery extends Message<RoleKeyQuery> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<RoleKeyQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.RoleKeyQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleKeyQuery {
    return new RoleKeyQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleKeyQuery {
    return new RoleKeyQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleKeyQuery {
    return new RoleKeyQuery().fromJsonString(jsonString, options);
  }

  static equals(a: RoleKeyQuery | PlainMessage<RoleKeyQuery> | undefined, b: RoleKeyQuery | PlainMessage<RoleKeyQuery> | undefined): boolean {
    return proto3.util.equals(RoleKeyQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.RoleDisplayNameQuery
 */
export class RoleDisplayNameQuery extends Message<RoleDisplayNameQuery> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<RoleDisplayNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.RoleDisplayNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleDisplayNameQuery {
    return new RoleDisplayNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleDisplayNameQuery {
    return new RoleDisplayNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleDisplayNameQuery {
    return new RoleDisplayNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: RoleDisplayNameQuery | PlainMessage<RoleDisplayNameQuery> | undefined, b: RoleDisplayNameQuery | PlainMessage<RoleDisplayNameQuery> | undefined): boolean {
    return proto3.util.equals(RoleDisplayNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.ProjectGrantQuery
 */
export class ProjectGrantQuery extends Message<ProjectGrantQuery> {
  /**
   * @generated from oneof zitadel.project.v1.ProjectGrantQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.project.v1.GrantProjectNameQuery project_name_query = 1;
     */
    value: GrantProjectNameQuery;
    case: "projectNameQuery";
  } | {
    /**
     * @generated from field: zitadel.project.v1.GrantRoleKeyQuery role_key_query = 2;
     */
    value: GrantRoleKeyQuery;
    case: "roleKeyQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProjectGrantQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.ProjectGrantQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_name_query", kind: "message", T: GrantProjectNameQuery, oneof: "query" },
    { no: 2, name: "role_key_query", kind: "message", T: GrantRoleKeyQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectGrantQuery {
    return new ProjectGrantQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectGrantQuery {
    return new ProjectGrantQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectGrantQuery {
    return new ProjectGrantQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectGrantQuery | PlainMessage<ProjectGrantQuery> | undefined, b: ProjectGrantQuery | PlainMessage<ProjectGrantQuery> | undefined): boolean {
    return proto3.util.equals(ProjectGrantQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.AllProjectGrantQuery
 */
export class AllProjectGrantQuery extends Message<AllProjectGrantQuery> {
  /**
   * @generated from oneof zitadel.project.v1.AllProjectGrantQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.project.v1.GrantProjectNameQuery project_name_query = 1;
     */
    value: GrantProjectNameQuery;
    case: "projectNameQuery";
  } | {
    /**
     * @generated from field: zitadel.project.v1.GrantRoleKeyQuery role_key_query = 2;
     */
    value: GrantRoleKeyQuery;
    case: "roleKeyQuery";
  } | {
    /**
     * @generated from field: zitadel.project.v1.ProjectIDQuery project_id_query = 3;
     */
    value: ProjectIDQuery;
    case: "projectIdQuery";
  } | {
    /**
     * @generated from field: zitadel.project.v1.GrantedOrgIDQuery granted_org_id_query = 4;
     */
    value: GrantedOrgIDQuery;
    case: "grantedOrgIdQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AllProjectGrantQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.AllProjectGrantQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_name_query", kind: "message", T: GrantProjectNameQuery, oneof: "query" },
    { no: 2, name: "role_key_query", kind: "message", T: GrantRoleKeyQuery, oneof: "query" },
    { no: 3, name: "project_id_query", kind: "message", T: ProjectIDQuery, oneof: "query" },
    { no: 4, name: "granted_org_id_query", kind: "message", T: GrantedOrgIDQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllProjectGrantQuery {
    return new AllProjectGrantQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllProjectGrantQuery {
    return new AllProjectGrantQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllProjectGrantQuery {
    return new AllProjectGrantQuery().fromJsonString(jsonString, options);
  }

  static equals(a: AllProjectGrantQuery | PlainMessage<AllProjectGrantQuery> | undefined, b: AllProjectGrantQuery | PlainMessage<AllProjectGrantQuery> | undefined): boolean {
    return proto3.util.equals(AllProjectGrantQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.GrantProjectNameQuery
 */
export class GrantProjectNameQuery extends Message<GrantProjectNameQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<GrantProjectNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.GrantProjectNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrantProjectNameQuery {
    return new GrantProjectNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrantProjectNameQuery {
    return new GrantProjectNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrantProjectNameQuery {
    return new GrantProjectNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GrantProjectNameQuery | PlainMessage<GrantProjectNameQuery> | undefined, b: GrantProjectNameQuery | PlainMessage<GrantProjectNameQuery> | undefined): boolean {
    return proto3.util.equals(GrantProjectNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.GrantRoleKeyQuery
 */
export class GrantRoleKeyQuery extends Message<GrantRoleKeyQuery> {
  /**
   * @generated from field: string role_key = 1;
   */
  roleKey = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<GrantRoleKeyQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.GrantRoleKeyQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrantRoleKeyQuery {
    return new GrantRoleKeyQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrantRoleKeyQuery {
    return new GrantRoleKeyQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrantRoleKeyQuery {
    return new GrantRoleKeyQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GrantRoleKeyQuery | PlainMessage<GrantRoleKeyQuery> | undefined, b: GrantRoleKeyQuery | PlainMessage<GrantRoleKeyQuery> | undefined): boolean {
    return proto3.util.equals(GrantRoleKeyQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.ProjectIDQuery
 */
export class ProjectIDQuery extends Message<ProjectIDQuery> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<ProjectIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.ProjectIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectIDQuery {
    return new ProjectIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectIDQuery {
    return new ProjectIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectIDQuery {
    return new ProjectIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectIDQuery | PlainMessage<ProjectIDQuery> | undefined, b: ProjectIDQuery | PlainMessage<ProjectIDQuery> | undefined): boolean {
    return proto3.util.equals(ProjectIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.project.v1.GrantedOrgIDQuery
 */
export class GrantedOrgIDQuery extends Message<GrantedOrgIDQuery> {
  /**
   * @generated from field: string granted_org_id = 1;
   */
  grantedOrgId = "";

  constructor(data?: PartialMessage<GrantedOrgIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.project.v1.GrantedOrgIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "granted_org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrantedOrgIDQuery {
    return new GrantedOrgIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrantedOrgIDQuery {
    return new GrantedOrgIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrantedOrgIDQuery {
    return new GrantedOrgIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GrantedOrgIDQuery | PlainMessage<GrantedOrgIDQuery> | undefined, b: GrantedOrgIDQuery | PlainMessage<GrantedOrgIDQuery> | undefined): boolean {
    return proto3.util.equals(GrantedOrgIDQuery, a, b);
  }
}

