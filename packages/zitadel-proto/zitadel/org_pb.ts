// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/org.proto (package zitadel.org.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";

/**
 * @generated from enum zitadel.org.v1.OrgState
 */
export enum OrgState {
  /**
   * @generated from enum value: ORG_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORG_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: ORG_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * @generated from enum value: ORG_STATE_REMOVED = 3;
   */
  REMOVED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(OrgState)
proto3.util.setEnumType(OrgState, "zitadel.org.v1.OrgState", [
  { no: 0, name: "ORG_STATE_UNSPECIFIED" },
  { no: 1, name: "ORG_STATE_ACTIVE" },
  { no: 2, name: "ORG_STATE_INACTIVE" },
  { no: 3, name: "ORG_STATE_REMOVED" },
]);

/**
 * @generated from enum zitadel.org.v1.DomainValidationType
 */
export enum DomainValidationType {
  /**
   * @generated from enum value: DOMAIN_VALIDATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DOMAIN_VALIDATION_TYPE_HTTP = 1;
   */
  HTTP = 1,

  /**
   * @generated from enum value: DOMAIN_VALIDATION_TYPE_DNS = 2;
   */
  DNS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DomainValidationType)
proto3.util.setEnumType(DomainValidationType, "zitadel.org.v1.DomainValidationType", [
  { no: 0, name: "DOMAIN_VALIDATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "DOMAIN_VALIDATION_TYPE_HTTP" },
  { no: 2, name: "DOMAIN_VALIDATION_TYPE_DNS" },
]);

/**
 * @generated from enum zitadel.org.v1.OrgFieldName
 */
export enum OrgFieldName {
  /**
   * @generated from enum value: ORG_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORG_FIELD_NAME_NAME = 1;
   */
  NAME = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(OrgFieldName)
proto3.util.setEnumType(OrgFieldName, "zitadel.org.v1.OrgFieldName", [
  { no: 0, name: "ORG_FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "ORG_FIELD_NAME_NAME" },
]);

/**
 * @generated from message zitadel.org.v1.Org
 */
export class Org extends Message<Org> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.org.v1.OrgState state = 3;
   */
  state = OrgState.UNSPECIFIED;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string primary_domain = 5;
   */
  primaryDomain = "";

  constructor(data?: PartialMessage<Org>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.Org";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(OrgState) },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "primary_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Org {
    return new Org().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Org {
    return new Org().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Org {
    return new Org().fromJsonString(jsonString, options);
  }

  static equals(a: Org | PlainMessage<Org> | undefined, b: Org | PlainMessage<Org> | undefined): boolean {
    return proto3.util.equals(Org, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.Domain
 */
export class Domain extends Message<Domain> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string domain_name = 3;
   */
  domainName = "";

  /**
   * @generated from field: bool is_verified = 4;
   */
  isVerified = false;

  /**
   * @generated from field: bool is_primary = 5;
   */
  isPrimary = false;

  /**
   * @generated from field: zitadel.org.v1.DomainValidationType validation_type = 6;
   */
  validationType = DomainValidationType.UNSPECIFIED;

  constructor(data?: PartialMessage<Domain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.Domain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "domain_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "is_primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "validation_type", kind: "enum", T: proto3.getEnumType(DomainValidationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Domain {
    return new Domain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Domain {
    return new Domain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Domain {
    return new Domain().fromJsonString(jsonString, options);
  }

  static equals(a: Domain | PlainMessage<Domain> | undefined, b: Domain | PlainMessage<Domain> | undefined): boolean {
    return proto3.util.equals(Domain, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.OrgQuery
 */
export class OrgQuery extends Message<OrgQuery> {
  /**
   * @generated from oneof zitadel.org.v1.OrgQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.org.v1.OrgNameQuery name_query = 1;
     */
    value: OrgNameQuery;
    case: "nameQuery";
  } | {
    /**
     * @generated from field: zitadel.org.v1.OrgDomainQuery domain_query = 2;
     */
    value: OrgDomainQuery;
    case: "domainQuery";
  } | {
    /**
     * @generated from field: zitadel.org.v1.OrgStateQuery state_query = 3;
     */
    value: OrgStateQuery;
    case: "stateQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OrgQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.OrgQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_query", kind: "message", T: OrgNameQuery, oneof: "query" },
    { no: 2, name: "domain_query", kind: "message", T: OrgDomainQuery, oneof: "query" },
    { no: 3, name: "state_query", kind: "message", T: OrgStateQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgQuery {
    return new OrgQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgQuery {
    return new OrgQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgQuery {
    return new OrgQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrgQuery | PlainMessage<OrgQuery> | undefined, b: OrgQuery | PlainMessage<OrgQuery> | undefined): boolean {
    return proto3.util.equals(OrgQuery, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.OrgNameQuery
 */
export class OrgNameQuery extends Message<OrgNameQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<OrgNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.OrgNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgNameQuery {
    return new OrgNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgNameQuery {
    return new OrgNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgNameQuery {
    return new OrgNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrgNameQuery | PlainMessage<OrgNameQuery> | undefined, b: OrgNameQuery | PlainMessage<OrgNameQuery> | undefined): boolean {
    return proto3.util.equals(OrgNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.OrgDomainQuery
 */
export class OrgDomainQuery extends Message<OrgDomainQuery> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<OrgDomainQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.OrgDomainQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgDomainQuery {
    return new OrgDomainQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgDomainQuery {
    return new OrgDomainQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgDomainQuery {
    return new OrgDomainQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrgDomainQuery | PlainMessage<OrgDomainQuery> | undefined, b: OrgDomainQuery | PlainMessage<OrgDomainQuery> | undefined): boolean {
    return proto3.util.equals(OrgDomainQuery, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.OrgStateQuery
 */
export class OrgStateQuery extends Message<OrgStateQuery> {
  /**
   * @generated from field: zitadel.org.v1.OrgState state = 1;
   */
  state = OrgState.UNSPECIFIED;

  constructor(data?: PartialMessage<OrgStateQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.OrgStateQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(OrgState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgStateQuery {
    return new OrgStateQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgStateQuery {
    return new OrgStateQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgStateQuery {
    return new OrgStateQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrgStateQuery | PlainMessage<OrgStateQuery> | undefined, b: OrgStateQuery | PlainMessage<OrgStateQuery> | undefined): boolean {
    return proto3.util.equals(OrgStateQuery, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.DomainSearchQuery
 */
export class DomainSearchQuery extends Message<DomainSearchQuery> {
  /**
   * @generated from oneof zitadel.org.v1.DomainSearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.org.v1.DomainNameQuery domain_name_query = 1;
     */
    value: DomainNameQuery;
    case: "domainNameQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DomainSearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.DomainSearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain_name_query", kind: "message", T: DomainNameQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainSearchQuery {
    return new DomainSearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainSearchQuery {
    return new DomainSearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainSearchQuery {
    return new DomainSearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainSearchQuery | PlainMessage<DomainSearchQuery> | undefined, b: DomainSearchQuery | PlainMessage<DomainSearchQuery> | undefined): boolean {
    return proto3.util.equals(DomainSearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.org.v1.DomainNameQuery
 */
export class DomainNameQuery extends Message<DomainNameQuery> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<DomainNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.org.v1.DomainNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainNameQuery {
    return new DomainNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainNameQuery {
    return new DomainNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainNameQuery {
    return new DomainNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DomainNameQuery | PlainMessage<DomainNameQuery> | undefined, b: DomainNameQuery | PlainMessage<DomainNameQuery> | undefined): boolean {
    return proto3.util.equals(DomainNameQuery, a, b);
  }
}

