// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/change.proto (package zitadel.change.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { LocalizedMessage } from "./message_pb.js";

/**
 * @generated from message zitadel.change.v1.Change
 */
export class Change extends Message<Change> {
  /**
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;

  /**
   * @generated from field: zitadel.v1.LocalizedMessage event_type = 2;
   */
  eventType?: LocalizedMessage;

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: string editor_id = 4;
   */
  editorId = "";

  /**
   * @generated from field: string editor_display_name = 5;
   */
  editorDisplayName = "";

  /**
   * @generated from field: string resource_owner_id = 6;
   */
  resourceOwnerId = "";

  /**
   * @generated from field: string editor_preferred_login_name = 7;
   */
  editorPreferredLoginName = "";

  /**
   * @generated from field: string editor_avatar_url = 8;
   */
  editorAvatarUrl = "";

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.change.v1.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change_date", kind: "message", T: Timestamp },
    { no: 2, name: "event_type", kind: "message", T: LocalizedMessage },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "editor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "editor_display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "resource_owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "editor_preferred_login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "editor_avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * @generated from message zitadel.change.v1.ChangeQuery
 */
export class ChangeQuery extends Message<ChangeQuery> {
  /**
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: bool asc = 3;
   */
  asc = false;

  constructor(data?: PartialMessage<ChangeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.change.v1.ChangeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "asc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeQuery {
    return new ChangeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeQuery {
    return new ChangeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeQuery {
    return new ChangeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeQuery | PlainMessage<ChangeQuery> | undefined, b: ChangeQuery | PlainMessage<ChangeQuery> | undefined): boolean {
    return proto3.util.equals(ChangeQuery, a, b);
  }
}

