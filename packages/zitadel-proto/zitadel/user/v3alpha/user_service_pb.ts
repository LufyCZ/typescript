// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/v3alpha/user_service.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Details, ListDetails, ListQuery, Organization } from "../../object/v2beta/object_pb.js";
import { FieldName, SearchQuery } from "./query_pb.js";
import { User } from "./user_pb.js";
import { AuthenticatorRegistrationCode, IdentityProviderIntent, IDPAuthenticator, IDPInformation, LDAPCredentials, RedirectURLs, ReturnPasswordResetCode, ReturnWebAuthNRegistrationCode, SendPasswordResetEmail, SendPasswordResetSMS, SendWebAuthNRegistrationLink, SetAuthenticators, SetPassword, SetUsername, WebAuthNAuthenticatorType } from "./authenticator_pb.js";
import { ReturnEmailVerificationCode, ReturnPhoneVerificationCode, SendEmailVerificationCode, SendPhoneVerificationCode, SetContact, SetEmail, SetPhone } from "./communication_pb.js";

/**
 * @generated from message zitadel.user.v3alpha.ListUsersRequest
 */
export class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * list limitations and ordering.
   *
   * @generated from field: zitadel.object.v2beta.ListQuery query = 1;
   */
  query?: ListQuery;

  /**
   * the field the result is sorted.
   *
   * @generated from field: zitadel.user.v3alpha.FieldName sorting_column = 2;
   */
  sortingColumn = FieldName.UNSPECIFIED;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.user.v3alpha.SearchQuery queries = 3;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<ListUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ListUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ListQuery },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(FieldName) },
    { no: 3, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined, b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ListUsersResponse
 */
export class ListUsersResponse extends Message<ListUsersResponse> {
  /**
   * Details provides information about the returned result including total amount found.
   *
   * @generated from field: zitadel.object.v2beta.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * States by which field the results are sorted.
   *
   * @generated from field: zitadel.user.v3alpha.FieldName sorting_column = 2;
   */
  sortingColumn = FieldName.UNSPECIFIED;

  /**
   * The result contains the user schemas, which matched the queries.
   *
   * @generated from field: repeated zitadel.user.v3alpha.User result = 3;
   */
  result: User[] = [];

  constructor(data?: PartialMessage<ListUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ListUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: ListDetails },
    { no: 2, name: "sorting_column", kind: "enum", T: proto3.getEnumType(FieldName) },
    { no: 3, name: "result", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined, b: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListUsersResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.GetUserByIDRequest
 */
export class GetUserByIDRequest extends Message<GetUserByIDRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.GetUserByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByIDRequest {
    return new GetUserByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByIDRequest {
    return new GetUserByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByIDRequest {
    return new GetUserByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByIDRequest | PlainMessage<GetUserByIDRequest> | undefined, b: GetUserByIDRequest | PlainMessage<GetUserByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetUserByIDRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.GetUserByIDResponse
 */
export class GetUserByIDResponse extends Message<GetUserByIDResponse> {
  /**
   * @generated from field: zitadel.user.v3alpha.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.GetUserByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByIDResponse {
    return new GetUserByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByIDResponse {
    return new GetUserByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByIDResponse {
    return new GetUserByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByIDResponse | PlainMessage<GetUserByIDResponse> | undefined, b: GetUserByIDResponse | PlainMessage<GetUserByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetUserByIDResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * Optionally set a unique identifier of the user. If unset, ZITADEL will take care of it.
   *
   * @generated from field: optional string user_id = 1;
   */
  userId?: string;

  /**
   * Set the organization the user belongs to.
   *
   * @generated from field: zitadel.object.v2beta.Organization organization = 2;
   */
  organization?: Organization;

  /**
   * Set the initial authenticators of the user.
   *
   * @generated from field: zitadel.user.v3alpha.SetAuthenticators authenticators = 3;
   */
  authenticators?: SetAuthenticators;

  /**
   * Set the contact information (email, phone) for the user.
   *
   * @generated from field: zitadel.user.v3alpha.SetContact contact = 4;
   */
  contact?: SetContact;

  /**
   * Define the schema the user's data schema by providing it's ID.
   *
   * @generated from field: string schema_id = 5;
   */
  schemaId = "";

  /**
   * Provide data about the user. It will be validated based on the specified schema.
   *
   * @generated from field: google.protobuf.Struct data = 6;
   */
  data?: Struct;

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "organization", kind: "message", T: Organization },
    { no: 3, name: "authenticators", kind: "message", T: SetAuthenticators },
    { no: 4, name: "contact", kind: "message", T: SetContact },
    { no: 5, name: "schema_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  /**
   * The email code will be set if a contact email was set with a return_code verification option.
   *
   * @generated from field: optional string email_code = 3;
   */
  emailCode?: string;

  /**
   * The phone code will be set if a contact phone was set with a return_code verification option.
   *
   * @generated from field: optional string phone_code = 4;
   */
  phoneCode?: string;

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: Details },
    { no: 3, name: "email_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "phone_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   *  unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Add or update the contact information (email, phone) for the user if needed.
   *
   * @generated from field: optional zitadel.user.v3alpha.SetContact contact = 4;
   */
  contact?: SetContact;

  /**
   * Change the schema the user's data schema by providing it's ID if needed.
   *
   * @generated from field: optional string schema_id = 5;
   */
  schemaId?: string;

  /**
   * Update the user data if needed. It will be validated based on the specified schema.
   *
   * @generated from field: optional google.protobuf.Struct data = 6;
   */
  data?: Struct;

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contact", kind: "message", T: SetContact, opt: true },
    { no: 5, name: "schema_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "data", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * The email code will be set if a contact email was set with a return_code verification option.
   *
   * @generated from field: optional string email_code = 3;
   */
  emailCode?: string;

  /**
   * The phone code will be set if a contact phone was set with a return_code verification option.
   *
   * @generated from field: optional string phone_code = 4;
   */
  phoneCode?: string;

  constructor(data?: PartialMessage<UpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.UpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 3, name: "email_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "phone_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined, b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.DeactivateUserRequest
 */
export class DeactivateUserRequest extends Message<DeactivateUserRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<DeactivateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.DeactivateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateUserRequest {
    return new DeactivateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateUserRequest {
    return new DeactivateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateUserRequest {
    return new DeactivateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateUserRequest | PlainMessage<DeactivateUserRequest> | undefined, b: DeactivateUserRequest | PlainMessage<DeactivateUserRequest> | undefined): boolean {
    return proto3.util.equals(DeactivateUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.DeactivateUserResponse
 */
export class DeactivateUserResponse extends Message<DeactivateUserResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeactivateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.DeactivateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateUserResponse {
    return new DeactivateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateUserResponse {
    return new DeactivateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateUserResponse {
    return new DeactivateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateUserResponse | PlainMessage<DeactivateUserResponse> | undefined, b: DeactivateUserResponse | PlainMessage<DeactivateUserResponse> | undefined): boolean {
    return proto3.util.equals(DeactivateUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ReactivateUserRequest
 */
export class ReactivateUserRequest extends Message<ReactivateUserRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<ReactivateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ReactivateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactivateUserRequest {
    return new ReactivateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactivateUserRequest {
    return new ReactivateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactivateUserRequest {
    return new ReactivateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReactivateUserRequest | PlainMessage<ReactivateUserRequest> | undefined, b: ReactivateUserRequest | PlainMessage<ReactivateUserRequest> | undefined): boolean {
    return proto3.util.equals(ReactivateUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ReactivateUserResponse
 */
export class ReactivateUserResponse extends Message<ReactivateUserResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<ReactivateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ReactivateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactivateUserResponse {
    return new ReactivateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactivateUserResponse {
    return new ReactivateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactivateUserResponse {
    return new ReactivateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReactivateUserResponse | PlainMessage<ReactivateUserResponse> | undefined, b: ReactivateUserResponse | PlainMessage<ReactivateUserResponse> | undefined): boolean {
    return proto3.util.equals(ReactivateUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.LockUserRequest
 */
export class LockUserRequest extends Message<LockUserRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<LockUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.LockUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockUserRequest {
    return new LockUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockUserRequest {
    return new LockUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockUserRequest {
    return new LockUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockUserRequest | PlainMessage<LockUserRequest> | undefined, b: LockUserRequest | PlainMessage<LockUserRequest> | undefined): boolean {
    return proto3.util.equals(LockUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.LockUserResponse
 */
export class LockUserResponse extends Message<LockUserResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<LockUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.LockUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockUserResponse {
    return new LockUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockUserResponse {
    return new LockUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockUserResponse {
    return new LockUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LockUserResponse | PlainMessage<LockUserResponse> | undefined, b: LockUserResponse | PlainMessage<LockUserResponse> | undefined): boolean {
    return proto3.util.equals(LockUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.UnlockUserRequest
 */
export class UnlockUserRequest extends Message<UnlockUserRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<UnlockUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.UnlockUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnlockUserRequest {
    return new UnlockUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnlockUserRequest {
    return new UnlockUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnlockUserRequest {
    return new UnlockUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnlockUserRequest | PlainMessage<UnlockUserRequest> | undefined, b: UnlockUserRequest | PlainMessage<UnlockUserRequest> | undefined): boolean {
    return proto3.util.equals(UnlockUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.UnlockUserResponse
 */
export class UnlockUserResponse extends Message<UnlockUserResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<UnlockUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.UnlockUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnlockUserResponse {
    return new UnlockUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnlockUserResponse {
    return new UnlockUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnlockUserResponse {
    return new UnlockUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnlockUserResponse | PlainMessage<UnlockUserResponse> | undefined, b: UnlockUserResponse | PlainMessage<UnlockUserResponse> | undefined): boolean {
    return proto3.util.equals(UnlockUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.DeleteUserRequest
 */
export class DeleteUserRequest extends Message<DeleteUserRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<DeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.DeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined, b: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.DeleteUserResponse
 */
export class DeleteUserResponse extends Message<DeleteUserResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<DeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.DeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined, b: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUserResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetContactEmailRequest
 */
export class SetContactEmailRequest extends Message<SetContactEmailRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the user's contact email and it's verification state.
   *
   * @generated from field: zitadel.user.v3alpha.SetEmail email = 2;
   */
  email?: SetEmail;

  constructor(data?: PartialMessage<SetContactEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetContactEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "message", T: SetEmail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetContactEmailRequest {
    return new SetContactEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetContactEmailRequest {
    return new SetContactEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetContactEmailRequest {
    return new SetContactEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetContactEmailRequest | PlainMessage<SetContactEmailRequest> | undefined, b: SetContactEmailRequest | PlainMessage<SetContactEmailRequest> | undefined): boolean {
    return proto3.util.equals(SetContactEmailRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetContactEmailResponse
 */
export class SetContactEmailResponse extends Message<SetContactEmailResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * The verification code will be set if a contact email was set with a return_code verification option.
   *
   * @generated from field: optional string verification_code = 3;
   */
  verificationCode?: string;

  constructor(data?: PartialMessage<SetContactEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetContactEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 3, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetContactEmailResponse {
    return new SetContactEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetContactEmailResponse {
    return new SetContactEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetContactEmailResponse {
    return new SetContactEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetContactEmailResponse | PlainMessage<SetContactEmailResponse> | undefined, b: SetContactEmailResponse | PlainMessage<SetContactEmailResponse> | undefined): boolean {
    return proto3.util.equals(SetContactEmailResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyContactEmailRequest
 */
export class VerifyContactEmailRequest extends Message<VerifyContactEmailRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the verification code generated during the set contact email request.
   *
   * @generated from field: string verification_code = 2;
   */
  verificationCode = "";

  constructor(data?: PartialMessage<VerifyContactEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyContactEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyContactEmailRequest {
    return new VerifyContactEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyContactEmailRequest {
    return new VerifyContactEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyContactEmailRequest {
    return new VerifyContactEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyContactEmailRequest | PlainMessage<VerifyContactEmailRequest> | undefined, b: VerifyContactEmailRequest | PlainMessage<VerifyContactEmailRequest> | undefined): boolean {
    return proto3.util.equals(VerifyContactEmailRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyContactEmailResponse
 */
export class VerifyContactEmailResponse extends Message<VerifyContactEmailResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<VerifyContactEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyContactEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyContactEmailResponse {
    return new VerifyContactEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyContactEmailResponse {
    return new VerifyContactEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyContactEmailResponse {
    return new VerifyContactEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyContactEmailResponse | PlainMessage<VerifyContactEmailResponse> | undefined, b: VerifyContactEmailResponse | PlainMessage<VerifyContactEmailResponse> | undefined): boolean {
    return proto3.util.equals(VerifyContactEmailResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ResendContactEmailCodeRequest
 */
export class ResendContactEmailCodeRequest extends Message<ResendContactEmailCodeRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * if no verification is specified, an email is sent
   *
   * @generated from oneof zitadel.user.v3alpha.ResendContactEmailCodeRequest.verification
   */
  verification: {
    /**
     * Let ZITADEL send the link to the user via email.
     *
     * @generated from field: zitadel.user.v3alpha.SendEmailVerificationCode send_code = 2;
     */
    value: SendEmailVerificationCode;
    case: "sendCode";
  } | {
    /**
     * Get the code back to provide it to the user in your preferred mechanism.
     *
     * @generated from field: zitadel.user.v3alpha.ReturnEmailVerificationCode return_code = 3;
     */
    value: ReturnEmailVerificationCode;
    case: "returnCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResendContactEmailCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ResendContactEmailCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_code", kind: "message", T: SendEmailVerificationCode, oneof: "verification" },
    { no: 3, name: "return_code", kind: "message", T: ReturnEmailVerificationCode, oneof: "verification" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendContactEmailCodeRequest {
    return new ResendContactEmailCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendContactEmailCodeRequest {
    return new ResendContactEmailCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendContactEmailCodeRequest {
    return new ResendContactEmailCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResendContactEmailCodeRequest | PlainMessage<ResendContactEmailCodeRequest> | undefined, b: ResendContactEmailCodeRequest | PlainMessage<ResendContactEmailCodeRequest> | undefined): boolean {
    return proto3.util.equals(ResendContactEmailCodeRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ResendContactEmailCodeResponse
 */
export class ResendContactEmailCodeResponse extends Message<ResendContactEmailCodeResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * in case the verification was set to return_code, the code will be returned.
   *
   * @generated from field: optional string verification_code = 2;
   */
  verificationCode?: string;

  constructor(data?: PartialMessage<ResendContactEmailCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ResendContactEmailCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendContactEmailCodeResponse {
    return new ResendContactEmailCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendContactEmailCodeResponse {
    return new ResendContactEmailCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendContactEmailCodeResponse {
    return new ResendContactEmailCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResendContactEmailCodeResponse | PlainMessage<ResendContactEmailCodeResponse> | undefined, b: ResendContactEmailCodeResponse | PlainMessage<ResendContactEmailCodeResponse> | undefined): boolean {
    return proto3.util.equals(ResendContactEmailCodeResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetContactPhoneRequest
 */
export class SetContactPhoneRequest extends Message<SetContactPhoneRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the user's contact phone and it's verification state.
   *
   * @generated from field: zitadel.user.v3alpha.SetPhone phone = 2;
   */
  phone?: SetPhone;

  constructor(data?: PartialMessage<SetContactPhoneRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetContactPhoneRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone", kind: "message", T: SetPhone },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetContactPhoneRequest {
    return new SetContactPhoneRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetContactPhoneRequest {
    return new SetContactPhoneRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetContactPhoneRequest {
    return new SetContactPhoneRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetContactPhoneRequest | PlainMessage<SetContactPhoneRequest> | undefined, b: SetContactPhoneRequest | PlainMessage<SetContactPhoneRequest> | undefined): boolean {
    return proto3.util.equals(SetContactPhoneRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetContactPhoneResponse
 */
export class SetContactPhoneResponse extends Message<SetContactPhoneResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * The phone verification code will be set if a contact phone was set with a return_code verification option.
   *
   * @generated from field: optional string email_code = 3;
   */
  emailCode?: string;

  constructor(data?: PartialMessage<SetContactPhoneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetContactPhoneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 3, name: "email_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetContactPhoneResponse {
    return new SetContactPhoneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetContactPhoneResponse {
    return new SetContactPhoneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetContactPhoneResponse {
    return new SetContactPhoneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetContactPhoneResponse | PlainMessage<SetContactPhoneResponse> | undefined, b: SetContactPhoneResponse | PlainMessage<SetContactPhoneResponse> | undefined): boolean {
    return proto3.util.equals(SetContactPhoneResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyContactPhoneRequest
 */
export class VerifyContactPhoneRequest extends Message<VerifyContactPhoneRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the verification code generated during the set contact phone request.
   *
   * @generated from field: string verification_code = 2;
   */
  verificationCode = "";

  constructor(data?: PartialMessage<VerifyContactPhoneRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyContactPhoneRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyContactPhoneRequest {
    return new VerifyContactPhoneRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyContactPhoneRequest {
    return new VerifyContactPhoneRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyContactPhoneRequest {
    return new VerifyContactPhoneRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyContactPhoneRequest | PlainMessage<VerifyContactPhoneRequest> | undefined, b: VerifyContactPhoneRequest | PlainMessage<VerifyContactPhoneRequest> | undefined): boolean {
    return proto3.util.equals(VerifyContactPhoneRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyContactPhoneResponse
 */
export class VerifyContactPhoneResponse extends Message<VerifyContactPhoneResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<VerifyContactPhoneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyContactPhoneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyContactPhoneResponse {
    return new VerifyContactPhoneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyContactPhoneResponse {
    return new VerifyContactPhoneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyContactPhoneResponse {
    return new VerifyContactPhoneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyContactPhoneResponse | PlainMessage<VerifyContactPhoneResponse> | undefined, b: VerifyContactPhoneResponse | PlainMessage<VerifyContactPhoneResponse> | undefined): boolean {
    return proto3.util.equals(VerifyContactPhoneResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ResendContactPhoneCodeRequest
 */
export class ResendContactPhoneCodeRequest extends Message<ResendContactPhoneCodeRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * if no verification is specified, a SMS is sent
   *
   * @generated from oneof zitadel.user.v3alpha.ResendContactPhoneCodeRequest.verification
   */
  verification: {
    /**
     * Let ZITADEL send the link to the user via SMS.
     *
     * @generated from field: zitadel.user.v3alpha.SendPhoneVerificationCode send_code = 2;
     */
    value: SendPhoneVerificationCode;
    case: "sendCode";
  } | {
    /**
     * Get the code back to provide it to the user in your preferred mechanism.
     *
     * @generated from field: zitadel.user.v3alpha.ReturnPhoneVerificationCode return_code = 3;
     */
    value: ReturnPhoneVerificationCode;
    case: "returnCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResendContactPhoneCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ResendContactPhoneCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_code", kind: "message", T: SendPhoneVerificationCode, oneof: "verification" },
    { no: 3, name: "return_code", kind: "message", T: ReturnPhoneVerificationCode, oneof: "verification" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendContactPhoneCodeRequest {
    return new ResendContactPhoneCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendContactPhoneCodeRequest {
    return new ResendContactPhoneCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendContactPhoneCodeRequest {
    return new ResendContactPhoneCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResendContactPhoneCodeRequest | PlainMessage<ResendContactPhoneCodeRequest> | undefined, b: ResendContactPhoneCodeRequest | PlainMessage<ResendContactPhoneCodeRequest> | undefined): boolean {
    return proto3.util.equals(ResendContactPhoneCodeRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.ResendContactPhoneCodeResponse
 */
export class ResendContactPhoneCodeResponse extends Message<ResendContactPhoneCodeResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * in case the verification was set to return_code, the code will be returned.
   *
   * @generated from field: optional string verification_code = 2;
   */
  verificationCode?: string;

  constructor(data?: PartialMessage<ResendContactPhoneCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.ResendContactPhoneCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResendContactPhoneCodeResponse {
    return new ResendContactPhoneCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResendContactPhoneCodeResponse {
    return new ResendContactPhoneCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResendContactPhoneCodeResponse {
    return new ResendContactPhoneCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResendContactPhoneCodeResponse | PlainMessage<ResendContactPhoneCodeResponse> | undefined, b: ResendContactPhoneCodeResponse | PlainMessage<ResendContactPhoneCodeResponse> | undefined): boolean {
    return proto3.util.equals(ResendContactPhoneCodeResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddUsernameRequest
 */
export class AddUsernameRequest extends Message<AddUsernameRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the user's new username.
   *
   * @generated from field: zitadel.user.v3alpha.SetUsername username = 2;
   */
  username?: SetUsername;

  constructor(data?: PartialMessage<AddUsernameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddUsernameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "message", T: SetUsername },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUsernameRequest {
    return new AddUsernameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUsernameRequest {
    return new AddUsernameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUsernameRequest {
    return new AddUsernameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddUsernameRequest | PlainMessage<AddUsernameRequest> | undefined, b: AddUsernameRequest | PlainMessage<AddUsernameRequest> | undefined): boolean {
    return proto3.util.equals(AddUsernameRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddUsernameResponse
 */
export class AddUsernameResponse extends Message<AddUsernameResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * unique identifier of the username.
   *
   * @generated from field: string username_id = 2;
   */
  usernameId = "";

  constructor(data?: PartialMessage<AddUsernameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddUsernameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "username_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUsernameResponse {
    return new AddUsernameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUsernameResponse {
    return new AddUsernameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUsernameResponse {
    return new AddUsernameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddUsernameResponse | PlainMessage<AddUsernameResponse> | undefined, b: AddUsernameResponse | PlainMessage<AddUsernameResponse> | undefined): boolean {
    return proto3.util.equals(AddUsernameResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveUsernameRequest
 */
export class RemoveUsernameRequest extends Message<RemoveUsernameRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the username.
   *
   * @generated from field: string username_id = 2;
   */
  usernameId = "";

  constructor(data?: PartialMessage<RemoveUsernameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveUsernameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUsernameRequest {
    return new RemoveUsernameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUsernameRequest {
    return new RemoveUsernameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUsernameRequest {
    return new RemoveUsernameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUsernameRequest | PlainMessage<RemoveUsernameRequest> | undefined, b: RemoveUsernameRequest | PlainMessage<RemoveUsernameRequest> | undefined): boolean {
    return proto3.util.equals(RemoveUsernameRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveUsernameResponse
 */
export class RemoveUsernameResponse extends Message<RemoveUsernameResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<RemoveUsernameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveUsernameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUsernameResponse {
    return new RemoveUsernameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUsernameResponse {
    return new RemoveUsernameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUsernameResponse {
    return new RemoveUsernameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUsernameResponse | PlainMessage<RemoveUsernameResponse> | undefined, b: RemoveUsernameResponse | PlainMessage<RemoveUsernameResponse> | undefined): boolean {
    return proto3.util.equals(RemoveUsernameResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetPasswordRequest
 */
export class SetPasswordRequest extends Message<SetPasswordRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Provide the new password (in plain text or as hash).
   *
   * @generated from field: zitadel.user.v3alpha.SetPassword new_password = 2;
   */
  newPassword?: SetPassword;

  /**
   * If neither, the current password nor a verification code generated by the PasswordReset is provided,
   * the user must be granted permission to set a password.
   *
   * @generated from oneof zitadel.user.v3alpha.SetPasswordRequest.verification
   */
  verification: {
    /**
     * Provide the current password to verify you're allowed to change the password.
     *
     * @generated from field: string current_password = 3;
     */
    value: string;
    case: "currentPassword";
  } | {
    /**
     * Or provider the verification code generated during password reset request.
     *
     * @generated from field: string verification_code = 4;
     */
    value: string;
    case: "verificationCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SetPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_password", kind: "message", T: SetPassword },
    { no: 3, name: "current_password", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "verification" },
    { no: 4, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "verification" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPasswordRequest {
    return new SetPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPasswordRequest {
    return new SetPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPasswordRequest {
    return new SetPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPasswordRequest | PlainMessage<SetPasswordRequest> | undefined, b: SetPasswordRequest | PlainMessage<SetPasswordRequest> | undefined): boolean {
    return proto3.util.equals(SetPasswordRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SetPasswordResponse
 */
export class SetPasswordResponse extends Message<SetPasswordResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<SetPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetPasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPasswordResponse {
    return new SetPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPasswordResponse {
    return new SetPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPasswordResponse {
    return new SetPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPasswordResponse | PlainMessage<SetPasswordResponse> | undefined, b: SetPasswordResponse | PlainMessage<SetPasswordResponse> | undefined): boolean {
    return proto3.util.equals(SetPasswordResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RequestPasswordResetRequest
 */
export class RequestPasswordResetRequest extends Message<RequestPasswordResetRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * If no medium is specified, an email is sent with the default url.
   *
   * @generated from oneof zitadel.user.v3alpha.RequestPasswordResetRequest.medium
   */
  medium: {
    /**
     * Let ZITADEL send the link to the user via email.
     *
     * @generated from field: zitadel.user.v3alpha.SendPasswordResetEmail send_email = 2;
     */
    value: SendPasswordResetEmail;
    case: "sendEmail";
  } | {
    /**
     * Let ZITADEL send the link to the user via SMS.
     *
     * @generated from field: zitadel.user.v3alpha.SendPasswordResetSMS send_sms = 3;
     */
    value: SendPasswordResetSMS;
    case: "sendSms";
  } | {
    /**
     * Get the code back to provide it to the user in your preferred mechanism.
     *
     * @generated from field: zitadel.user.v3alpha.ReturnPasswordResetCode return_code = 4;
     */
    value: ReturnPasswordResetCode;
    case: "returnCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RequestPasswordResetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RequestPasswordResetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_email", kind: "message", T: SendPasswordResetEmail, oneof: "medium" },
    { no: 3, name: "send_sms", kind: "message", T: SendPasswordResetSMS, oneof: "medium" },
    { no: 4, name: "return_code", kind: "message", T: ReturnPasswordResetCode, oneof: "medium" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestPasswordResetRequest {
    return new RequestPasswordResetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestPasswordResetRequest {
    return new RequestPasswordResetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestPasswordResetRequest {
    return new RequestPasswordResetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RequestPasswordResetRequest | PlainMessage<RequestPasswordResetRequest> | undefined, b: RequestPasswordResetRequest | PlainMessage<RequestPasswordResetRequest> | undefined): boolean {
    return proto3.util.equals(RequestPasswordResetRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RequestPasswordResetResponse
 */
export class RequestPasswordResetResponse extends Message<RequestPasswordResetResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * In case the medium was set to return_code, the code will be returned.
   *
   * @generated from field: optional string verification_code = 2;
   */
  verificationCode?: string;

  constructor(data?: PartialMessage<RequestPasswordResetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RequestPasswordResetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestPasswordResetResponse {
    return new RequestPasswordResetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestPasswordResetResponse {
    return new RequestPasswordResetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestPasswordResetResponse {
    return new RequestPasswordResetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RequestPasswordResetResponse | PlainMessage<RequestPasswordResetResponse> | undefined, b: RequestPasswordResetResponse | PlainMessage<RequestPasswordResetResponse> | undefined): boolean {
    return proto3.util.equals(RequestPasswordResetResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StartWebAuthNRegistrationRequest
 */
export class StartWebAuthNRegistrationRequest extends Message<StartWebAuthNRegistrationRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Domain on which the user currently is or will be authenticated.
   *
   * @generated from field: string domain = 4;
   */
  domain = "";

  /**
   * Optionally specify the authenticator type of the passkey device (platform or cross-platform).
   * If none is provided, both values are allowed.
   *
   * @generated from field: zitadel.user.v3alpha.WebAuthNAuthenticatorType authenticator_type = 3;
   */
  authenticatorType = WebAuthNAuthenticatorType.WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED;

  /**
   * Optionally provide a one time code generated by ZITADEL.
   * This is required to start the passkey registration without user authentication.
   *
   * @generated from field: optional zitadel.user.v3alpha.AuthenticatorRegistrationCode code = 2;
   */
  code?: AuthenticatorRegistrationCode;

  constructor(data?: PartialMessage<StartWebAuthNRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StartWebAuthNRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authenticator_type", kind: "enum", T: proto3.getEnumType(WebAuthNAuthenticatorType) },
    { no: 2, name: "code", kind: "message", T: AuthenticatorRegistrationCode, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWebAuthNRegistrationRequest {
    return new StartWebAuthNRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWebAuthNRegistrationRequest {
    return new StartWebAuthNRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWebAuthNRegistrationRequest {
    return new StartWebAuthNRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartWebAuthNRegistrationRequest | PlainMessage<StartWebAuthNRegistrationRequest> | undefined, b: StartWebAuthNRegistrationRequest | PlainMessage<StartWebAuthNRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(StartWebAuthNRegistrationRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StartWebAuthNRegistrationResponse
 */
export class StartWebAuthNRegistrationResponse extends Message<StartWebAuthNRegistrationResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * unique identifier of the WebAuthN registration.
   *
   * @generated from field: string web_auth_n_id = 2;
   */
  webAuthNId = "";

  /**
   * Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions).
   * Generated helper methods transform the field to JSON, for use in a WebauthN client.
   * See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions
   *
   * @generated from field: google.protobuf.Struct public_key_credential_creation_options = 3;
   */
  publicKeyCredentialCreationOptions?: Struct;

  constructor(data?: PartialMessage<StartWebAuthNRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StartWebAuthNRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "web_auth_n_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key_credential_creation_options", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWebAuthNRegistrationResponse {
    return new StartWebAuthNRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWebAuthNRegistrationResponse {
    return new StartWebAuthNRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWebAuthNRegistrationResponse {
    return new StartWebAuthNRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartWebAuthNRegistrationResponse | PlainMessage<StartWebAuthNRegistrationResponse> | undefined, b: StartWebAuthNRegistrationResponse | PlainMessage<StartWebAuthNRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(StartWebAuthNRegistrationResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyWebAuthNRegistrationRequest
 */
export class VerifyWebAuthNRegistrationRequest extends Message<VerifyWebAuthNRegistrationRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the WebAuthN registration, which was returned in the start webauthn registration.
   *
   * @generated from field: string web_auth_n_id = 2;
   */
  webAuthNId = "";

  /**
   * PublicKeyCredential Interface.
   * Generated helper methods populate the field from JSON created by a WebAuthN client.
   * See also:  https://www.w3.org/TR/webauthn/#publickeycredential
   *
   * @generated from field: google.protobuf.Struct public_key_credential = 3;
   */
  publicKeyCredential?: Struct;

  /**
   * Provide a name for the WebAuthN device. This will help identify it in the future.
   *
   * @generated from field: string web_auth_n_name = 4;
   */
  webAuthNName = "";

  constructor(data?: PartialMessage<VerifyWebAuthNRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyWebAuthNRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "web_auth_n_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key_credential", kind: "message", T: Struct },
    { no: 4, name: "web_auth_n_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyWebAuthNRegistrationRequest {
    return new VerifyWebAuthNRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyWebAuthNRegistrationRequest {
    return new VerifyWebAuthNRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyWebAuthNRegistrationRequest {
    return new VerifyWebAuthNRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyWebAuthNRegistrationRequest | PlainMessage<VerifyWebAuthNRegistrationRequest> | undefined, b: VerifyWebAuthNRegistrationRequest | PlainMessage<VerifyWebAuthNRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(VerifyWebAuthNRegistrationRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyWebAuthNRegistrationResponse
 */
export class VerifyWebAuthNRegistrationResponse extends Message<VerifyWebAuthNRegistrationResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<VerifyWebAuthNRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyWebAuthNRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyWebAuthNRegistrationResponse {
    return new VerifyWebAuthNRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyWebAuthNRegistrationResponse {
    return new VerifyWebAuthNRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyWebAuthNRegistrationResponse {
    return new VerifyWebAuthNRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyWebAuthNRegistrationResponse | PlainMessage<VerifyWebAuthNRegistrationResponse> | undefined, b: VerifyWebAuthNRegistrationResponse | PlainMessage<VerifyWebAuthNRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(VerifyWebAuthNRegistrationResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.CreateWebAuthNRegistrationLinkRequest
 */
export class CreateWebAuthNRegistrationLinkRequest extends Message<CreateWebAuthNRegistrationLinkRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * if no medium is specified, an email is sent with the default url.
   *
   * @generated from oneof zitadel.user.v3alpha.CreateWebAuthNRegistrationLinkRequest.medium
   */
  medium: {
    /**
     * Let ZITADEL send the link to the user via email.
     *
     * @generated from field: zitadel.user.v3alpha.SendWebAuthNRegistrationLink send_link = 2;
     */
    value: SendWebAuthNRegistrationLink;
    case: "sendLink";
  } | {
    /**
     * Get the code back to provide it to the user in your preferred mechanism.
     *
     * @generated from field: zitadel.user.v3alpha.ReturnWebAuthNRegistrationCode return_code = 3;
     */
    value: ReturnWebAuthNRegistrationCode;
    case: "returnCode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateWebAuthNRegistrationLinkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.CreateWebAuthNRegistrationLinkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send_link", kind: "message", T: SendWebAuthNRegistrationLink, oneof: "medium" },
    { no: 3, name: "return_code", kind: "message", T: ReturnWebAuthNRegistrationCode, oneof: "medium" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebAuthNRegistrationLinkRequest {
    return new CreateWebAuthNRegistrationLinkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebAuthNRegistrationLinkRequest {
    return new CreateWebAuthNRegistrationLinkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebAuthNRegistrationLinkRequest {
    return new CreateWebAuthNRegistrationLinkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebAuthNRegistrationLinkRequest | PlainMessage<CreateWebAuthNRegistrationLinkRequest> | undefined, b: CreateWebAuthNRegistrationLinkRequest | PlainMessage<CreateWebAuthNRegistrationLinkRequest> | undefined): boolean {
    return proto3.util.equals(CreateWebAuthNRegistrationLinkRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.CreateWebAuthNRegistrationLinkResponse
 */
export class CreateWebAuthNRegistrationLinkResponse extends Message<CreateWebAuthNRegistrationLinkResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * In case the medium was set to return_code, the code will be returned.
   *
   * @generated from field: optional zitadel.user.v3alpha.AuthenticatorRegistrationCode code = 2;
   */
  code?: AuthenticatorRegistrationCode;

  constructor(data?: PartialMessage<CreateWebAuthNRegistrationLinkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.CreateWebAuthNRegistrationLinkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "code", kind: "message", T: AuthenticatorRegistrationCode, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebAuthNRegistrationLinkResponse {
    return new CreateWebAuthNRegistrationLinkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebAuthNRegistrationLinkResponse {
    return new CreateWebAuthNRegistrationLinkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebAuthNRegistrationLinkResponse {
    return new CreateWebAuthNRegistrationLinkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebAuthNRegistrationLinkResponse | PlainMessage<CreateWebAuthNRegistrationLinkResponse> | undefined, b: CreateWebAuthNRegistrationLinkResponse | PlainMessage<CreateWebAuthNRegistrationLinkResponse> | undefined): boolean {
    return proto3.util.equals(CreateWebAuthNRegistrationLinkResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveWebAuthNAuthenticatorRequest
 */
export class RemoveWebAuthNAuthenticatorRequest extends Message<RemoveWebAuthNAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the WebAuthN authenticator.
   *
   * @generated from field: string web_auth_n_id = 2;
   */
  webAuthNId = "";

  constructor(data?: PartialMessage<RemoveWebAuthNAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveWebAuthNAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "web_auth_n_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWebAuthNAuthenticatorRequest {
    return new RemoveWebAuthNAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWebAuthNAuthenticatorRequest {
    return new RemoveWebAuthNAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWebAuthNAuthenticatorRequest {
    return new RemoveWebAuthNAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWebAuthNAuthenticatorRequest | PlainMessage<RemoveWebAuthNAuthenticatorRequest> | undefined, b: RemoveWebAuthNAuthenticatorRequest | PlainMessage<RemoveWebAuthNAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(RemoveWebAuthNAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveWebAuthNAuthenticatorResponse
 */
export class RemoveWebAuthNAuthenticatorResponse extends Message<RemoveWebAuthNAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<RemoveWebAuthNAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveWebAuthNAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWebAuthNAuthenticatorResponse {
    return new RemoveWebAuthNAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWebAuthNAuthenticatorResponse {
    return new RemoveWebAuthNAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWebAuthNAuthenticatorResponse {
    return new RemoveWebAuthNAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWebAuthNAuthenticatorResponse | PlainMessage<RemoveWebAuthNAuthenticatorResponse> | undefined, b: RemoveWebAuthNAuthenticatorResponse | PlainMessage<RemoveWebAuthNAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(RemoveWebAuthNAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StartTOTPRegistrationRequest
 */
export class StartTOTPRegistrationRequest extends Message<StartTOTPRegistrationRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<StartTOTPRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StartTOTPRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartTOTPRegistrationRequest {
    return new StartTOTPRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartTOTPRegistrationRequest {
    return new StartTOTPRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartTOTPRegistrationRequest {
    return new StartTOTPRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartTOTPRegistrationRequest | PlainMessage<StartTOTPRegistrationRequest> | undefined, b: StartTOTPRegistrationRequest | PlainMessage<StartTOTPRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(StartTOTPRegistrationRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StartTOTPRegistrationResponse
 */
export class StartTOTPRegistrationResponse extends Message<StartTOTPRegistrationResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * unique identifier of the TOTP registration.
   *
   * @generated from field: string totp_id = 2;
   */
  totpId = "";

  /**
   * The TOTP URI, which can be used to create a QR Code for scanning with an authenticator app.
   *
   * @generated from field: string uri = 3;
   */
  uri = "";

  /**
   * The TOTP secret, which can be used for manually adding in an authenticator app.
   *
   * @generated from field: string secret = 4;
   */
  secret = "";

  constructor(data?: PartialMessage<StartTOTPRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StartTOTPRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "totp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartTOTPRegistrationResponse {
    return new StartTOTPRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartTOTPRegistrationResponse {
    return new StartTOTPRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartTOTPRegistrationResponse {
    return new StartTOTPRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartTOTPRegistrationResponse | PlainMessage<StartTOTPRegistrationResponse> | undefined, b: StartTOTPRegistrationResponse | PlainMessage<StartTOTPRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(StartTOTPRegistrationResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyTOTPRegistrationRequest
 */
export class VerifyTOTPRegistrationRequest extends Message<VerifyTOTPRegistrationRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the TOTP registration, which was returned in the start TOTP registration.
   *
   * @generated from field: string totp_id = 2;
   */
  totpId = "";

  /**
   * Code generated by TOTP app or device.
   *
   * @generated from field: string code = 3;
   */
  code = "";

  constructor(data?: PartialMessage<VerifyTOTPRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyTOTPRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "totp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTOTPRegistrationRequest {
    return new VerifyTOTPRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTOTPRegistrationRequest {
    return new VerifyTOTPRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTOTPRegistrationRequest {
    return new VerifyTOTPRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTOTPRegistrationRequest | PlainMessage<VerifyTOTPRegistrationRequest> | undefined, b: VerifyTOTPRegistrationRequest | PlainMessage<VerifyTOTPRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(VerifyTOTPRegistrationRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyTOTPRegistrationResponse
 */
export class VerifyTOTPRegistrationResponse extends Message<VerifyTOTPRegistrationResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<VerifyTOTPRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyTOTPRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTOTPRegistrationResponse {
    return new VerifyTOTPRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTOTPRegistrationResponse {
    return new VerifyTOTPRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTOTPRegistrationResponse {
    return new VerifyTOTPRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTOTPRegistrationResponse | PlainMessage<VerifyTOTPRegistrationResponse> | undefined, b: VerifyTOTPRegistrationResponse | PlainMessage<VerifyTOTPRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(VerifyTOTPRegistrationResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveTOTPAuthenticatorRequest
 */
export class RemoveTOTPAuthenticatorRequest extends Message<RemoveTOTPAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the TOTP authenticator.
   *
   * @generated from field: string totp_id = 2;
   */
  totpId = "";

  constructor(data?: PartialMessage<RemoveTOTPAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveTOTPAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "totp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTOTPAuthenticatorRequest {
    return new RemoveTOTPAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTOTPAuthenticatorRequest {
    return new RemoveTOTPAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTOTPAuthenticatorRequest {
    return new RemoveTOTPAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTOTPAuthenticatorRequest | PlainMessage<RemoveTOTPAuthenticatorRequest> | undefined, b: RemoveTOTPAuthenticatorRequest | PlainMessage<RemoveTOTPAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTOTPAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveTOTPAuthenticatorResponse
 */
export class RemoveTOTPAuthenticatorResponse extends Message<RemoveTOTPAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<RemoveTOTPAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveTOTPAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTOTPAuthenticatorResponse {
    return new RemoveTOTPAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTOTPAuthenticatorResponse {
    return new RemoveTOTPAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTOTPAuthenticatorResponse {
    return new RemoveTOTPAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTOTPAuthenticatorResponse | PlainMessage<RemoveTOTPAuthenticatorResponse> | undefined, b: RemoveTOTPAuthenticatorResponse | PlainMessage<RemoveTOTPAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(RemoveTOTPAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddOTPSMSAuthenticatorRequest
 */
export class AddOTPSMSAuthenticatorRequest extends Message<AddOTPSMSAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the user's phone for the OTP SMS authenticator and it's verification state.
   *
   * @generated from field: zitadel.user.v3alpha.SetPhone phone = 2;
   */
  phone?: SetPhone;

  constructor(data?: PartialMessage<AddOTPSMSAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddOTPSMSAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone", kind: "message", T: SetPhone },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOTPSMSAuthenticatorRequest {
    return new AddOTPSMSAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOTPSMSAuthenticatorRequest {
    return new AddOTPSMSAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOTPSMSAuthenticatorRequest {
    return new AddOTPSMSAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddOTPSMSAuthenticatorRequest | PlainMessage<AddOTPSMSAuthenticatorRequest> | undefined, b: AddOTPSMSAuthenticatorRequest | PlainMessage<AddOTPSMSAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(AddOTPSMSAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddOTPSMSAuthenticatorResponse
 */
export class AddOTPSMSAuthenticatorResponse extends Message<AddOTPSMSAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * unique identifier of the OTP SMS registration.
   *
   * @generated from field: string otp_sms_id = 2;
   */
  otpSmsId = "";

  /**
   * The OTP verification code will be set if a phone was set with a return_code verification option.
   *
   * @generated from field: optional string verification_code = 3;
   */
  verificationCode?: string;

  constructor(data?: PartialMessage<AddOTPSMSAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddOTPSMSAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "otp_sms_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOTPSMSAuthenticatorResponse {
    return new AddOTPSMSAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOTPSMSAuthenticatorResponse {
    return new AddOTPSMSAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOTPSMSAuthenticatorResponse {
    return new AddOTPSMSAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddOTPSMSAuthenticatorResponse | PlainMessage<AddOTPSMSAuthenticatorResponse> | undefined, b: AddOTPSMSAuthenticatorResponse | PlainMessage<AddOTPSMSAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(AddOTPSMSAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyOTPSMSRegistrationRequest
 */
export class VerifyOTPSMSRegistrationRequest extends Message<VerifyOTPSMSRegistrationRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the OTP SMS registration, which was returned in the add OTP SMS.
   *
   * @generated from field: string otp_sms_id = 2;
   */
  otpSmsId = "";

  /**
   * Set the verification code generated during the add OTP SMS request.
   *
   * @generated from field: string code = 3;
   */
  code = "";

  constructor(data?: PartialMessage<VerifyOTPSMSRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyOTPSMSRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "otp_sms_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyOTPSMSRegistrationRequest {
    return new VerifyOTPSMSRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyOTPSMSRegistrationRequest {
    return new VerifyOTPSMSRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyOTPSMSRegistrationRequest {
    return new VerifyOTPSMSRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyOTPSMSRegistrationRequest | PlainMessage<VerifyOTPSMSRegistrationRequest> | undefined, b: VerifyOTPSMSRegistrationRequest | PlainMessage<VerifyOTPSMSRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(VerifyOTPSMSRegistrationRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyOTPSMSRegistrationResponse
 */
export class VerifyOTPSMSRegistrationResponse extends Message<VerifyOTPSMSRegistrationResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<VerifyOTPSMSRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyOTPSMSRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyOTPSMSRegistrationResponse {
    return new VerifyOTPSMSRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyOTPSMSRegistrationResponse {
    return new VerifyOTPSMSRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyOTPSMSRegistrationResponse {
    return new VerifyOTPSMSRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyOTPSMSRegistrationResponse | PlainMessage<VerifyOTPSMSRegistrationResponse> | undefined, b: VerifyOTPSMSRegistrationResponse | PlainMessage<VerifyOTPSMSRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(VerifyOTPSMSRegistrationResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveOTPSMSAuthenticatorRequest
 */
export class RemoveOTPSMSAuthenticatorRequest extends Message<RemoveOTPSMSAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the OTP SMS authenticator.
   *
   * @generated from field: string otp_sms_id = 2;
   */
  otpSmsId = "";

  constructor(data?: PartialMessage<RemoveOTPSMSAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveOTPSMSAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "otp_sms_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOTPSMSAuthenticatorRequest {
    return new RemoveOTPSMSAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOTPSMSAuthenticatorRequest {
    return new RemoveOTPSMSAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOTPSMSAuthenticatorRequest {
    return new RemoveOTPSMSAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOTPSMSAuthenticatorRequest | PlainMessage<RemoveOTPSMSAuthenticatorRequest> | undefined, b: RemoveOTPSMSAuthenticatorRequest | PlainMessage<RemoveOTPSMSAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOTPSMSAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveOTPSMSAuthenticatorResponse
 */
export class RemoveOTPSMSAuthenticatorResponse extends Message<RemoveOTPSMSAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<RemoveOTPSMSAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveOTPSMSAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOTPSMSAuthenticatorResponse {
    return new RemoveOTPSMSAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOTPSMSAuthenticatorResponse {
    return new RemoveOTPSMSAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOTPSMSAuthenticatorResponse {
    return new RemoveOTPSMSAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOTPSMSAuthenticatorResponse | PlainMessage<RemoveOTPSMSAuthenticatorResponse> | undefined, b: RemoveOTPSMSAuthenticatorResponse | PlainMessage<RemoveOTPSMSAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOTPSMSAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddOTPEmailAuthenticatorRequest
 */
export class AddOTPEmailAuthenticatorRequest extends Message<AddOTPEmailAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Set the user's email for the OTP Email authenticator and it's verification state.
   *
   * @generated from field: zitadel.user.v3alpha.SetEmail email = 2;
   */
  email?: SetEmail;

  constructor(data?: PartialMessage<AddOTPEmailAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddOTPEmailAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "message", T: SetEmail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOTPEmailAuthenticatorRequest {
    return new AddOTPEmailAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOTPEmailAuthenticatorRequest {
    return new AddOTPEmailAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOTPEmailAuthenticatorRequest {
    return new AddOTPEmailAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddOTPEmailAuthenticatorRequest | PlainMessage<AddOTPEmailAuthenticatorRequest> | undefined, b: AddOTPEmailAuthenticatorRequest | PlainMessage<AddOTPEmailAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(AddOTPEmailAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddOTPEmailAuthenticatorResponse
 */
export class AddOTPEmailAuthenticatorResponse extends Message<AddOTPEmailAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * unique identifier of the OTP Email registration.
   *
   * @generated from field: string otp_email_id = 2;
   */
  otpEmailId = "";

  /**
   * The OTP verification code will be set if a email was set with a return_code verification option.
   *
   * @generated from field: optional string verification_code = 3;
   */
  verificationCode?: string;

  constructor(data?: PartialMessage<AddOTPEmailAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddOTPEmailAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "otp_email_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOTPEmailAuthenticatorResponse {
    return new AddOTPEmailAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOTPEmailAuthenticatorResponse {
    return new AddOTPEmailAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOTPEmailAuthenticatorResponse {
    return new AddOTPEmailAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddOTPEmailAuthenticatorResponse | PlainMessage<AddOTPEmailAuthenticatorResponse> | undefined, b: AddOTPEmailAuthenticatorResponse | PlainMessage<AddOTPEmailAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(AddOTPEmailAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyOTPEmailRegistrationRequest
 */
export class VerifyOTPEmailRegistrationRequest extends Message<VerifyOTPEmailRegistrationRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the OTP Email registration, which was returned in the add OTP Email.
   *
   * @generated from field: string otp_email_id = 2;
   */
  otpEmailId = "";

  /**
   * Set the verification code generated during the add OTP Email request.
   *
   * @generated from field: string code = 3;
   */
  code = "";

  constructor(data?: PartialMessage<VerifyOTPEmailRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyOTPEmailRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "otp_email_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyOTPEmailRegistrationRequest {
    return new VerifyOTPEmailRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyOTPEmailRegistrationRequest {
    return new VerifyOTPEmailRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyOTPEmailRegistrationRequest {
    return new VerifyOTPEmailRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyOTPEmailRegistrationRequest | PlainMessage<VerifyOTPEmailRegistrationRequest> | undefined, b: VerifyOTPEmailRegistrationRequest | PlainMessage<VerifyOTPEmailRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(VerifyOTPEmailRegistrationRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.VerifyOTPEmailRegistrationResponse
 */
export class VerifyOTPEmailRegistrationResponse extends Message<VerifyOTPEmailRegistrationResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<VerifyOTPEmailRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.VerifyOTPEmailRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyOTPEmailRegistrationResponse {
    return new VerifyOTPEmailRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyOTPEmailRegistrationResponse {
    return new VerifyOTPEmailRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyOTPEmailRegistrationResponse {
    return new VerifyOTPEmailRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyOTPEmailRegistrationResponse | PlainMessage<VerifyOTPEmailRegistrationResponse> | undefined, b: VerifyOTPEmailRegistrationResponse | PlainMessage<VerifyOTPEmailRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(VerifyOTPEmailRegistrationResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveOTPEmailAuthenticatorRequest
 */
export class RemoveOTPEmailAuthenticatorRequest extends Message<RemoveOTPEmailAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the OTP Email authenticator.
   *
   * @generated from field: string otp_email_id = 2;
   */
  otpEmailId = "";

  constructor(data?: PartialMessage<RemoveOTPEmailAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveOTPEmailAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "otp_email_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOTPEmailAuthenticatorRequest {
    return new RemoveOTPEmailAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOTPEmailAuthenticatorRequest {
    return new RemoveOTPEmailAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOTPEmailAuthenticatorRequest {
    return new RemoveOTPEmailAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOTPEmailAuthenticatorRequest | PlainMessage<RemoveOTPEmailAuthenticatorRequest> | undefined, b: RemoveOTPEmailAuthenticatorRequest | PlainMessage<RemoveOTPEmailAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOTPEmailAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveOTPEmailAuthenticatorResponse
 */
export class RemoveOTPEmailAuthenticatorResponse extends Message<RemoveOTPEmailAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<RemoveOTPEmailAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveOTPEmailAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOTPEmailAuthenticatorResponse {
    return new RemoveOTPEmailAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOTPEmailAuthenticatorResponse {
    return new RemoveOTPEmailAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOTPEmailAuthenticatorResponse {
    return new RemoveOTPEmailAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOTPEmailAuthenticatorResponse | PlainMessage<RemoveOTPEmailAuthenticatorResponse> | undefined, b: RemoveOTPEmailAuthenticatorResponse | PlainMessage<RemoveOTPEmailAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOTPEmailAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StartIdentityProviderIntentRequest
 */
export class StartIdentityProviderIntentRequest extends Message<StartIdentityProviderIntentRequest> {
  /**
   * ID of an existing identity provider (IDP).
   *
   * @generated from field: string idp_id = 1;
   */
  idpId = "";

  /**
   * @generated from oneof zitadel.user.v3alpha.StartIdentityProviderIntentRequest.content
   */
  content: {
    /**
     * @generated from field: zitadel.user.v3alpha.RedirectURLs urls = 2;
     */
    value: RedirectURLs;
    case: "urls";
  } | {
    /**
     * @generated from field: zitadel.user.v3alpha.LDAPCredentials ldap = 3;
     */
    value: LDAPCredentials;
    case: "ldap";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StartIdentityProviderIntentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StartIdentityProviderIntentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "urls", kind: "message", T: RedirectURLs, oneof: "content" },
    { no: 3, name: "ldap", kind: "message", T: LDAPCredentials, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartIdentityProviderIntentRequest {
    return new StartIdentityProviderIntentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartIdentityProviderIntentRequest {
    return new StartIdentityProviderIntentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartIdentityProviderIntentRequest {
    return new StartIdentityProviderIntentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartIdentityProviderIntentRequest | PlainMessage<StartIdentityProviderIntentRequest> | undefined, b: StartIdentityProviderIntentRequest | PlainMessage<StartIdentityProviderIntentRequest> | undefined): boolean {
    return proto3.util.equals(StartIdentityProviderIntentRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StartIdentityProviderIntentResponse
 */
export class StartIdentityProviderIntentResponse extends Message<StartIdentityProviderIntentResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * the next step to take in the idp intent flow.
   *
   * @generated from oneof zitadel.user.v3alpha.StartIdentityProviderIntentResponse.next_step
   */
  nextStep: {
    /**
     * The authentication URL to which the client should redirect.
     *
     * @generated from field: string auth_url = 2;
     */
    value: string;
    case: "authUrl";
  } | {
    /**
     * The Start Intent directly succeeded and returned the IDP Intent.
     * Further information can be retrieved by using the retrieve identity provider intent request.
     *
     * @generated from field: zitadel.user.v3alpha.IdentityProviderIntent idp_intent = 3;
     */
    value: IdentityProviderIntent;
    case: "idpIntent";
  } | {
    /**
     * The HTML form with the embedded POST call information to render and execute.
     *
     * @generated from field: bytes post_form = 4;
     */
    value: Uint8Array;
    case: "postForm";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StartIdentityProviderIntentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StartIdentityProviderIntentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "auth_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "next_step" },
    { no: 3, name: "idp_intent", kind: "message", T: IdentityProviderIntent, oneof: "next_step" },
    { no: 4, name: "post_form", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "next_step" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartIdentityProviderIntentResponse {
    return new StartIdentityProviderIntentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartIdentityProviderIntentResponse {
    return new StartIdentityProviderIntentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartIdentityProviderIntentResponse {
    return new StartIdentityProviderIntentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartIdentityProviderIntentResponse | PlainMessage<StartIdentityProviderIntentResponse> | undefined, b: StartIdentityProviderIntentResponse | PlainMessage<StartIdentityProviderIntentResponse> | undefined): boolean {
    return proto3.util.equals(StartIdentityProviderIntentResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RetrieveIdentityProviderIntentRequest
 */
export class RetrieveIdentityProviderIntentRequest extends Message<RetrieveIdentityProviderIntentRequest> {
  /**
   * ID of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent.
   *
   * @generated from field: string idp_intent_id = 1;
   */
  idpIntentId = "";

  /**
   * Token of the identity provider (IDP) intent, previously returned on the success response of the start identity provider intent.
   *
   * @generated from field: string idp_intent_token = 2;
   */
  idpIntentToken = "";

  constructor(data?: PartialMessage<RetrieveIdentityProviderIntentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RetrieveIdentityProviderIntentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idp_intent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_intent_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveIdentityProviderIntentRequest {
    return new RetrieveIdentityProviderIntentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveIdentityProviderIntentRequest {
    return new RetrieveIdentityProviderIntentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveIdentityProviderIntentRequest {
    return new RetrieveIdentityProviderIntentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveIdentityProviderIntentRequest | PlainMessage<RetrieveIdentityProviderIntentRequest> | undefined, b: RetrieveIdentityProviderIntentRequest | PlainMessage<RetrieveIdentityProviderIntentRequest> | undefined): boolean {
    return proto3.util.equals(RetrieveIdentityProviderIntentRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RetrieveIdentityProviderIntentResponse
 */
export class RetrieveIdentityProviderIntentResponse extends Message<RetrieveIdentityProviderIntentResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  /**
   * Information returned by the identity provider (IDP) such as the identification of the user
   * and detailed / profile information.
   *
   * @generated from field: zitadel.user.v3alpha.IDPInformation idp_information = 2;
   */
  idpInformation?: IDPInformation;

  /**
   * If the user was already federated and linked to a ZITADEL user, it's id will be returned.
   *
   * @generated from field: optional string user_id = 3;
   */
  userId?: string;

  constructor(data?: PartialMessage<RetrieveIdentityProviderIntentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RetrieveIdentityProviderIntentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
    { no: 2, name: "idp_information", kind: "message", T: IDPInformation },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveIdentityProviderIntentResponse {
    return new RetrieveIdentityProviderIntentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveIdentityProviderIntentResponse {
    return new RetrieveIdentityProviderIntentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveIdentityProviderIntentResponse {
    return new RetrieveIdentityProviderIntentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveIdentityProviderIntentResponse | PlainMessage<RetrieveIdentityProviderIntentResponse> | undefined, b: RetrieveIdentityProviderIntentResponse | PlainMessage<RetrieveIdentityProviderIntentResponse> | undefined): boolean {
    return proto3.util.equals(RetrieveIdentityProviderIntentResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddIDPAuthenticatorRequest
 */
export class AddIDPAuthenticatorRequest extends Message<AddIDPAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: zitadel.user.v3alpha.IDPAuthenticator idp_authenticator = 2;
   */
  idpAuthenticator?: IDPAuthenticator;

  constructor(data?: PartialMessage<AddIDPAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddIDPAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_authenticator", kind: "message", T: IDPAuthenticator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddIDPAuthenticatorRequest {
    return new AddIDPAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddIDPAuthenticatorRequest {
    return new AddIDPAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddIDPAuthenticatorRequest {
    return new AddIDPAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddIDPAuthenticatorRequest | PlainMessage<AddIDPAuthenticatorRequest> | undefined, b: AddIDPAuthenticatorRequest | PlainMessage<AddIDPAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(AddIDPAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AddIDPAuthenticatorResponse
 */
export class AddIDPAuthenticatorResponse extends Message<AddIDPAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<AddIDPAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AddIDPAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddIDPAuthenticatorResponse {
    return new AddIDPAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddIDPAuthenticatorResponse {
    return new AddIDPAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddIDPAuthenticatorResponse {
    return new AddIDPAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddIDPAuthenticatorResponse | PlainMessage<AddIDPAuthenticatorResponse> | undefined, b: AddIDPAuthenticatorResponse | PlainMessage<AddIDPAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(AddIDPAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveIDPAuthenticatorRequest
 */
export class RemoveIDPAuthenticatorRequest extends Message<RemoveIDPAuthenticatorRequest> {
  /**
   * unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * unique identifier of the identity provider (IDP) authenticator.
   *
   * @generated from field: string idp_id = 2;
   */
  idpId = "";

  constructor(data?: PartialMessage<RemoveIDPAuthenticatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveIDPAuthenticatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idp_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveIDPAuthenticatorRequest {
    return new RemoveIDPAuthenticatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveIDPAuthenticatorRequest {
    return new RemoveIDPAuthenticatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveIDPAuthenticatorRequest {
    return new RemoveIDPAuthenticatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveIDPAuthenticatorRequest | PlainMessage<RemoveIDPAuthenticatorRequest> | undefined, b: RemoveIDPAuthenticatorRequest | PlainMessage<RemoveIDPAuthenticatorRequest> | undefined): boolean {
    return proto3.util.equals(RemoveIDPAuthenticatorRequest, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.RemoveIDPAuthenticatorResponse
 */
export class RemoveIDPAuthenticatorResponse extends Message<RemoveIDPAuthenticatorResponse> {
  /**
   * @generated from field: zitadel.object.v2beta.Details details = 1;
   */
  details?: Details;

  constructor(data?: PartialMessage<RemoveIDPAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.RemoveIDPAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "details", kind: "message", T: Details },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveIDPAuthenticatorResponse {
    return new RemoveIDPAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveIDPAuthenticatorResponse {
    return new RemoveIDPAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveIDPAuthenticatorResponse {
    return new RemoveIDPAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveIDPAuthenticatorResponse | PlainMessage<RemoveIDPAuthenticatorResponse> | undefined, b: RemoveIDPAuthenticatorResponse | PlainMessage<RemoveIDPAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(RemoveIDPAuthenticatorResponse, a, b);
  }
}

