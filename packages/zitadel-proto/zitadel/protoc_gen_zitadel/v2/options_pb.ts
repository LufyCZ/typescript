// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/protoc_gen_zitadel/v2/options.proto (package zitadel.protoc_gen_zitadel.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, MethodOptions, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message zitadel.protoc_gen_zitadel.v2.Options
 */
export class Options extends Message<Options> {
  /**
   * @generated from field: zitadel.protoc_gen_zitadel.v2.AuthOption auth_option = 1;
   */
  authOption?: AuthOption;

  /**
   * @generated from field: zitadel.protoc_gen_zitadel.v2.CustomHTTPResponse http_response = 2;
   */
  httpResponse?: CustomHTTPResponse;

  constructor(data?: PartialMessage<Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.protoc_gen_zitadel.v2.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_option", kind: "message", T: AuthOption },
    { no: 2, name: "http_response", kind: "message", T: CustomHTTPResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Options {
    return new Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Options {
    return new Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Options {
    return new Options().fromJsonString(jsonString, options);
  }

  static equals(a: Options | PlainMessage<Options> | undefined, b: Options | PlainMessage<Options> | undefined): boolean {
    return proto3.util.equals(Options, a, b);
  }
}

/**
 * @generated from message zitadel.protoc_gen_zitadel.v2.AuthOption
 */
export class AuthOption extends Message<AuthOption> {
  /**
   * @generated from field: string permission = 1;
   */
  permission = "";

  /**
   * @generated from field: string org_field = 3;
   */
  orgField = "";

  constructor(data?: PartialMessage<AuthOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.protoc_gen_zitadel.v2.AuthOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "org_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthOption {
    return new AuthOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthOption {
    return new AuthOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthOption {
    return new AuthOption().fromJsonString(jsonString, options);
  }

  static equals(a: AuthOption | PlainMessage<AuthOption> | undefined, b: AuthOption | PlainMessage<AuthOption> | undefined): boolean {
    return proto3.util.equals(AuthOption, a, b);
  }
}

/**
 * @generated from message zitadel.protoc_gen_zitadel.v2.CustomHTTPResponse
 */
export class CustomHTTPResponse extends Message<CustomHTTPResponse> {
  /**
   * @generated from field: int32 success_code = 1;
   */
  successCode = 0;

  constructor(data?: PartialMessage<CustomHTTPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.protoc_gen_zitadel.v2.CustomHTTPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomHTTPResponse {
    return new CustomHTTPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomHTTPResponse {
    return new CustomHTTPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomHTTPResponse {
    return new CustomHTTPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomHTTPResponse | PlainMessage<CustomHTTPResponse> | undefined, b: CustomHTTPResponse | PlainMessage<CustomHTTPResponse> | undefined): boolean {
    return proto3.util.equals(CustomHTTPResponse, a, b);
  }
}

/**
 * @generated from extension: zitadel.protoc_gen_zitadel.v2.Options options = 50001;
 */
export const options = proto3.makeExtension<MethodOptions, Options>(
  "zitadel.protoc_gen_zitadel.v2.options", 
  MethodOptions, 
  () => ({ no: 50001, kind: "message", T: Options }),
);

