// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/member.proto (package zitadel.member.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";
import { Type } from "./user_pb.js";

/**
 * @generated from message zitadel.member.v1.Member
 */
export class Member extends Message<Member> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: repeated string roles = 3;
   */
  roles: string[] = [];

  /**
   * @generated from field: string preferred_login_name = 4;
   */
  preferredLoginName = "";

  /**
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * @generated from field: string first_name = 6;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 7;
   */
  lastName = "";

  /**
   * @generated from field: string display_name = 8;
   */
  displayName = "";

  /**
   * @generated from field: string avatar_url = 9;
   */
  avatarUrl = "";

  /**
   * @generated from field: zitadel.user.v1.Type user_type = 10;
   */
  userType = Type.UNSPECIFIED;

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.member.v1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "preferred_login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "user_type", kind: "enum", T: proto3.getEnumType(Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message zitadel.member.v1.SearchQuery
 */
export class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.member.v1.SearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.member.v1.FirstNameQuery first_name_query = 1;
     */
    value: FirstNameQuery;
    case: "firstNameQuery";
  } | {
    /**
     * @generated from field: zitadel.member.v1.LastNameQuery last_name_query = 2;
     */
    value: LastNameQuery;
    case: "lastNameQuery";
  } | {
    /**
     * @generated from field: zitadel.member.v1.EmailQuery email_query = 3;
     */
    value: EmailQuery;
    case: "emailQuery";
  } | {
    /**
     * @generated from field: zitadel.member.v1.UserIDQuery user_id_query = 4;
     */
    value: UserIDQuery;
    case: "userIdQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.member.v1.SearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name_query", kind: "message", T: FirstNameQuery, oneof: "query" },
    { no: 2, name: "last_name_query", kind: "message", T: LastNameQuery, oneof: "query" },
    { no: 3, name: "email_query", kind: "message", T: EmailQuery, oneof: "query" },
    { no: 4, name: "user_id_query", kind: "message", T: UserIDQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery {
    return new SearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean {
    return proto3.util.equals(SearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.member.v1.FirstNameQuery
 */
export class FirstNameQuery extends Message<FirstNameQuery> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<FirstNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.member.v1.FirstNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FirstNameQuery {
    return new FirstNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FirstNameQuery {
    return new FirstNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FirstNameQuery {
    return new FirstNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FirstNameQuery | PlainMessage<FirstNameQuery> | undefined, b: FirstNameQuery | PlainMessage<FirstNameQuery> | undefined): boolean {
    return proto3.util.equals(FirstNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.member.v1.LastNameQuery
 */
export class LastNameQuery extends Message<LastNameQuery> {
  /**
   * @generated from field: string last_name = 1;
   */
  lastName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<LastNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.member.v1.LastNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastNameQuery {
    return new LastNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastNameQuery {
    return new LastNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastNameQuery {
    return new LastNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: LastNameQuery | PlainMessage<LastNameQuery> | undefined, b: LastNameQuery | PlainMessage<LastNameQuery> | undefined): boolean {
    return proto3.util.equals(LastNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.member.v1.EmailQuery
 */
export class EmailQuery extends Message<EmailQuery> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<EmailQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.member.v1.EmailQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailQuery {
    return new EmailQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailQuery {
    return new EmailQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailQuery {
    return new EmailQuery().fromJsonString(jsonString, options);
  }

  static equals(a: EmailQuery | PlainMessage<EmailQuery> | undefined, b: EmailQuery | PlainMessage<EmailQuery> | undefined): boolean {
    return proto3.util.equals(EmailQuery, a, b);
  }
}

/**
 * @generated from message zitadel.member.v1.UserIDQuery
 */
export class UserIDQuery extends Message<UserIDQuery> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<UserIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.member.v1.UserIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserIDQuery {
    return new UserIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserIDQuery {
    return new UserIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserIDQuery {
    return new UserIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserIDQuery | PlainMessage<UserIDQuery> | undefined, b: UserIDQuery | PlainMessage<UserIDQuery> | undefined): boolean {
    return proto3.util.equals(UserIDQuery, a, b);
  }
}

