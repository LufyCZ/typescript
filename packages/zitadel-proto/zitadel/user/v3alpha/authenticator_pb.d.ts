// @generated by protoc-gen-es v1.10.0
// @generated from file zitadel/user/v3alpha/authenticator.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Details } from "../../object/v2beta/object_pb.js";

/**
 * @generated from enum zitadel.user.v3alpha.AuthNKeyType
 */
export declare enum AuthNKeyType {
  /**
   * @generated from enum value: AUTHN_KEY_TYPE_UNSPECIFIED = 0;
   */
  AUTHN_KEY_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTHN_KEY_TYPE_JSON = 1;
   */
  AUTHN_KEY_TYPE_JSON = 1,
}

/**
 * @generated from enum zitadel.user.v3alpha.WebAuthNAuthenticatorType
 */
export declare enum WebAuthNAuthenticatorType {
  /**
   * @generated from enum value: WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED = 0;
   */
  WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED = 0,

  /**
   * @generated from enum value: WEB_AUTH_N_AUTHENTICATOR_PLATFORM = 1;
   */
  WEB_AUTH_N_AUTHENTICATOR_PLATFORM = 1,

  /**
   * @generated from enum value: WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM = 2;
   */
  WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM = 2,
}

/**
 * @generated from message zitadel.user.v3alpha.Authenticators
 */
export declare class Authenticators extends Message<Authenticators> {
  /**
   * All of the user's usernames, which will be used for identification during authentication.
   *
   * @generated from field: repeated zitadel.user.v3alpha.Username usernames = 1;
   */
  usernames: Username[];

  /**
   * If the user has set a password, the time it was last changed will be returned.
   *
   * @generated from field: zitadel.user.v3alpha.Password password = 2;
   */
  password?: Password;

  /**
   * Meta information about the user's WebAuthN authenticators.
   *
   * @generated from field: repeated zitadel.user.v3alpha.WebAuthN web_auth_n = 3;
   */
  webAuthN: WebAuthN[];

  /**
   * A list of the user's time-based one-time-password (TOTP) authenticators,
   * incl. the name for identification.
   *
   * @generated from field: repeated zitadel.user.v3alpha.TOTP totps = 4;
   */
  totps: TOTP[];

  /**
   * A list of the user's one-time-password (OTP) SMS authenticators.
   *
   * @generated from field: repeated zitadel.user.v3alpha.OTPSMS otp_sms = 5;
   */
  otpSms: OTPSMS[];

  /**
   * A list of the user's one-time-password (OTP) Email authenticators.
   *
   * @generated from field: repeated zitadel.user.v3alpha.OTPEmail otp_email = 6;
   */
  otpEmail: OTPEmail[];

  /**
   * A list of the user's authentication keys. They can be used to authenticate e.g. by JWT Profile.
   *
   * @generated from field: repeated zitadel.user.v3alpha.AuthenticationKey authentication_keys = 7;
   */
  authenticationKeys: AuthenticationKey[];

  /**
   * A list of the user's linked identity providers (IDPs).
   *
   * @generated from field: repeated zitadel.user.v3alpha.IdentityProvider identity_providers = 8;
   */
  identityProviders: IdentityProvider[];

  constructor(data?: PartialMessage<Authenticators>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.Authenticators";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authenticators;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authenticators;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authenticators;

  static equals(a: Authenticators | PlainMessage<Authenticators> | undefined, b: Authenticators | PlainMessage<Authenticators> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.Username
 */
export declare class Username extends Message<Username> {
  /**
   * unique identifier of the username.
   *
   * @generated from field: string username_id = 1;
   */
  usernameId: string;

  /**
   * The user's unique username. It is used for identification during authentication.
   *
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * By default usernames must be unique across all organizations in an instance.
   * This option allow to restrict the uniqueness to the user's own organization.
   * As a result, this username can only be used if the authentication is limited
   * to the corresponding organization.
   *
   * This can be useful if you provide multiple usernames for a single user, where one
   * if specific to your organization, e.g.:
   * - gigi-giraffe@zitadel.com (unique across organizations)
   * - gigi-giraffe (unique only inside the ZITADEL organization)
   *
   * @generated from field: bool is_organization_specific = 3;
   */
  isOrganizationSpecific: boolean;

  constructor(data?: PartialMessage<Username>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.Username";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Username;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Username;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Username;

  static equals(a: Username | PlainMessage<Username> | undefined, b: Username | PlainMessage<Username> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.SetUsername
 */
export declare class SetUsername extends Message<SetUsername> {
  /**
   * Set the user's username. This will be used for identification during authentication.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * By default username must be unique across all organizations in an instance.
   * This option allow to restrict the uniqueness to the user's own organization.
   * As a result, this username can only be used if the authentication is limited
   * to the corresponding organization.
   *
   * This can be useful if you provide multiple usernames for a single user, where one
   * if specific to your organization, e.g.:
   * - gigi-giraffe@zitadel.com (unique across organizations)
   * - gigi-giraffe (unique only inside the ZITADEL organization)
   *
   * @generated from field: bool is_organization_specific = 2;
   */
  isOrganizationSpecific: boolean;

  constructor(data?: PartialMessage<SetUsername>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetUsername";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUsername;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUsername;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUsername;

  static equals(a: SetUsername | PlainMessage<SetUsername> | undefined, b: SetUsername | PlainMessage<SetUsername> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.Password
 */
export declare class Password extends Message<Password> {
  /**
   * States the time the password was last changed.
   *
   * @generated from field: google.protobuf.Timestamp last_changed = 1;
   */
  lastChanged?: Timestamp;

  constructor(data?: PartialMessage<Password>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.Password";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Password;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Password;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Password;

  static equals(a: Password | PlainMessage<Password> | undefined, b: Password | PlainMessage<Password> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.WebAuthN
 */
export declare class WebAuthN extends Message<WebAuthN> {
  /**
   * unique identifier of the WebAuthN authenticator.
   *
   * @generated from field: string web_auth_n_id = 1;
   */
  webAuthNId: string;

  /**
   * Name of the WebAuthN authenticator. This is used for easier identification.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * State whether the WebAuthN registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;

  /**
   * States if the user has been verified during the registration. Authentication with this device
   * will be considered as multi factor authentication (MFA) without the need to check a password
   * (typically known as Passkeys).
   * Without user verification it will be a second factor authentication (2FA), typically done
   * after a password check.
   *
   * More on WebAuthN User Verification: https://www.w3.org/TR/webauthn/#user-verification
   *
   * @generated from field: bool user_verified = 4;
   */
  userVerified: boolean;

  constructor(data?: PartialMessage<WebAuthN>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.WebAuthN";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthN;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthN;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthN;

  static equals(a: WebAuthN | PlainMessage<WebAuthN> | undefined, b: WebAuthN | PlainMessage<WebAuthN> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.OTPSMS
 */
export declare class OTPSMS extends Message<OTPSMS> {
  /**
   * unique identifier of the one-time-password (OTP) SMS authenticator.
   *
   * @generated from field: string otp_sms_id = 1;
   */
  otpSmsId: string;

  /**
   * The phone number used for the OTP SMS authenticator.
   *
   * @generated from field: string phone = 2;
   */
  phone: string;

  /**
   * State whether the OTP SMS registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;

  constructor(data?: PartialMessage<OTPSMS>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.OTPSMS";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OTPSMS;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OTPSMS;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OTPSMS;

  static equals(a: OTPSMS | PlainMessage<OTPSMS> | undefined, b: OTPSMS | PlainMessage<OTPSMS> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.OTPEmail
 */
export declare class OTPEmail extends Message<OTPEmail> {
  /**
   * unique identifier of the one-time-password (OTP) Email authenticator.
   *
   * @generated from field: string otp_email_id = 1;
   */
  otpEmailId: string;

  /**
   * The email address used for the OTP Email authenticator.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * State whether the OTP Email registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;

  constructor(data?: PartialMessage<OTPEmail>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.OTPEmail";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OTPEmail;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OTPEmail;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OTPEmail;

  static equals(a: OTPEmail | PlainMessage<OTPEmail> | undefined, b: OTPEmail | PlainMessage<OTPEmail> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.TOTP
 */
export declare class TOTP extends Message<TOTP> {
  /**
   * unique identifier of the time-based one-time-password (TOTP) authenticator.
   *
   * @generated from field: string totp_id = 1;
   */
  totpId: string;

  /**
   * The name provided during registration. This is used for easier identification.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * State whether the TOTP registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;

  constructor(data?: PartialMessage<TOTP>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.TOTP";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TOTP;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TOTP;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TOTP;

  static equals(a: TOTP | PlainMessage<TOTP> | undefined, b: TOTP | PlainMessage<TOTP> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.AuthenticationKey
 */
export declare class AuthenticationKey extends Message<AuthenticationKey> {
  /**
   * ID is the read-only unique identifier of the authentication key.
   *
   * @generated from field: string authentication_key_id = 1;
   */
  authenticationKeyId: string;

  /**
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  /**
   * the file type of the key
   *
   * @generated from field: zitadel.user.v3alpha.AuthNKeyType type = 3;
   */
  type: AuthNKeyType;

  /**
   * After the expiration date, the key will no longer be usable for authentication.
   *
   * @generated from field: google.protobuf.Timestamp expiration_date = 4;
   */
  expirationDate?: Timestamp;

  constructor(data?: PartialMessage<AuthenticationKey>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.AuthenticationKey";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticationKey;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticationKey;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticationKey;

  static equals(a: AuthenticationKey | PlainMessage<AuthenticationKey> | undefined, b: AuthenticationKey | PlainMessage<AuthenticationKey> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IdentityProvider
 */
export declare class IdentityProvider extends Message<IdentityProvider> {
  /**
   * IDP ID is the read-only unique identifier of the identity provider in ZITADEL.
   *
   * @generated from field: string idp_id = 1;
   */
  idpId: string;

  /**
   * IDP name is the name of the identity provider in ZITADEL.
   *
   * @generated from field: string idp_name = 3;
   */
  idpName: string;

  /**
   * The user ID represents the ID provided by the identity provider.
   * This ID is used to link the user in ZITADEL with the identity provider.
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * The username represents the username provided by the identity provider.
   *
   * @generated from field: string username = 5;
   */
  username: string;

  constructor(data?: PartialMessage<IdentityProvider>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IdentityProvider";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityProvider;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityProvider;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityProvider;

  static equals(a: IdentityProvider | PlainMessage<IdentityProvider> | undefined, b: IdentityProvider | PlainMessage<IdentityProvider> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.SetAuthenticators
 */
export declare class SetAuthenticators extends Message<SetAuthenticators> {
  /**
   * @generated from field: repeated zitadel.user.v3alpha.SetUsername usernames = 1;
   */
  usernames: SetUsername[];

  /**
   * @generated from field: zitadel.user.v3alpha.SetPassword password = 2;
   */
  password?: SetPassword;

  constructor(data?: PartialMessage<SetAuthenticators>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetAuthenticators";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAuthenticators;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAuthenticators;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAuthenticators;

  static equals(a: SetAuthenticators | PlainMessage<SetAuthenticators> | undefined, b: SetAuthenticators | PlainMessage<SetAuthenticators> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.SetPassword
 */
export declare class SetPassword extends Message<SetPassword> {
  /**
   * @generated from oneof zitadel.user.v3alpha.SetPassword.type
   */
  type: {
    /**
     * Provide the plain text password. ZITADEL will take care to store it in a secure way (hash).
     *
     * @generated from field: string password = 1;
     */
    value: string;
    case: "password";
  } | {
    /**
     * Encoded hash of a password in Modular Crypt Format:
     * https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets.
     *
     * @generated from field: string hash = 2;
     */
    value: string;
    case: "hash";
  } | { case: undefined; value?: undefined };

  /**
   * Provide if the user needs to change the password on the next use.
   *
   * @generated from field: bool change_required = 3;
   */
  changeRequired: boolean;

  constructor(data?: PartialMessage<SetPassword>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.SetPassword";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPassword;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPassword;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPassword;

  static equals(a: SetPassword | PlainMessage<SetPassword> | undefined, b: SetPassword | PlainMessage<SetPassword> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.SendPasswordResetEmail
 */
export declare class SendPasswordResetEmail extends Message<SendPasswordResetEmail> {
  /**
   * Optionally set a url_template, which will be used in the password reset mail
   * sent by ZITADEL to guide the user to your password change page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 2;
   */
  urlTemplate?: string;

  constructor(data?: PartialMessage<SendPasswordResetEmail>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.SendPasswordResetEmail";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendPasswordResetEmail;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendPasswordResetEmail;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendPasswordResetEmail;

  static equals(a: SendPasswordResetEmail | PlainMessage<SendPasswordResetEmail> | undefined, b: SendPasswordResetEmail | PlainMessage<SendPasswordResetEmail> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.SendPasswordResetSMS
 */
export declare class SendPasswordResetSMS extends Message<SendPasswordResetSMS> {
  constructor(data?: PartialMessage<SendPasswordResetSMS>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.SendPasswordResetSMS";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendPasswordResetSMS;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendPasswordResetSMS;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendPasswordResetSMS;

  static equals(a: SendPasswordResetSMS | PlainMessage<SendPasswordResetSMS> | undefined, b: SendPasswordResetSMS | PlainMessage<SendPasswordResetSMS> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.ReturnPasswordResetCode
 */
export declare class ReturnPasswordResetCode extends Message<ReturnPasswordResetCode> {
  constructor(data?: PartialMessage<ReturnPasswordResetCode>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.ReturnPasswordResetCode";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnPasswordResetCode;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnPasswordResetCode;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnPasswordResetCode;

  static equals(a: ReturnPasswordResetCode | PlainMessage<ReturnPasswordResetCode> | undefined, b: ReturnPasswordResetCode | PlainMessage<ReturnPasswordResetCode> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.AuthenticatorRegistrationCode
 */
export declare class AuthenticatorRegistrationCode extends Message<AuthenticatorRegistrationCode> {
  /**
   * ID to the one time code generated by ZITADEL.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * one time code generated by ZITADEL.
   *
   * @generated from field: string code = 2;
   */
  code: string;

  constructor(data?: PartialMessage<AuthenticatorRegistrationCode>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.AuthenticatorRegistrationCode";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticatorRegistrationCode;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticatorRegistrationCode;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticatorRegistrationCode;

  static equals(a: AuthenticatorRegistrationCode | PlainMessage<AuthenticatorRegistrationCode> | undefined, b: AuthenticatorRegistrationCode | PlainMessage<AuthenticatorRegistrationCode> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.SendWebAuthNRegistrationLink
 */
export declare class SendWebAuthNRegistrationLink extends Message<SendWebAuthNRegistrationLink> {
  /**
   * Optionally set a url_template, which will be used in the mail sent by ZITADEL
   * to guide the user to your passkey registration page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 1;
   */
  urlTemplate?: string;

  constructor(data?: PartialMessage<SendWebAuthNRegistrationLink>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.SendWebAuthNRegistrationLink";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendWebAuthNRegistrationLink;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendWebAuthNRegistrationLink;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendWebAuthNRegistrationLink;

  static equals(a: SendWebAuthNRegistrationLink | PlainMessage<SendWebAuthNRegistrationLink> | undefined, b: SendWebAuthNRegistrationLink | PlainMessage<SendWebAuthNRegistrationLink> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.ReturnWebAuthNRegistrationCode
 */
export declare class ReturnWebAuthNRegistrationCode extends Message<ReturnWebAuthNRegistrationCode> {
  constructor(data?: PartialMessage<ReturnWebAuthNRegistrationCode>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.ReturnWebAuthNRegistrationCode";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnWebAuthNRegistrationCode;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnWebAuthNRegistrationCode;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnWebAuthNRegistrationCode;

  static equals(a: ReturnWebAuthNRegistrationCode | PlainMessage<ReturnWebAuthNRegistrationCode> | undefined, b: ReturnWebAuthNRegistrationCode | PlainMessage<ReturnWebAuthNRegistrationCode> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.RedirectURLs
 */
export declare class RedirectURLs extends Message<RedirectURLs> {
  /**
   * URL to which the user will be redirected after a successful login.
   *
   * @generated from field: string success_url = 1;
   */
  successUrl: string;

  /**
   * URL to which the user will be redirected after a failed login.
   *
   * @generated from field: string failure_url = 2;
   */
  failureUrl: string;

  constructor(data?: PartialMessage<RedirectURLs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.RedirectURLs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedirectURLs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedirectURLs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedirectURLs;

  static equals(a: RedirectURLs | PlainMessage<RedirectURLs> | undefined, b: RedirectURLs | PlainMessage<RedirectURLs> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.LDAPCredentials
 */
export declare class LDAPCredentials extends Message<LDAPCredentials> {
  /**
   * Username used to login through LDAP.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Password used to login through LDAP.
   *
   * @generated from field: string password = 2;
   */
  password: string;

  constructor(data?: PartialMessage<LDAPCredentials>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.LDAPCredentials";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LDAPCredentials;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LDAPCredentials;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LDAPCredentials;

  static equals(a: LDAPCredentials | PlainMessage<LDAPCredentials> | undefined, b: LDAPCredentials | PlainMessage<LDAPCredentials> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IdentityProviderIntent
 */
export declare class IdentityProviderIntent extends Message<IdentityProviderIntent> {
  /**
   * ID of the identity provider (IDP) intent.
   *
   * @generated from field: string idp_intent_id = 1;
   */
  idpIntentId: string;

  /**
   * Token of the identity provider (IDP) intent.
   *
   * @generated from field: string idp_intent_token = 2;
   */
  idpIntentToken: string;

  /**
   * If the user was already federated and linked to a ZITADEL user, it's id will be returned.
   *
   * @generated from field: optional string user_id = 3;
   */
  userId?: string;

  constructor(data?: PartialMessage<IdentityProviderIntent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IdentityProviderIntent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityProviderIntent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityProviderIntent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityProviderIntent;

  static equals(a: IdentityProviderIntent | PlainMessage<IdentityProviderIntent> | undefined, b: IdentityProviderIntent | PlainMessage<IdentityProviderIntent> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IDPInformation
 */
export declare class IDPInformation extends Message<IDPInformation> {
  /**
   * ID of the identity provider.
   *
   * @generated from field: string idp_id = 1;
   */
  idpId: string;

  /**
   * ID of the user provided by the identity provider.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Username of the user provided by the identity provider.
   *
   * @generated from field: string user_name = 3;
   */
  userName: string;

  /**
   * Complete information returned by the identity provider.
   *
   * @generated from field: google.protobuf.Struct raw_information = 4;
   */
  rawInformation?: Struct;

  /**
   * additional access information returned by the identity provider.
   *
   * @generated from oneof zitadel.user.v3alpha.IDPInformation.access
   */
  access: {
    /**
     * OAuth/OIDC access (and id_token) returned by the identity provider.
     *
     * @generated from field: zitadel.user.v3alpha.IDPOAuthAccessInformation oauth = 5;
     */
    value: IDPOAuthAccessInformation;
    case: "oauth";
  } | {
    /**
     * LDAP entity attributes returned by the identity provider
     *
     * @generated from field: zitadel.user.v3alpha.IDPLDAPAccessInformation ldap = 6;
     */
    value: IDPLDAPAccessInformation;
    case: "ldap";
  } | {
    /**
     * SAMLResponse returned by the identity provider
     *
     * @generated from field: zitadel.user.v3alpha.IDPSAMLAccessInformation saml = 7;
     */
    value: IDPSAMLAccessInformation;
    case: "saml";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<IDPInformation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IDPInformation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPInformation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPInformation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPInformation;

  static equals(a: IDPInformation | PlainMessage<IDPInformation> | undefined, b: IDPInformation | PlainMessage<IDPInformation> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IDPOAuthAccessInformation
 */
export declare class IDPOAuthAccessInformation extends Message<IDPOAuthAccessInformation> {
  /**
   * The access_token returned by the identity provider.
   *
   * @generated from field: string access_token = 1;
   */
  accessToken: string;

  /**
   * In case the provider returned an id_token.
   *
   * @generated from field: optional string id_token = 2;
   */
  idToken?: string;

  constructor(data?: PartialMessage<IDPOAuthAccessInformation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IDPOAuthAccessInformation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPOAuthAccessInformation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPOAuthAccessInformation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPOAuthAccessInformation;

  static equals(a: IDPOAuthAccessInformation | PlainMessage<IDPOAuthAccessInformation> | undefined, b: IDPOAuthAccessInformation | PlainMessage<IDPOAuthAccessInformation> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IDPLDAPAccessInformation
 */
export declare class IDPLDAPAccessInformation extends Message<IDPLDAPAccessInformation> {
  /**
   * The attributes of the user returned by the identity provider.
   *
   * @generated from field: google.protobuf.Struct attributes = 1;
   */
  attributes?: Struct;

  constructor(data?: PartialMessage<IDPLDAPAccessInformation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IDPLDAPAccessInformation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPLDAPAccessInformation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPLDAPAccessInformation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPLDAPAccessInformation;

  static equals(a: IDPLDAPAccessInformation | PlainMessage<IDPLDAPAccessInformation> | undefined, b: IDPLDAPAccessInformation | PlainMessage<IDPLDAPAccessInformation> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IDPSAMLAccessInformation
 */
export declare class IDPSAMLAccessInformation extends Message<IDPSAMLAccessInformation> {
  /**
   * The SAML assertion returned by the identity provider.
   *
   * @generated from field: bytes assertion = 1;
   */
  assertion: Uint8Array;

  constructor(data?: PartialMessage<IDPSAMLAccessInformation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IDPSAMLAccessInformation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPSAMLAccessInformation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPSAMLAccessInformation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPSAMLAccessInformation;

  static equals(a: IDPSAMLAccessInformation | PlainMessage<IDPSAMLAccessInformation> | undefined, b: IDPSAMLAccessInformation | PlainMessage<IDPSAMLAccessInformation> | undefined): boolean;
}

/**
 * @generated from message zitadel.user.v3alpha.IDPAuthenticator
 */
export declare class IDPAuthenticator extends Message<IDPAuthenticator> {
  /**
   * ID of the identity provider
   *
   * @generated from field: string idp_id = 1;
   */
  idpId: string;

  /**
   * ID of the user provided by the identity provider
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Username of the user provided by the identity provider.
   *
   * @generated from field: string user_name = 3;
   */
  userName: string;

  constructor(data?: PartialMessage<IDPAuthenticator>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v3alpha.IDPAuthenticator";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IDPAuthenticator;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IDPAuthenticator;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IDPAuthenticator;

  static equals(a: IDPAuthenticator | PlainMessage<IDPAuthenticator> | undefined, b: IDPAuthenticator | PlainMessage<IDPAuthenticator> | undefined): boolean;
}

