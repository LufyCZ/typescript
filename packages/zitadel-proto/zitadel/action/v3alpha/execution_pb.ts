// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/action/v3alpha/execution.proto (package zitadel.action.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Details } from "../../object/v2beta/object_pb.js";

/**
 * @generated from message zitadel.action.v3alpha.Execution
 */
export class Execution extends Message<Execution> {
  /**
   * @generated from field: zitadel.action.v3alpha.Condition Condition = 1;
   */
  Condition?: Condition;

  /**
   * Details provide some base information (such as the last change date) of the target.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  /**
   * List of ordered list of targets/includes called during the execution.
   *
   * @generated from field: repeated zitadel.action.v3alpha.ExecutionTargetType targets = 3;
   */
  targets: ExecutionTargetType[] = [];

  constructor(data?: PartialMessage<Execution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.Execution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Condition", kind: "message", T: Condition },
    { no: 2, name: "details", kind: "message", T: Details },
    { no: 3, name: "targets", kind: "message", T: ExecutionTargetType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Execution {
    return new Execution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Execution {
    return new Execution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Execution {
    return new Execution().fromJsonString(jsonString, options);
  }

  static equals(a: Execution | PlainMessage<Execution> | undefined, b: Execution | PlainMessage<Execution> | undefined): boolean {
    return proto3.util.equals(Execution, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ExecutionTargetType
 */
export class ExecutionTargetType extends Message<ExecutionTargetType> {
  /**
   * @generated from oneof zitadel.action.v3alpha.ExecutionTargetType.type
   */
  type: {
    /**
     * Unique identifier of existing target to call.
     *
     * @generated from field: string target = 1;
     */
    value: string;
    case: "target";
  } | {
    /**
     * Unique identifier of existing execution to include targets of.
     *
     * @generated from field: zitadel.action.v3alpha.Condition include = 2;
     */
    value: Condition;
    case: "include";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ExecutionTargetType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ExecutionTargetType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
    { no: 2, name: "include", kind: "message", T: Condition, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionTargetType {
    return new ExecutionTargetType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionTargetType {
    return new ExecutionTargetType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionTargetType {
    return new ExecutionTargetType().fromJsonString(jsonString, options);
  }

  static equals(a: ExecutionTargetType | PlainMessage<ExecutionTargetType> | undefined, b: ExecutionTargetType | PlainMessage<ExecutionTargetType> | undefined): boolean {
    return proto3.util.equals(ExecutionTargetType, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.Condition
 */
export class Condition extends Message<Condition> {
  /**
   * Condition-types under which conditions the execution should happen, only one possible.
   *
   * @generated from oneof zitadel.action.v3alpha.Condition.condition_type
   */
  conditionType: {
    /**
     * Condition-type to execute if a request on the defined API point happens.
     *
     * @generated from field: zitadel.action.v3alpha.RequestExecution request = 1;
     */
    value: RequestExecution;
    case: "request";
  } | {
    /**
     * Condition-type to execute on response if a request on the defined API point happens.
     *
     * @generated from field: zitadel.action.v3alpha.ResponseExecution response = 2;
     */
    value: ResponseExecution;
    case: "response";
  } | {
    /**
     * Condition-type to execute if function is used, replaces actions v1.
     *
     * @generated from field: zitadel.action.v3alpha.FunctionExecution function = 3;
     */
    value: FunctionExecution;
    case: "function";
  } | {
    /**
     * Condition-type to execute if an event is created in the system.
     *
     * @generated from field: zitadel.action.v3alpha.EventExecution event = 4;
     */
    value: EventExecution;
    case: "event";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Condition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.Condition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: RequestExecution, oneof: "condition_type" },
    { no: 2, name: "response", kind: "message", T: ResponseExecution, oneof: "condition_type" },
    { no: 3, name: "function", kind: "message", T: FunctionExecution, oneof: "condition_type" },
    { no: 4, name: "event", kind: "message", T: EventExecution, oneof: "condition_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition {
    return new Condition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition {
    return new Condition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition {
    return new Condition().fromJsonString(jsonString, options);
  }

  static equals(a: Condition | PlainMessage<Condition> | undefined, b: Condition | PlainMessage<Condition> | undefined): boolean {
    return proto3.util.equals(Condition, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.RequestExecution
 */
export class RequestExecution extends Message<RequestExecution> {
  /**
   * Condition for the request execution, only one possible.
   *
   * @generated from oneof zitadel.action.v3alpha.RequestExecution.condition
   */
  condition: {
    /**
     * GRPC-method as condition.
     *
     * @generated from field: string method = 1;
     */
    value: string;
    case: "method";
  } | {
    /**
     * GRPC-service as condition.
     *
     * @generated from field: string service = 2;
     */
    value: string;
    case: "service";
  } | {
    /**
     * All calls to any available service and endpoint as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RequestExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.RequestExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "condition" },
    { no: 2, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "condition" },
    { no: 3, name: "all", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "condition" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestExecution {
    return new RequestExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestExecution {
    return new RequestExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestExecution {
    return new RequestExecution().fromJsonString(jsonString, options);
  }

  static equals(a: RequestExecution | PlainMessage<RequestExecution> | undefined, b: RequestExecution | PlainMessage<RequestExecution> | undefined): boolean {
    return proto3.util.equals(RequestExecution, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.ResponseExecution
 */
export class ResponseExecution extends Message<ResponseExecution> {
  /**
   * Condition for the response execution, only one possible.
   *
   * @generated from oneof zitadel.action.v3alpha.ResponseExecution.condition
   */
  condition: {
    /**
     * GRPC-method as condition.
     *
     * @generated from field: string method = 1;
     */
    value: string;
    case: "method";
  } | {
    /**
     * GRPC-service as condition.
     *
     * @generated from field: string service = 2;
     */
    value: string;
    case: "service";
  } | {
    /**
     * All calls to any available service and endpoint as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ResponseExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.ResponseExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "condition" },
    { no: 2, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "condition" },
    { no: 3, name: "all", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "condition" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseExecution {
    return new ResponseExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseExecution {
    return new ResponseExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseExecution {
    return new ResponseExecution().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseExecution | PlainMessage<ResponseExecution> | undefined, b: ResponseExecution | PlainMessage<ResponseExecution> | undefined): boolean {
    return proto3.util.equals(ResponseExecution, a, b);
  }
}

/**
 * Executed on the specified function
 *
 * @generated from message zitadel.action.v3alpha.FunctionExecution
 */
export class FunctionExecution extends Message<FunctionExecution> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<FunctionExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.FunctionExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionExecution {
    return new FunctionExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionExecution {
    return new FunctionExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionExecution {
    return new FunctionExecution().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionExecution | PlainMessage<FunctionExecution> | undefined, b: FunctionExecution | PlainMessage<FunctionExecution> | undefined): boolean {
    return proto3.util.equals(FunctionExecution, a, b);
  }
}

/**
 * @generated from message zitadel.action.v3alpha.EventExecution
 */
export class EventExecution extends Message<EventExecution> {
  /**
   * Condition for the event execution, only one possible.
   *
   * @generated from oneof zitadel.action.v3alpha.EventExecution.condition
   */
  condition: {
    /**
     * Event name as condition.
     *
     * @generated from field: string event = 1;
     */
    value: string;
    case: "event";
  } | {
    /**
     * Event group as condition, all events under this group.
     *
     * @generated from field: string group = 2;
     */
    value: string;
    case: "group";
  } | {
    /**
     * all events as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EventExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.action.v3alpha.EventExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "condition" },
    { no: 2, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "condition" },
    { no: 3, name: "all", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "condition" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecution {
    return new EventExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecution {
    return new EventExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecution {
    return new EventExecution().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecution | PlainMessage<EventExecution> | undefined, b: EventExecution | PlainMessage<EventExecution> | undefined): boolean {
    return proto3.util.equals(EventExecution, a, b);
  }
}

