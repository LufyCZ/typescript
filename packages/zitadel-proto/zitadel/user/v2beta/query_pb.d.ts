// @generated by protoc-gen-es v1.9.0
// @generated from file zitadel/user/v2beta/query.proto (package zitadel.user.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TextQueryMethod } from "../../object/v2beta/object_pb.js";
import type { UserState } from "./user_pb.js";

/**
 * @generated from enum zitadel.user.v2beta.Type
 */
export declare enum Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * @generated from enum value: TYPE_MACHINE = 2;
   */
  MACHINE = 2,
}

/**
 * @generated from enum zitadel.user.v2beta.UserFieldName
 */
export declare enum UserFieldName {
  /**
   * @generated from enum value: USER_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_FIELD_NAME_USER_NAME = 1;
   */
  USER_NAME = 1,

  /**
   * @generated from enum value: USER_FIELD_NAME_FIRST_NAME = 2;
   */
  FIRST_NAME = 2,

  /**
   * @generated from enum value: USER_FIELD_NAME_LAST_NAME = 3;
   */
  LAST_NAME = 3,

  /**
   * @generated from enum value: USER_FIELD_NAME_NICK_NAME = 4;
   */
  NICK_NAME = 4,

  /**
   * @generated from enum value: USER_FIELD_NAME_DISPLAY_NAME = 5;
   */
  DISPLAY_NAME = 5,

  /**
   * @generated from enum value: USER_FIELD_NAME_EMAIL = 6;
   */
  EMAIL = 6,

  /**
   * @generated from enum value: USER_FIELD_NAME_STATE = 7;
   */
  STATE = 7,

  /**
   * @generated from enum value: USER_FIELD_NAME_TYPE = 8;
   */
  TYPE = 8,

  /**
   * @generated from enum value: USER_FIELD_NAME_CREATION_DATE = 9;
   */
  CREATION_DATE = 9,
}

/**
 * @generated from message zitadel.user.v2beta.SearchQuery
 */
export declare class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.user.v2beta.SearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.user.v2beta.UserNameQuery user_name_query = 1;
     */
    value: UserNameQuery;
    case: "userNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.FirstNameQuery first_name_query = 2;
     */
    value: FirstNameQuery;
    case: "firstNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.LastNameQuery last_name_query = 3;
     */
    value: LastNameQuery;
    case: "lastNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.NickNameQuery nick_name_query = 4;
     */
    value: NickNameQuery;
    case: "nickNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.DisplayNameQuery display_name_query = 5;
     */
    value: DisplayNameQuery;
    case: "displayNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.EmailQuery email_query = 6;
     */
    value: EmailQuery;
    case: "emailQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.StateQuery state_query = 7;
     */
    value: StateQuery;
    case: "stateQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.TypeQuery type_query = 8;
     */
    value: TypeQuery;
    case: "typeQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.LoginNameQuery login_name_query = 9;
     */
    value: LoginNameQuery;
    case: "loginNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.InUserIDQuery in_user_ids_query = 10;
     */
    value: InUserIDQuery;
    case: "inUserIdsQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.OrQuery or_query = 11;
     */
    value: OrQuery;
    case: "orQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.AndQuery and_query = 12;
     */
    value: AndQuery;
    case: "andQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.NotQuery not_query = 13;
     */
    value: NotQuery;
    case: "notQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.InUserEmailsQuery in_user_emails_query = 14;
     */
    value: InUserEmailsQuery;
    case: "inUserEmailsQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.OrganizationIdQuery organization_id_query = 15;
     */
    value: OrganizationIdQuery;
    case: "organizationIdQuery";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SearchQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.SearchQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery;

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean;
}

/**
 * Connect multiple sub-condition with and OR operator.
 *
 * @generated from message zitadel.user.v2beta.OrQuery
 */
export declare class OrQuery extends Message<OrQuery> {
  /**
   * @generated from field: repeated zitadel.user.v2beta.SearchQuery queries = 1;
   */
  queries: SearchQuery[];

  constructor(data?: PartialMessage<OrQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.OrQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrQuery;

  static equals(a: OrQuery | PlainMessage<OrQuery> | undefined, b: OrQuery | PlainMessage<OrQuery> | undefined): boolean;
}

/**
 * Connect multiple sub-condition with and AND operator.
 *
 * @generated from message zitadel.user.v2beta.AndQuery
 */
export declare class AndQuery extends Message<AndQuery> {
  /**
   * @generated from field: repeated zitadel.user.v2beta.SearchQuery queries = 1;
   */
  queries: SearchQuery[];

  constructor(data?: PartialMessage<AndQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.AndQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AndQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AndQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AndQuery;

  static equals(a: AndQuery | PlainMessage<AndQuery> | undefined, b: AndQuery | PlainMessage<AndQuery> | undefined): boolean;
}

/**
 * Negate the sub-condition.
 *
 * @generated from message zitadel.user.v2beta.NotQuery
 */
export declare class NotQuery extends Message<NotQuery> {
  /**
   * @generated from field: zitadel.user.v2beta.SearchQuery query = 1;
   */
  query?: SearchQuery;

  constructor(data?: PartialMessage<NotQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.NotQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotQuery;

  static equals(a: NotQuery | PlainMessage<NotQuery> | undefined, b: NotQuery | PlainMessage<NotQuery> | undefined): boolean;
}

/**
 * Query for users with ID in list of IDs.
 *
 * @generated from message zitadel.user.v2beta.InUserIDQuery
 */
export declare class InUserIDQuery extends Message<InUserIDQuery> {
  /**
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[];

  constructor(data?: PartialMessage<InUserIDQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.InUserIDQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InUserIDQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InUserIDQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InUserIDQuery;

  static equals(a: InUserIDQuery | PlainMessage<InUserIDQuery> | undefined, b: InUserIDQuery | PlainMessage<InUserIDQuery> | undefined): boolean;
}

/**
 * Query for users with a specific user name.
 *
 * @generated from message zitadel.user.v2beta.UserNameQuery
 */
export declare class UserNameQuery extends Message<UserNameQuery> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<UserNameQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.UserNameQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserNameQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserNameQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserNameQuery;

  static equals(a: UserNameQuery | PlainMessage<UserNameQuery> | undefined, b: UserNameQuery | PlainMessage<UserNameQuery> | undefined): boolean;
}

/**
 * Query for users with a specific first name.
 *
 * @generated from message zitadel.user.v2beta.FirstNameQuery
 */
export declare class FirstNameQuery extends Message<FirstNameQuery> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<FirstNameQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.FirstNameQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FirstNameQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FirstNameQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FirstNameQuery;

  static equals(a: FirstNameQuery | PlainMessage<FirstNameQuery> | undefined, b: FirstNameQuery | PlainMessage<FirstNameQuery> | undefined): boolean;
}

/**
 * Query for users with a specific last name.
 *
 * @generated from message zitadel.user.v2beta.LastNameQuery
 */
export declare class LastNameQuery extends Message<LastNameQuery> {
  /**
   * @generated from field: string last_name = 1;
   */
  lastName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<LastNameQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.LastNameQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastNameQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastNameQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastNameQuery;

  static equals(a: LastNameQuery | PlainMessage<LastNameQuery> | undefined, b: LastNameQuery | PlainMessage<LastNameQuery> | undefined): boolean;
}

/**
 * Query for users with a specific nickname.
 *
 * @generated from message zitadel.user.v2beta.NickNameQuery
 */
export declare class NickNameQuery extends Message<NickNameQuery> {
  /**
   * @generated from field: string nick_name = 1;
   */
  nickName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<NickNameQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.NickNameQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NickNameQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NickNameQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NickNameQuery;

  static equals(a: NickNameQuery | PlainMessage<NickNameQuery> | undefined, b: NickNameQuery | PlainMessage<NickNameQuery> | undefined): boolean;
}

/**
 * Query for users with a specific display name.
 *
 * @generated from message zitadel.user.v2beta.DisplayNameQuery
 */
export declare class DisplayNameQuery extends Message<DisplayNameQuery> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<DisplayNameQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.DisplayNameQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayNameQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayNameQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayNameQuery;

  static equals(a: DisplayNameQuery | PlainMessage<DisplayNameQuery> | undefined, b: DisplayNameQuery | PlainMessage<DisplayNameQuery> | undefined): boolean;
}

/**
 * Query for users with a specific email.
 *
 * @generated from message zitadel.user.v2beta.EmailQuery
 */
export declare class EmailQuery extends Message<EmailQuery> {
  /**
   * @generated from field: string email_address = 1;
   */
  emailAddress: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<EmailQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.EmailQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailQuery;

  static equals(a: EmailQuery | PlainMessage<EmailQuery> | undefined, b: EmailQuery | PlainMessage<EmailQuery> | undefined): boolean;
}

/**
 * Query for users with a specific state.
 *
 * @generated from message zitadel.user.v2beta.LoginNameQuery
 */
export declare class LoginNameQuery extends Message<LoginNameQuery> {
  /**
   * @generated from field: string login_name = 1;
   */
  loginName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;

  constructor(data?: PartialMessage<LoginNameQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.LoginNameQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginNameQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginNameQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginNameQuery;

  static equals(a: LoginNameQuery | PlainMessage<LoginNameQuery> | undefined, b: LoginNameQuery | PlainMessage<LoginNameQuery> | undefined): boolean;
}

/**
 * Query for users with a specific state.
 *
 * @generated from message zitadel.user.v2beta.StateQuery
 */
export declare class StateQuery extends Message<StateQuery> {
  /**
   * @generated from field: zitadel.user.v2beta.UserState state = 1;
   */
  state: UserState;

  constructor(data?: PartialMessage<StateQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.StateQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateQuery;

  static equals(a: StateQuery | PlainMessage<StateQuery> | undefined, b: StateQuery | PlainMessage<StateQuery> | undefined): boolean;
}

/**
 * Query for users with a specific type.
 *
 * @generated from message zitadel.user.v2beta.TypeQuery
 */
export declare class TypeQuery extends Message<TypeQuery> {
  /**
   * @generated from field: zitadel.user.v2beta.Type type = 1;
   */
  type: Type;

  constructor(data?: PartialMessage<TypeQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.TypeQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeQuery;

  static equals(a: TypeQuery | PlainMessage<TypeQuery> | undefined, b: TypeQuery | PlainMessage<TypeQuery> | undefined): boolean;
}

/**
 * Query for users with email in list of emails.
 *
 * @generated from message zitadel.user.v2beta.InUserEmailsQuery
 */
export declare class InUserEmailsQuery extends Message<InUserEmailsQuery> {
  /**
   * @generated from field: repeated string user_emails = 1;
   */
  userEmails: string[];

  constructor(data?: PartialMessage<InUserEmailsQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.InUserEmailsQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InUserEmailsQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InUserEmailsQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InUserEmailsQuery;

  static equals(a: InUserEmailsQuery | PlainMessage<InUserEmailsQuery> | undefined, b: InUserEmailsQuery | PlainMessage<InUserEmailsQuery> | undefined): boolean;
}

/**
 * Query for users under a specific organization as resource owner.
 *
 * @generated from message zitadel.user.v2beta.OrganizationIdQuery
 */
export declare class OrganizationIdQuery extends Message<OrganizationIdQuery> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  constructor(data?: PartialMessage<OrganizationIdQuery>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.user.v2beta.OrganizationIdQuery";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationIdQuery;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationIdQuery;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationIdQuery;

  static equals(a: OrganizationIdQuery | PlainMessage<OrganizationIdQuery> | undefined, b: OrganizationIdQuery | PlainMessage<OrganizationIdQuery> | undefined): boolean;
}

