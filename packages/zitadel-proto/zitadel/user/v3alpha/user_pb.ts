// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/v3alpha/user.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Details } from "../../object/v2beta/object_pb.js";
import { Authenticators } from "./authenticator_pb.js";
import { Contact } from "./communication_pb.js";

/**
 * @generated from enum zitadel.user.v3alpha.State
 */
export enum State {
  /**
   * @generated from enum value: USER_STATE_UNSPECIFIED = 0;
   */
  USER_STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_STATE_ACTIVE = 1;
   */
  USER_STATE_ACTIVE = 1,

  /**
   * @generated from enum value: USER_STATE_INACTIVE = 2;
   */
  USER_STATE_INACTIVE = 2,

  /**
   * @generated from enum value: USER_STATE_DELETED = 3;
   */
  USER_STATE_DELETED = 3,

  /**
   * @generated from enum value: USER_STATE_LOCKED = 4;
   */
  USER_STATE_LOCKED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(State)
proto3.util.setEnumType(State, "zitadel.user.v3alpha.State", [
  { no: 0, name: "USER_STATE_UNSPECIFIED" },
  { no: 1, name: "USER_STATE_ACTIVE" },
  { no: 2, name: "USER_STATE_INACTIVE" },
  { no: 3, name: "USER_STATE_DELETED" },
  { no: 4, name: "USER_STATE_LOCKED" },
]);

/**
 * @generated from message zitadel.user.v3alpha.User
 */
export class User extends Message<User> {
  /**
   * ID is the read-only unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Details provide some base information (such as the last change date) of the user.
   *
   * @generated from field: zitadel.object.v2beta.Details details = 2;
   */
  details?: Details;

  /**
   * The user's authenticators. They are used to identify and authenticate the user
   * during the authentication process.
   *
   * @generated from field: zitadel.user.v3alpha.Authenticators authenticators = 3;
   */
  authenticators?: Authenticators;

  /**
   * Contact information for the user. ZITADEL will use this in case of internal notifications.
   *
   * @generated from field: zitadel.user.v3alpha.Contact contact = 4;
   */
  contact?: Contact;

  /**
   * State of the user.
   *
   * @generated from field: zitadel.user.v3alpha.State state = 5;
   */
  state = State.USER_STATE_UNSPECIFIED;

  /**
   * The schema the user and it's data is based on.
   *
   * @generated from field: zitadel.user.v3alpha.Schema schema = 6;
   */
  schema?: Schema;

  /**
   * The user's data based on the provided schema.
   *
   * @generated from field: google.protobuf.Struct data = 7;
   */
  data?: Struct;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: Details },
    { no: 3, name: "authenticators", kind: "message", T: Authenticators },
    { no: 4, name: "contact", kind: "message", T: Contact },
    { no: 5, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 6, name: "schema", kind: "message", T: Schema },
    { no: 7, name: "data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.Schema
 */
export class Schema extends Message<Schema> {
  /**
   * The unique identifier of the user schema.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The human readable name of the user schema.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * The revision the user's data is based on of the revision.
   *
   * @generated from field: uint32 revision = 3;
   */
  revision = 0;

  constructor(data?: PartialMessage<Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "revision", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schema {
    return new Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schema {
    return new Schema().fromJsonString(jsonString, options);
  }

  static equals(a: Schema | PlainMessage<Schema> | undefined, b: Schema | PlainMessage<Schema> | undefined): boolean {
    return proto3.util.equals(Schema, a, b);
  }
}

