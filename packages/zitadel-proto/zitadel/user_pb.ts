// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user.proto (package zitadel.user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ObjectDetails, TextQueryMethod } from "./object_pb.js";

/**
 * @generated from enum zitadel.user.v1.UserState
 */
export enum UserState {
  /**
   * @generated from enum value: USER_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: USER_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * @generated from enum value: USER_STATE_DELETED = 3;
   */
  DELETED = 3,

  /**
   * @generated from enum value: USER_STATE_LOCKED = 4;
   */
  LOCKED = 4,

  /**
   * @generated from enum value: USER_STATE_SUSPEND = 5;
   */
  SUSPEND = 5,

  /**
   * @generated from enum value: USER_STATE_INITIAL = 6;
   */
  INITIAL = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(UserState)
proto3.util.setEnumType(UserState, "zitadel.user.v1.UserState", [
  { no: 0, name: "USER_STATE_UNSPECIFIED" },
  { no: 1, name: "USER_STATE_ACTIVE" },
  { no: 2, name: "USER_STATE_INACTIVE" },
  { no: 3, name: "USER_STATE_DELETED" },
  { no: 4, name: "USER_STATE_LOCKED" },
  { no: 5, name: "USER_STATE_SUSPEND" },
  { no: 6, name: "USER_STATE_INITIAL" },
]);

/**
 * @generated from enum zitadel.user.v1.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: GENDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GENDER_FEMALE = 1;
   */
  FEMALE = 1,

  /**
   * @generated from enum value: GENDER_MALE = 2;
   */
  MALE = 2,

  /**
   * @generated from enum value: GENDER_DIVERSE = 3;
   */
  DIVERSE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Gender)
proto3.util.setEnumType(Gender, "zitadel.user.v1.Gender", [
  { no: 0, name: "GENDER_UNSPECIFIED" },
  { no: 1, name: "GENDER_FEMALE" },
  { no: 2, name: "GENDER_MALE" },
  { no: 3, name: "GENDER_DIVERSE" },
]);

/**
 * @generated from enum zitadel.user.v1.AccessTokenType
 */
export enum AccessTokenType {
  /**
   * @generated from enum value: ACCESS_TOKEN_TYPE_BEARER = 0;
   */
  BEARER = 0,

  /**
   * @generated from enum value: ACCESS_TOKEN_TYPE_JWT = 1;
   */
  JWT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AccessTokenType)
proto3.util.setEnumType(AccessTokenType, "zitadel.user.v1.AccessTokenType", [
  { no: 0, name: "ACCESS_TOKEN_TYPE_BEARER" },
  { no: 1, name: "ACCESS_TOKEN_TYPE_JWT" },
]);

/**
 * @generated from enum zitadel.user.v1.Type
 */
export enum Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * @generated from enum value: TYPE_MACHINE = 2;
   */
  MACHINE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Type)
proto3.util.setEnumType(Type, "zitadel.user.v1.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_HUMAN" },
  { no: 2, name: "TYPE_MACHINE" },
]);

/**
 * @generated from enum zitadel.user.v1.UserFieldName
 */
export enum UserFieldName {
  /**
   * @generated from enum value: USER_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_FIELD_NAME_USER_NAME = 1;
   */
  USER_NAME = 1,

  /**
   * @generated from enum value: USER_FIELD_NAME_FIRST_NAME = 2;
   */
  FIRST_NAME = 2,

  /**
   * @generated from enum value: USER_FIELD_NAME_LAST_NAME = 3;
   */
  LAST_NAME = 3,

  /**
   * @generated from enum value: USER_FIELD_NAME_NICK_NAME = 4;
   */
  NICK_NAME = 4,

  /**
   * @generated from enum value: USER_FIELD_NAME_DISPLAY_NAME = 5;
   */
  DISPLAY_NAME = 5,

  /**
   * @generated from enum value: USER_FIELD_NAME_EMAIL = 6;
   */
  EMAIL = 6,

  /**
   * @generated from enum value: USER_FIELD_NAME_STATE = 7;
   */
  STATE = 7,

  /**
   * @generated from enum value: USER_FIELD_NAME_TYPE = 8;
   */
  TYPE = 8,

  /**
   * @generated from enum value: USER_FIELD_NAME_CREATION_DATE = 9;
   */
  CREATION_DATE = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(UserFieldName)
proto3.util.setEnumType(UserFieldName, "zitadel.user.v1.UserFieldName", [
  { no: 0, name: "USER_FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "USER_FIELD_NAME_USER_NAME" },
  { no: 2, name: "USER_FIELD_NAME_FIRST_NAME" },
  { no: 3, name: "USER_FIELD_NAME_LAST_NAME" },
  { no: 4, name: "USER_FIELD_NAME_NICK_NAME" },
  { no: 5, name: "USER_FIELD_NAME_DISPLAY_NAME" },
  { no: 6, name: "USER_FIELD_NAME_EMAIL" },
  { no: 7, name: "USER_FIELD_NAME_STATE" },
  { no: 8, name: "USER_FIELD_NAME_TYPE" },
  { no: 9, name: "USER_FIELD_NAME_CREATION_DATE" },
]);

/**
 * @generated from enum zitadel.user.v1.AuthFactorState
 */
export enum AuthFactorState {
  /**
   * @generated from enum value: AUTH_FACTOR_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTH_FACTOR_STATE_NOT_READY = 1;
   */
  NOT_READY = 1,

  /**
   * @generated from enum value: AUTH_FACTOR_STATE_READY = 2;
   */
  READY = 2,

  /**
   * @generated from enum value: AUTH_FACTOR_STATE_REMOVED = 3;
   */
  REMOVED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthFactorState)
proto3.util.setEnumType(AuthFactorState, "zitadel.user.v1.AuthFactorState", [
  { no: 0, name: "AUTH_FACTOR_STATE_UNSPECIFIED" },
  { no: 1, name: "AUTH_FACTOR_STATE_NOT_READY" },
  { no: 2, name: "AUTH_FACTOR_STATE_READY" },
  { no: 3, name: "AUTH_FACTOR_STATE_REMOVED" },
]);

/**
 * @generated from enum zitadel.user.v1.SessionState
 */
export enum SessionState {
  /**
   * @generated from enum value: SESSION_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SESSION_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: SESSION_STATE_TERMINATED = 2;
   */
  TERMINATED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SessionState)
proto3.util.setEnumType(SessionState, "zitadel.user.v1.SessionState", [
  { no: 0, name: "SESSION_STATE_UNSPECIFIED" },
  { no: 1, name: "SESSION_STATE_ACTIVE" },
  { no: 2, name: "SESSION_STATE_TERMINATED" },
]);

/**
 * @generated from enum zitadel.user.v1.UserGrantState
 */
export enum UserGrantState {
  /**
   * @generated from enum value: USER_GRANT_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_GRANT_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: USER_GRANT_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UserGrantState)
proto3.util.setEnumType(UserGrantState, "zitadel.user.v1.UserGrantState", [
  { no: 0, name: "USER_GRANT_STATE_UNSPECIFIED" },
  { no: 1, name: "USER_GRANT_STATE_ACTIVE" },
  { no: 2, name: "USER_GRANT_STATE_INACTIVE" },
]);

/**
 * @generated from message zitadel.user.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: zitadel.user.v1.UserState state = 3;
   */
  state = UserState.UNSPECIFIED;

  /**
   * @generated from field: string user_name = 4;
   */
  userName = "";

  /**
   * @generated from field: repeated string login_names = 5;
   */
  loginNames: string[] = [];

  /**
   * @generated from field: string preferred_login_name = 6;
   */
  preferredLoginName = "";

  /**
   * @generated from oneof zitadel.user.v1.User.type
   */
  type: {
    /**
     * @generated from field: zitadel.user.v1.Human human = 7;
     */
    value: Human;
    case: "human";
  } | {
    /**
     * @generated from field: zitadel.user.v1.Machine machine = 8;
     */
    value: Machine;
    case: "machine";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(UserState) },
    { no: 4, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "login_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "preferred_login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "human", kind: "message", T: Human, oneof: "type" },
    { no: 8, name: "machine", kind: "message", T: Machine, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Human
 */
export class Human extends Message<Human> {
  /**
   * @generated from field: zitadel.user.v1.Profile profile = 1;
   */
  profile?: Profile;

  /**
   * @generated from field: zitadel.user.v1.Email email = 2;
   */
  email?: Email;

  /**
   * @generated from field: zitadel.user.v1.Phone phone = 3;
   */
  phone?: Phone;

  /**
   * The time the user last changed their password.
   *
   * @generated from field: google.protobuf.Timestamp password_changed = 4;
   */
  passwordChanged?: Timestamp;

  constructor(data?: PartialMessage<Human>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Human";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: Profile },
    { no: 2, name: "email", kind: "message", T: Email },
    { no: 3, name: "phone", kind: "message", T: Phone },
    { no: 4, name: "password_changed", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Human {
    return new Human().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Human {
    return new Human().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Human {
    return new Human().fromJsonString(jsonString, options);
  }

  static equals(a: Human | PlainMessage<Human> | undefined, b: Human | PlainMessage<Human> | undefined): boolean {
    return proto3.util.equals(Human, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Machine
 */
export class Machine extends Message<Machine> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bool has_secret = 3;
   */
  hasSecret = false;

  /**
   * @generated from field: zitadel.user.v1.AccessTokenType access_token_type = 4;
   */
  accessTokenType = AccessTokenType.BEARER;

  constructor(data?: PartialMessage<Machine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Machine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "has_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "access_token_type", kind: "enum", T: proto3.getEnumType(AccessTokenType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Machine {
    return new Machine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Machine {
    return new Machine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Machine {
    return new Machine().fromJsonString(jsonString, options);
  }

  static equals(a: Machine | PlainMessage<Machine> | undefined, b: Machine | PlainMessage<Machine> | undefined): boolean {
    return proto3.util.equals(Machine, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Profile
 */
export class Profile extends Message<Profile> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  /**
   * @generated from field: string nick_name = 3;
   */
  nickName = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string preferred_language = 5;
   */
  preferredLanguage = "";

  /**
   * @generated from field: zitadel.user.v1.Gender gender = 6;
   */
  gender = Gender.UNSPECIFIED;

  /**
   * @generated from field: string avatar_url = 7;
   */
  avatarUrl = "";

  constructor(data?: PartialMessage<Profile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Profile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nick_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "preferred_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 7, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profile {
    return new Profile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJsonString(jsonString, options);
  }

  static equals(a: Profile | PlainMessage<Profile> | undefined, b: Profile | PlainMessage<Profile> | undefined): boolean {
    return proto3.util.equals(Profile, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Email
 */
export class Email extends Message<Email> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: bool is_email_verified = 2;
   */
  isEmailVerified = false;

  constructor(data?: PartialMessage<Email>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Email";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Email {
    return new Email().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Email {
    return new Email().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Email {
    return new Email().fromJsonString(jsonString, options);
  }

  static equals(a: Email | PlainMessage<Email> | undefined, b: Email | PlainMessage<Email> | undefined): boolean {
    return proto3.util.equals(Email, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Phone
 */
export class Phone extends Message<Phone> {
  /**
   * @generated from field: string phone = 1;
   */
  phone = "";

  /**
   * @generated from field: bool is_phone_verified = 2;
   */
  isPhoneVerified = false;

  constructor(data?: PartialMessage<Phone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Phone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_phone_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Phone {
    return new Phone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Phone {
    return new Phone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Phone {
    return new Phone().fromJsonString(jsonString, options);
  }

  static equals(a: Phone | PlainMessage<Phone> | undefined, b: Phone | PlainMessage<Phone> | undefined): boolean {
    return proto3.util.equals(Phone, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.SearchQuery
 */
export class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.user.v1.SearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.user.v1.UserNameQuery user_name_query = 1;
     */
    value: UserNameQuery;
    case: "userNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.FirstNameQuery first_name_query = 2;
     */
    value: FirstNameQuery;
    case: "firstNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.LastNameQuery last_name_query = 3;
     */
    value: LastNameQuery;
    case: "lastNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.NickNameQuery nick_name_query = 4;
     */
    value: NickNameQuery;
    case: "nickNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.DisplayNameQuery display_name_query = 5;
     */
    value: DisplayNameQuery;
    case: "displayNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.EmailQuery email_query = 6;
     */
    value: EmailQuery;
    case: "emailQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.StateQuery state_query = 7;
     */
    value: StateQuery;
    case: "stateQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.TypeQuery type_query = 8;
     */
    value: TypeQuery;
    case: "typeQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.LoginNameQuery login_name_query = 9;
     */
    value: LoginNameQuery;
    case: "loginNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.InUserIDQuery in_user_ids_query = 10;
     */
    value: InUserIDQuery;
    case: "inUserIdsQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.OrQuery or_query = 11;
     */
    value: OrQuery;
    case: "orQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.AndQuery and_query = 12;
     */
    value: AndQuery;
    case: "andQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.NotQuery not_query = 13;
     */
    value: NotQuery;
    case: "notQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.InUserEmailsQuery in_user_emails_query = 14;
     */
    value: InUserEmailsQuery;
    case: "inUserEmailsQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.SearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name_query", kind: "message", T: UserNameQuery, oneof: "query" },
    { no: 2, name: "first_name_query", kind: "message", T: FirstNameQuery, oneof: "query" },
    { no: 3, name: "last_name_query", kind: "message", T: LastNameQuery, oneof: "query" },
    { no: 4, name: "nick_name_query", kind: "message", T: NickNameQuery, oneof: "query" },
    { no: 5, name: "display_name_query", kind: "message", T: DisplayNameQuery, oneof: "query" },
    { no: 6, name: "email_query", kind: "message", T: EmailQuery, oneof: "query" },
    { no: 7, name: "state_query", kind: "message", T: StateQuery, oneof: "query" },
    { no: 8, name: "type_query", kind: "message", T: TypeQuery, oneof: "query" },
    { no: 9, name: "login_name_query", kind: "message", T: LoginNameQuery, oneof: "query" },
    { no: 10, name: "in_user_ids_query", kind: "message", T: InUserIDQuery, oneof: "query" },
    { no: 11, name: "or_query", kind: "message", T: OrQuery, oneof: "query" },
    { no: 12, name: "and_query", kind: "message", T: AndQuery, oneof: "query" },
    { no: 13, name: "not_query", kind: "message", T: NotQuery, oneof: "query" },
    { no: 14, name: "in_user_emails_query", kind: "message", T: InUserEmailsQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery {
    return new SearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean {
    return proto3.util.equals(SearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.OrQuery
 */
export class OrQuery extends Message<OrQuery> {
  /**
   * @generated from field: repeated zitadel.user.v1.SearchQuery queries = 1;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<OrQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.OrQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrQuery {
    return new OrQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrQuery {
    return new OrQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrQuery {
    return new OrQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrQuery | PlainMessage<OrQuery> | undefined, b: OrQuery | PlainMessage<OrQuery> | undefined): boolean {
    return proto3.util.equals(OrQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.AndQuery
 */
export class AndQuery extends Message<AndQuery> {
  /**
   * @generated from field: repeated zitadel.user.v1.SearchQuery queries = 1;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<AndQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.AndQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AndQuery {
    return new AndQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AndQuery {
    return new AndQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AndQuery {
    return new AndQuery().fromJsonString(jsonString, options);
  }

  static equals(a: AndQuery | PlainMessage<AndQuery> | undefined, b: AndQuery | PlainMessage<AndQuery> | undefined): boolean {
    return proto3.util.equals(AndQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.NotQuery
 */
export class NotQuery extends Message<NotQuery> {
  /**
   * @generated from field: zitadel.user.v1.SearchQuery query = 1;
   */
  query?: SearchQuery;

  constructor(data?: PartialMessage<NotQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.NotQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: SearchQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotQuery {
    return new NotQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotQuery {
    return new NotQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotQuery {
    return new NotQuery().fromJsonString(jsonString, options);
  }

  static equals(a: NotQuery | PlainMessage<NotQuery> | undefined, b: NotQuery | PlainMessage<NotQuery> | undefined): boolean {
    return proto3.util.equals(NotQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.InUserIDQuery
 */
export class InUserIDQuery extends Message<InUserIDQuery> {
  /**
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<InUserIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.InUserIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InUserIDQuery {
    return new InUserIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InUserIDQuery {
    return new InUserIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InUserIDQuery {
    return new InUserIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: InUserIDQuery | PlainMessage<InUserIDQuery> | undefined, b: InUserIDQuery | PlainMessage<InUserIDQuery> | undefined): boolean {
    return proto3.util.equals(InUserIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.InUserEmailsQuery
 */
export class InUserEmailsQuery extends Message<InUserEmailsQuery> {
  /**
   * @generated from field: repeated string user_emails = 1;
   */
  userEmails: string[] = [];

  constructor(data?: PartialMessage<InUserEmailsQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.InUserEmailsQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_emails", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InUserEmailsQuery {
    return new InUserEmailsQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InUserEmailsQuery {
    return new InUserEmailsQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InUserEmailsQuery {
    return new InUserEmailsQuery().fromJsonString(jsonString, options);
  }

  static equals(a: InUserEmailsQuery | PlainMessage<InUserEmailsQuery> | undefined, b: InUserEmailsQuery | PlainMessage<InUserEmailsQuery> | undefined): boolean {
    return proto3.util.equals(InUserEmailsQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserNameQuery
 */
export class UserNameQuery extends Message<UserNameQuery> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserNameQuery {
    return new UserNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserNameQuery {
    return new UserNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserNameQuery {
    return new UserNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserNameQuery | PlainMessage<UserNameQuery> | undefined, b: UserNameQuery | PlainMessage<UserNameQuery> | undefined): boolean {
    return proto3.util.equals(UserNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.FirstNameQuery
 */
export class FirstNameQuery extends Message<FirstNameQuery> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<FirstNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.FirstNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FirstNameQuery {
    return new FirstNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FirstNameQuery {
    return new FirstNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FirstNameQuery {
    return new FirstNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: FirstNameQuery | PlainMessage<FirstNameQuery> | undefined, b: FirstNameQuery | PlainMessage<FirstNameQuery> | undefined): boolean {
    return proto3.util.equals(FirstNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.LastNameQuery
 */
export class LastNameQuery extends Message<LastNameQuery> {
  /**
   * @generated from field: string last_name = 1;
   */
  lastName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<LastNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.LastNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastNameQuery {
    return new LastNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastNameQuery {
    return new LastNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastNameQuery {
    return new LastNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: LastNameQuery | PlainMessage<LastNameQuery> | undefined, b: LastNameQuery | PlainMessage<LastNameQuery> | undefined): boolean {
    return proto3.util.equals(LastNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.NickNameQuery
 */
export class NickNameQuery extends Message<NickNameQuery> {
  /**
   * @generated from field: string nick_name = 1;
   */
  nickName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<NickNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.NickNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nick_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NickNameQuery {
    return new NickNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NickNameQuery {
    return new NickNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NickNameQuery {
    return new NickNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: NickNameQuery | PlainMessage<NickNameQuery> | undefined, b: NickNameQuery | PlainMessage<NickNameQuery> | undefined): boolean {
    return proto3.util.equals(NickNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.DisplayNameQuery
 */
export class DisplayNameQuery extends Message<DisplayNameQuery> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<DisplayNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.DisplayNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisplayNameQuery {
    return new DisplayNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisplayNameQuery {
    return new DisplayNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisplayNameQuery {
    return new DisplayNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: DisplayNameQuery | PlainMessage<DisplayNameQuery> | undefined, b: DisplayNameQuery | PlainMessage<DisplayNameQuery> | undefined): boolean {
    return proto3.util.equals(DisplayNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.EmailQuery
 */
export class EmailQuery extends Message<EmailQuery> {
  /**
   * @generated from field: string email_address = 1;
   */
  emailAddress = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<EmailQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.EmailQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailQuery {
    return new EmailQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailQuery {
    return new EmailQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailQuery {
    return new EmailQuery().fromJsonString(jsonString, options);
  }

  static equals(a: EmailQuery | PlainMessage<EmailQuery> | undefined, b: EmailQuery | PlainMessage<EmailQuery> | undefined): boolean {
    return proto3.util.equals(EmailQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.LoginNameQuery
 */
export class LoginNameQuery extends Message<LoginNameQuery> {
  /**
   * @generated from field: string login_name = 1;
   */
  loginName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<LoginNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.LoginNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginNameQuery {
    return new LoginNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginNameQuery {
    return new LoginNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginNameQuery {
    return new LoginNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: LoginNameQuery | PlainMessage<LoginNameQuery> | undefined, b: LoginNameQuery | PlainMessage<LoginNameQuery> | undefined): boolean {
    return proto3.util.equals(LoginNameQuery, a, b);
  }
}

/**
 * UserStateQuery always equals
 *
 * @generated from message zitadel.user.v1.StateQuery
 */
export class StateQuery extends Message<StateQuery> {
  /**
   * @generated from field: zitadel.user.v1.UserState state = 1;
   */
  state = UserState.UNSPECIFIED;

  constructor(data?: PartialMessage<StateQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.StateQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(UserState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateQuery {
    return new StateQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateQuery {
    return new StateQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateQuery {
    return new StateQuery().fromJsonString(jsonString, options);
  }

  static equals(a: StateQuery | PlainMessage<StateQuery> | undefined, b: StateQuery | PlainMessage<StateQuery> | undefined): boolean {
    return proto3.util.equals(StateQuery, a, b);
  }
}

/**
 * UserTypeQuery always equals
 *
 * @generated from message zitadel.user.v1.TypeQuery
 */
export class TypeQuery extends Message<TypeQuery> {
  /**
   * @generated from field: zitadel.user.v1.Type type = 1;
   */
  type = Type.UNSPECIFIED;

  constructor(data?: PartialMessage<TypeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.TypeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeQuery {
    return new TypeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeQuery {
    return new TypeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeQuery {
    return new TypeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: TypeQuery | PlainMessage<TypeQuery> | undefined, b: TypeQuery | PlainMessage<TypeQuery> | undefined): boolean {
    return proto3.util.equals(TypeQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.AuthFactor
 */
export class AuthFactor extends Message<AuthFactor> {
  /**
   * @generated from field: zitadel.user.v1.AuthFactorState state = 1;
   */
  state = AuthFactorState.UNSPECIFIED;

  /**
   * @generated from oneof zitadel.user.v1.AuthFactor.type
   */
  type: {
    /**
     * @generated from field: zitadel.user.v1.AuthFactorOTP otp = 2;
     */
    value: AuthFactorOTP;
    case: "otp";
  } | {
    /**
     * @generated from field: zitadel.user.v1.AuthFactorU2F u2f = 3;
     */
    value: AuthFactorU2F;
    case: "u2f";
  } | {
    /**
     * @generated from field: zitadel.user.v1.AuthFactorOTPSMS otp_sms = 4;
     */
    value: AuthFactorOTPSMS;
    case: "otpSms";
  } | {
    /**
     * @generated from field: zitadel.user.v1.AuthFactorOTPEmail otp_email = 5;
     */
    value: AuthFactorOTPEmail;
    case: "otpEmail";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AuthFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.AuthFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(AuthFactorState) },
    { no: 2, name: "otp", kind: "message", T: AuthFactorOTP, oneof: "type" },
    { no: 3, name: "u2f", kind: "message", T: AuthFactorU2F, oneof: "type" },
    { no: 4, name: "otp_sms", kind: "message", T: AuthFactorOTPSMS, oneof: "type" },
    { no: 5, name: "otp_email", kind: "message", T: AuthFactorOTPEmail, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthFactor {
    return new AuthFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthFactor {
    return new AuthFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthFactor {
    return new AuthFactor().fromJsonString(jsonString, options);
  }

  static equals(a: AuthFactor | PlainMessage<AuthFactor> | undefined, b: AuthFactor | PlainMessage<AuthFactor> | undefined): boolean {
    return proto3.util.equals(AuthFactor, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.AuthFactorOTP
 */
export class AuthFactorOTP extends Message<AuthFactorOTP> {
  constructor(data?: PartialMessage<AuthFactorOTP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.AuthFactorOTP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthFactorOTP {
    return new AuthFactorOTP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthFactorOTP {
    return new AuthFactorOTP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthFactorOTP {
    return new AuthFactorOTP().fromJsonString(jsonString, options);
  }

  static equals(a: AuthFactorOTP | PlainMessage<AuthFactorOTP> | undefined, b: AuthFactorOTP | PlainMessage<AuthFactorOTP> | undefined): boolean {
    return proto3.util.equals(AuthFactorOTP, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.AuthFactorOTPSMS
 */
export class AuthFactorOTPSMS extends Message<AuthFactorOTPSMS> {
  constructor(data?: PartialMessage<AuthFactorOTPSMS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.AuthFactorOTPSMS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthFactorOTPSMS {
    return new AuthFactorOTPSMS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthFactorOTPSMS {
    return new AuthFactorOTPSMS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthFactorOTPSMS {
    return new AuthFactorOTPSMS().fromJsonString(jsonString, options);
  }

  static equals(a: AuthFactorOTPSMS | PlainMessage<AuthFactorOTPSMS> | undefined, b: AuthFactorOTPSMS | PlainMessage<AuthFactorOTPSMS> | undefined): boolean {
    return proto3.util.equals(AuthFactorOTPSMS, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.AuthFactorOTPEmail
 */
export class AuthFactorOTPEmail extends Message<AuthFactorOTPEmail> {
  constructor(data?: PartialMessage<AuthFactorOTPEmail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.AuthFactorOTPEmail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthFactorOTPEmail {
    return new AuthFactorOTPEmail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthFactorOTPEmail {
    return new AuthFactorOTPEmail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthFactorOTPEmail {
    return new AuthFactorOTPEmail().fromJsonString(jsonString, options);
  }

  static equals(a: AuthFactorOTPEmail | PlainMessage<AuthFactorOTPEmail> | undefined, b: AuthFactorOTPEmail | PlainMessage<AuthFactorOTPEmail> | undefined): boolean {
    return proto3.util.equals(AuthFactorOTPEmail, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.AuthFactorU2F
 */
export class AuthFactorU2F extends Message<AuthFactorU2F> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<AuthFactorU2F>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.AuthFactorU2F";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthFactorU2F {
    return new AuthFactorU2F().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthFactorU2F {
    return new AuthFactorU2F().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthFactorU2F {
    return new AuthFactorU2F().fromJsonString(jsonString, options);
  }

  static equals(a: AuthFactorU2F | PlainMessage<AuthFactorU2F> | undefined, b: AuthFactorU2F | PlainMessage<AuthFactorU2F> | undefined): boolean {
    return proto3.util.equals(AuthFactorU2F, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.WebAuthNKey
 */
export class WebAuthNKey extends Message<WebAuthNKey> {
  /**
   * @generated from field: bytes public_key = 1;
   */
  publicKey = new Uint8Array(0);

  constructor(data?: PartialMessage<WebAuthNKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.WebAuthNKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthNKey {
    return new WebAuthNKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthNKey {
    return new WebAuthNKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthNKey {
    return new WebAuthNKey().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthNKey | PlainMessage<WebAuthNKey> | undefined, b: WebAuthNKey | PlainMessage<WebAuthNKey> | undefined): boolean {
    return proto3.util.equals(WebAuthNKey, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.WebAuthNVerification
 */
export class WebAuthNVerification extends Message<WebAuthNVerification> {
  /**
   * @generated from field: bytes public_key_credential = 1;
   */
  publicKeyCredential = new Uint8Array(0);

  /**
   * @generated from field: string token_name = 2;
   */
  tokenName = "";

  constructor(data?: PartialMessage<WebAuthNVerification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.WebAuthNVerification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key_credential", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "token_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthNVerification {
    return new WebAuthNVerification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthNVerification {
    return new WebAuthNVerification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthNVerification {
    return new WebAuthNVerification().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthNVerification | PlainMessage<WebAuthNVerification> | undefined, b: WebAuthNVerification | PlainMessage<WebAuthNVerification> | undefined): boolean {
    return proto3.util.equals(WebAuthNVerification, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.WebAuthNToken
 */
export class WebAuthNToken extends Message<WebAuthNToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.user.v1.AuthFactorState state = 2;
   */
  state = AuthFactorState.UNSPECIFIED;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<WebAuthNToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.WebAuthNToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(AuthFactorState) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebAuthNToken {
    return new WebAuthNToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebAuthNToken {
    return new WebAuthNToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebAuthNToken {
    return new WebAuthNToken().fromJsonString(jsonString, options);
  }

  static equals(a: WebAuthNToken | PlainMessage<WebAuthNToken> | undefined, b: WebAuthNToken | PlainMessage<WebAuthNToken> | undefined): boolean {
    return proto3.util.equals(WebAuthNToken, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Membership
 */
export class Membership extends Message<Membership> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: repeated string roles = 3;
   */
  roles: string[] = [];

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from oneof zitadel.user.v1.Membership.type
   */
  type: {
    /**
     * @generated from field: bool iam = 5;
     */
    value: boolean;
    case: "iam";
  } | {
    /**
     * @generated from field: string org_id = 6;
     */
    value: string;
    case: "orgId";
  } | {
    /**
     * @generated from field: string project_id = 7;
     */
    value: string;
    case: "projectId";
  } | {
    /**
     * @generated from field: string project_grant_id = 8;
     */
    value: string;
    case: "projectGrantId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Membership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Membership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "iam", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "type" },
    { no: 6, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
    { no: 7, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
    { no: 8, name: "project_grant_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Membership {
    return new Membership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Membership {
    return new Membership().fromJsonString(jsonString, options);
  }

  static equals(a: Membership | PlainMessage<Membership> | undefined, b: Membership | PlainMessage<Membership> | undefined): boolean {
    return proto3.util.equals(Membership, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.MembershipQuery
 */
export class MembershipQuery extends Message<MembershipQuery> {
  /**
   * @generated from oneof zitadel.user.v1.MembershipQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.user.v1.MembershipOrgQuery org_query = 1;
     */
    value: MembershipOrgQuery;
    case: "orgQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.MembershipProjectQuery project_query = 2;
     */
    value: MembershipProjectQuery;
    case: "projectQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.MembershipProjectGrantQuery project_grant_query = 3;
     */
    value: MembershipProjectGrantQuery;
    case: "projectGrantQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.MembershipIAMQuery iam_query = 4;
     */
    value: MembershipIAMQuery;
    case: "iamQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MembershipQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.MembershipQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_query", kind: "message", T: MembershipOrgQuery, oneof: "query" },
    { no: 2, name: "project_query", kind: "message", T: MembershipProjectQuery, oneof: "query" },
    { no: 3, name: "project_grant_query", kind: "message", T: MembershipProjectGrantQuery, oneof: "query" },
    { no: 4, name: "iam_query", kind: "message", T: MembershipIAMQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipQuery {
    return new MembershipQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipQuery {
    return new MembershipQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipQuery {
    return new MembershipQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipQuery | PlainMessage<MembershipQuery> | undefined, b: MembershipQuery | PlainMessage<MembershipQuery> | undefined): boolean {
    return proto3.util.equals(MembershipQuery, a, b);
  }
}

/**
 * this query always equals
 *
 * @generated from message zitadel.user.v1.MembershipOrgQuery
 */
export class MembershipOrgQuery extends Message<MembershipOrgQuery> {
  /**
   * @generated from field: string org_id = 1;
   */
  orgId = "";

  constructor(data?: PartialMessage<MembershipOrgQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.MembershipOrgQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipOrgQuery {
    return new MembershipOrgQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipOrgQuery {
    return new MembershipOrgQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipOrgQuery {
    return new MembershipOrgQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipOrgQuery | PlainMessage<MembershipOrgQuery> | undefined, b: MembershipOrgQuery | PlainMessage<MembershipOrgQuery> | undefined): boolean {
    return proto3.util.equals(MembershipOrgQuery, a, b);
  }
}

/**
 * this query always equals
 *
 * @generated from message zitadel.user.v1.MembershipProjectQuery
 */
export class MembershipProjectQuery extends Message<MembershipProjectQuery> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<MembershipProjectQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.MembershipProjectQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipProjectQuery {
    return new MembershipProjectQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipProjectQuery {
    return new MembershipProjectQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipProjectQuery {
    return new MembershipProjectQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipProjectQuery | PlainMessage<MembershipProjectQuery> | undefined, b: MembershipProjectQuery | PlainMessage<MembershipProjectQuery> | undefined): boolean {
    return proto3.util.equals(MembershipProjectQuery, a, b);
  }
}

/**
 * this query always equals
 *
 * @generated from message zitadel.user.v1.MembershipProjectGrantQuery
 */
export class MembershipProjectGrantQuery extends Message<MembershipProjectGrantQuery> {
  /**
   * @generated from field: string project_grant_id = 1;
   */
  projectGrantId = "";

  constructor(data?: PartialMessage<MembershipProjectGrantQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.MembershipProjectGrantQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_grant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipProjectGrantQuery {
    return new MembershipProjectGrantQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipProjectGrantQuery {
    return new MembershipProjectGrantQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipProjectGrantQuery {
    return new MembershipProjectGrantQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipProjectGrantQuery | PlainMessage<MembershipProjectGrantQuery> | undefined, b: MembershipProjectGrantQuery | PlainMessage<MembershipProjectGrantQuery> | undefined): boolean {
    return proto3.util.equals(MembershipProjectGrantQuery, a, b);
  }
}

/**
 * this query always equals
 *
 * @generated from message zitadel.user.v1.MembershipIAMQuery
 */
export class MembershipIAMQuery extends Message<MembershipIAMQuery> {
  /**
   * @generated from field: bool iam = 1;
   */
  iam = false;

  constructor(data?: PartialMessage<MembershipIAMQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.MembershipIAMQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "iam", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipIAMQuery {
    return new MembershipIAMQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipIAMQuery {
    return new MembershipIAMQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipIAMQuery {
    return new MembershipIAMQuery().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipIAMQuery | PlainMessage<MembershipIAMQuery> | undefined, b: MembershipIAMQuery | PlainMessage<MembershipIAMQuery> | undefined): boolean {
    return proto3.util.equals(MembershipIAMQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.Session
 */
export class Session extends Message<Session> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string agent_id = 2;
   */
  agentId = "";

  /**
   * @generated from field: zitadel.user.v1.SessionState auth_state = 3;
   */
  authState = SessionState.UNSPECIFIED;

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 5;
   */
  userName = "";

  /**
   * @generated from field: string login_name = 7;
   */
  loginName = "";

  /**
   * @generated from field: string display_name = 8;
   */
  displayName = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 9;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string avatar_url = 10;
   */
  avatarUrl = "";

  constructor(data?: PartialMessage<Session>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.Session";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "agent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auth_state", kind: "enum", T: proto3.getEnumType(SessionState) },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "details", kind: "message", T: ObjectDetails },
    { no: 10, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session {
    return new Session().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJsonString(jsonString, options);
  }

  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean {
    return proto3.util.equals(Session, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.RefreshToken
 */
export class RefreshToken extends Message<RefreshToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: string client_id = 3;
   */
  clientId = "";

  /**
   * @generated from field: google.protobuf.Timestamp auth_time = 4;
   */
  authTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp idle_expiration = 5;
   */
  idleExpiration?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expiration = 6;
   */
  expiration?: Timestamp;

  /**
   * @generated from field: repeated string scopes = 7;
   */
  scopes: string[] = [];

  /**
   * @generated from field: repeated string audience = 8;
   */
  audience: string[] = [];

  constructor(data?: PartialMessage<RefreshToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.RefreshToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_time", kind: "message", T: Timestamp },
    { no: 5, name: "idle_expiration", kind: "message", T: Timestamp },
    { no: 6, name: "expiration", kind: "message", T: Timestamp },
    { no: 7, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "audience", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshToken {
    return new RefreshToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshToken {
    return new RefreshToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshToken {
    return new RefreshToken().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshToken | PlainMessage<RefreshToken> | undefined, b: RefreshToken | PlainMessage<RefreshToken> | undefined): boolean {
    return proto3.util.equals(RefreshToken, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.PersonalAccessToken
 */
export class PersonalAccessToken extends Message<PersonalAccessToken> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: google.protobuf.Timestamp expiration_date = 3;
   */
  expirationDate?: Timestamp;

  /**
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<PersonalAccessToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.PersonalAccessToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "expiration_date", kind: "message", T: Timestamp },
    { no: 4, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PersonalAccessToken {
    return new PersonalAccessToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PersonalAccessToken {
    return new PersonalAccessToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PersonalAccessToken {
    return new PersonalAccessToken().fromJsonString(jsonString, options);
  }

  static equals(a: PersonalAccessToken | PlainMessage<PersonalAccessToken> | undefined, b: PersonalAccessToken | PlainMessage<PersonalAccessToken> | undefined): boolean {
    return proto3.util.equals(PersonalAccessToken, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrant
 */
export class UserGrant extends Message<UserGrant> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: zitadel.v1.ObjectDetails details = 2;
   */
  details?: ObjectDetails;

  /**
   * @generated from field: repeated string role_keys = 3;
   */
  roleKeys: string[] = [];

  /**
   * @generated from field: zitadel.user.v1.UserGrantState state = 4;
   */
  state = UserGrantState.UNSPECIFIED;

  /**
   * @generated from field: string user_id = 5;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 6;
   */
  userName = "";

  /**
   * @generated from field: string first_name = 7;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 8;
   */
  lastName = "";

  /**
   * @generated from field: string email = 9;
   */
  email = "";

  /**
   * @generated from field: string display_name = 10;
   */
  displayName = "";

  /**
   * @generated from field: string org_id = 11;
   */
  orgId = "";

  /**
   * @generated from field: string org_name = 12;
   */
  orgName = "";

  /**
   * @generated from field: string org_domain = 13;
   */
  orgDomain = "";

  /**
   * @generated from field: string project_id = 14;
   */
  projectId = "";

  /**
   * @generated from field: string project_name = 15;
   */
  projectName = "";

  /**
   * @generated from field: string project_grant_id = 16;
   */
  projectGrantId = "";

  /**
   * @generated from field: string avatar_url = 17;
   */
  avatarUrl = "";

  /**
   * @generated from field: string preferred_login_name = 18;
   */
  preferredLoginName = "";

  /**
   * @generated from field: zitadel.user.v1.Type user_type = 19;
   */
  userType = Type.UNSPECIFIED;

  /**
   * @generated from field: string granted_org_id = 20;
   */
  grantedOrgId = "";

  /**
   * @generated from field: string granted_org_name = 21;
   */
  grantedOrgName = "";

  /**
   * @generated from field: string granted_org_domain = 22;
   */
  grantedOrgDomain = "";

  constructor(data?: PartialMessage<UserGrant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: ObjectDetails },
    { no: 3, name: "role_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(UserGrantState) },
    { no: 5, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "org_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "project_grant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "preferred_login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "user_type", kind: "enum", T: proto3.getEnumType(Type) },
    { no: 20, name: "granted_org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "granted_org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "granted_org_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrant {
    return new UserGrant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrant {
    return new UserGrant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrant {
    return new UserGrant().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrant | PlainMessage<UserGrant> | undefined, b: UserGrant | PlainMessage<UserGrant> | undefined): boolean {
    return proto3.util.equals(UserGrant, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantQuery
 */
export class UserGrantQuery extends Message<UserGrantQuery> {
  /**
   * @generated from oneof zitadel.user.v1.UserGrantQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.user.v1.UserGrantProjectIDQuery project_id_query = 1;
     */
    value: UserGrantProjectIDQuery;
    case: "projectIdQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantUserIDQuery user_id_query = 2;
     */
    value: UserGrantUserIDQuery;
    case: "userIdQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantWithGrantedQuery with_granted_query = 3;
     */
    value: UserGrantWithGrantedQuery;
    case: "withGrantedQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantRoleKeyQuery role_key_query = 4;
     */
    value: UserGrantRoleKeyQuery;
    case: "roleKeyQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantProjectGrantIDQuery project_grant_id_query = 5;
     */
    value: UserGrantProjectGrantIDQuery;
    case: "projectGrantIdQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantUserNameQuery user_name_query = 6;
     */
    value: UserGrantUserNameQuery;
    case: "userNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantFirstNameQuery first_name_query = 7;
     */
    value: UserGrantFirstNameQuery;
    case: "firstNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantLastNameQuery last_name_query = 8;
     */
    value: UserGrantLastNameQuery;
    case: "lastNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantEmailQuery email_query = 9;
     */
    value: UserGrantEmailQuery;
    case: "emailQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantOrgNameQuery org_name_query = 10;
     */
    value: UserGrantOrgNameQuery;
    case: "orgNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantOrgDomainQuery org_domain_query = 11;
     */
    value: UserGrantOrgDomainQuery;
    case: "orgDomainQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantProjectNameQuery project_name_query = 12;
     */
    value: UserGrantProjectNameQuery;
    case: "projectNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantDisplayNameQuery display_name_query = 13;
     */
    value: UserGrantDisplayNameQuery;
    case: "displayNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v1.UserGrantUserTypeQuery user_type_query = 14;
     */
    value: UserGrantUserTypeQuery;
    case: "userTypeQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UserGrantQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id_query", kind: "message", T: UserGrantProjectIDQuery, oneof: "query" },
    { no: 2, name: "user_id_query", kind: "message", T: UserGrantUserIDQuery, oneof: "query" },
    { no: 3, name: "with_granted_query", kind: "message", T: UserGrantWithGrantedQuery, oneof: "query" },
    { no: 4, name: "role_key_query", kind: "message", T: UserGrantRoleKeyQuery, oneof: "query" },
    { no: 5, name: "project_grant_id_query", kind: "message", T: UserGrantProjectGrantIDQuery, oneof: "query" },
    { no: 6, name: "user_name_query", kind: "message", T: UserGrantUserNameQuery, oneof: "query" },
    { no: 7, name: "first_name_query", kind: "message", T: UserGrantFirstNameQuery, oneof: "query" },
    { no: 8, name: "last_name_query", kind: "message", T: UserGrantLastNameQuery, oneof: "query" },
    { no: 9, name: "email_query", kind: "message", T: UserGrantEmailQuery, oneof: "query" },
    { no: 10, name: "org_name_query", kind: "message", T: UserGrantOrgNameQuery, oneof: "query" },
    { no: 11, name: "org_domain_query", kind: "message", T: UserGrantOrgDomainQuery, oneof: "query" },
    { no: 12, name: "project_name_query", kind: "message", T: UserGrantProjectNameQuery, oneof: "query" },
    { no: 13, name: "display_name_query", kind: "message", T: UserGrantDisplayNameQuery, oneof: "query" },
    { no: 14, name: "user_type_query", kind: "message", T: UserGrantUserTypeQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantQuery {
    return new UserGrantQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantQuery {
    return new UserGrantQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantQuery {
    return new UserGrantQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantQuery | PlainMessage<UserGrantQuery> | undefined, b: UserGrantQuery | PlainMessage<UserGrantQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantProjectIDQuery
 */
export class UserGrantProjectIDQuery extends Message<UserGrantProjectIDQuery> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<UserGrantProjectIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantProjectIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantProjectIDQuery {
    return new UserGrantProjectIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantProjectIDQuery {
    return new UserGrantProjectIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantProjectIDQuery {
    return new UserGrantProjectIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantProjectIDQuery | PlainMessage<UserGrantProjectIDQuery> | undefined, b: UserGrantProjectIDQuery | PlainMessage<UserGrantProjectIDQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantProjectIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantUserIDQuery
 */
export class UserGrantUserIDQuery extends Message<UserGrantUserIDQuery> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<UserGrantUserIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantUserIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantUserIDQuery {
    return new UserGrantUserIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantUserIDQuery {
    return new UserGrantUserIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantUserIDQuery {
    return new UserGrantUserIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantUserIDQuery | PlainMessage<UserGrantUserIDQuery> | undefined, b: UserGrantUserIDQuery | PlainMessage<UserGrantUserIDQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantUserIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantWithGrantedQuery
 */
export class UserGrantWithGrantedQuery extends Message<UserGrantWithGrantedQuery> {
  /**
   * @generated from field: bool with_granted = 1;
   */
  withGranted = false;

  constructor(data?: PartialMessage<UserGrantWithGrantedQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantWithGrantedQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "with_granted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantWithGrantedQuery {
    return new UserGrantWithGrantedQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantWithGrantedQuery {
    return new UserGrantWithGrantedQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantWithGrantedQuery {
    return new UserGrantWithGrantedQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantWithGrantedQuery | PlainMessage<UserGrantWithGrantedQuery> | undefined, b: UserGrantWithGrantedQuery | PlainMessage<UserGrantWithGrantedQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantWithGrantedQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantRoleKeyQuery
 */
export class UserGrantRoleKeyQuery extends Message<UserGrantRoleKeyQuery> {
  /**
   * @generated from field: string role_key = 1;
   */
  roleKey = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantRoleKeyQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantRoleKeyQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantRoleKeyQuery {
    return new UserGrantRoleKeyQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantRoleKeyQuery {
    return new UserGrantRoleKeyQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantRoleKeyQuery {
    return new UserGrantRoleKeyQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantRoleKeyQuery | PlainMessage<UserGrantRoleKeyQuery> | undefined, b: UserGrantRoleKeyQuery | PlainMessage<UserGrantRoleKeyQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantRoleKeyQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantProjectGrantIDQuery
 */
export class UserGrantProjectGrantIDQuery extends Message<UserGrantProjectGrantIDQuery> {
  /**
   * @generated from field: string project_grant_id = 1;
   */
  projectGrantId = "";

  constructor(data?: PartialMessage<UserGrantProjectGrantIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantProjectGrantIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_grant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantProjectGrantIDQuery {
    return new UserGrantProjectGrantIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantProjectGrantIDQuery {
    return new UserGrantProjectGrantIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantProjectGrantIDQuery {
    return new UserGrantProjectGrantIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantProjectGrantIDQuery | PlainMessage<UserGrantProjectGrantIDQuery> | undefined, b: UserGrantProjectGrantIDQuery | PlainMessage<UserGrantProjectGrantIDQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantProjectGrantIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantUserNameQuery
 */
export class UserGrantUserNameQuery extends Message<UserGrantUserNameQuery> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantUserNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantUserNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantUserNameQuery {
    return new UserGrantUserNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantUserNameQuery {
    return new UserGrantUserNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantUserNameQuery {
    return new UserGrantUserNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantUserNameQuery | PlainMessage<UserGrantUserNameQuery> | undefined, b: UserGrantUserNameQuery | PlainMessage<UserGrantUserNameQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantUserNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantFirstNameQuery
 */
export class UserGrantFirstNameQuery extends Message<UserGrantFirstNameQuery> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantFirstNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantFirstNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantFirstNameQuery {
    return new UserGrantFirstNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantFirstNameQuery {
    return new UserGrantFirstNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantFirstNameQuery {
    return new UserGrantFirstNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantFirstNameQuery | PlainMessage<UserGrantFirstNameQuery> | undefined, b: UserGrantFirstNameQuery | PlainMessage<UserGrantFirstNameQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantFirstNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantLastNameQuery
 */
export class UserGrantLastNameQuery extends Message<UserGrantLastNameQuery> {
  /**
   * @generated from field: string last_name = 1;
   */
  lastName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantLastNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantLastNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantLastNameQuery {
    return new UserGrantLastNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantLastNameQuery {
    return new UserGrantLastNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantLastNameQuery {
    return new UserGrantLastNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantLastNameQuery | PlainMessage<UserGrantLastNameQuery> | undefined, b: UserGrantLastNameQuery | PlainMessage<UserGrantLastNameQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantLastNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantEmailQuery
 */
export class UserGrantEmailQuery extends Message<UserGrantEmailQuery> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantEmailQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantEmailQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantEmailQuery {
    return new UserGrantEmailQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantEmailQuery {
    return new UserGrantEmailQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantEmailQuery {
    return new UserGrantEmailQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantEmailQuery | PlainMessage<UserGrantEmailQuery> | undefined, b: UserGrantEmailQuery | PlainMessage<UserGrantEmailQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantEmailQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantOrgNameQuery
 */
export class UserGrantOrgNameQuery extends Message<UserGrantOrgNameQuery> {
  /**
   * @generated from field: string org_name = 1;
   */
  orgName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantOrgNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantOrgNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantOrgNameQuery {
    return new UserGrantOrgNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantOrgNameQuery {
    return new UserGrantOrgNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantOrgNameQuery {
    return new UserGrantOrgNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantOrgNameQuery | PlainMessage<UserGrantOrgNameQuery> | undefined, b: UserGrantOrgNameQuery | PlainMessage<UserGrantOrgNameQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantOrgNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantOrgDomainQuery
 */
export class UserGrantOrgDomainQuery extends Message<UserGrantOrgDomainQuery> {
  /**
   * @generated from field: string org_domain = 1;
   */
  orgDomain = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantOrgDomainQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantOrgDomainQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantOrgDomainQuery {
    return new UserGrantOrgDomainQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantOrgDomainQuery {
    return new UserGrantOrgDomainQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantOrgDomainQuery {
    return new UserGrantOrgDomainQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantOrgDomainQuery | PlainMessage<UserGrantOrgDomainQuery> | undefined, b: UserGrantOrgDomainQuery | PlainMessage<UserGrantOrgDomainQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantOrgDomainQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantProjectNameQuery
 */
export class UserGrantProjectNameQuery extends Message<UserGrantProjectNameQuery> {
  /**
   * @generated from field: string project_name = 1;
   */
  projectName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantProjectNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantProjectNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantProjectNameQuery {
    return new UserGrantProjectNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantProjectNameQuery {
    return new UserGrantProjectNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantProjectNameQuery {
    return new UserGrantProjectNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantProjectNameQuery | PlainMessage<UserGrantProjectNameQuery> | undefined, b: UserGrantProjectNameQuery | PlainMessage<UserGrantProjectNameQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantProjectNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantDisplayNameQuery
 */
export class UserGrantDisplayNameQuery extends Message<UserGrantDisplayNameQuery> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: zitadel.v1.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserGrantDisplayNameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantDisplayNameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantDisplayNameQuery {
    return new UserGrantDisplayNameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantDisplayNameQuery {
    return new UserGrantDisplayNameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantDisplayNameQuery {
    return new UserGrantDisplayNameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantDisplayNameQuery | PlainMessage<UserGrantDisplayNameQuery> | undefined, b: UserGrantDisplayNameQuery | PlainMessage<UserGrantDisplayNameQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantDisplayNameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v1.UserGrantUserTypeQuery
 */
export class UserGrantUserTypeQuery extends Message<UserGrantUserTypeQuery> {
  /**
   * @generated from field: zitadel.user.v1.Type type = 1;
   */
  type = Type.UNSPECIFIED;

  constructor(data?: PartialMessage<UserGrantUserTypeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v1.UserGrantUserTypeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGrantUserTypeQuery {
    return new UserGrantUserTypeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGrantUserTypeQuery {
    return new UserGrantUserTypeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGrantUserTypeQuery {
    return new UserGrantUserTypeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserGrantUserTypeQuery | PlainMessage<UserGrantUserTypeQuery> | undefined, b: UserGrantUserTypeQuery | PlainMessage<UserGrantUserTypeQuery> | undefined): boolean {
    return proto3.util.equals(UserGrantUserTypeQuery, a, b);
  }
}

