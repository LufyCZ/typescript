// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/v3alpha/query.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TextQueryMethod } from "../../object/v2beta/object_pb.js";
import { State } from "./user_pb.js";

/**
 * @generated from enum zitadel.user.v3alpha.FieldName
 */
export enum FieldName {
  /**
   * @generated from enum value: FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FIELD_NAME_ID = 1;
   */
  ID = 1,

  /**
   * @generated from enum value: FIELD_NAME_CREATION_DATE = 2;
   */
  CREATION_DATE = 2,

  /**
   * @generated from enum value: FIELD_NAME_CHANGE_DATE = 3;
   */
  CHANGE_DATE = 3,

  /**
   * @generated from enum value: FIELD_NAME_EMAIL = 4;
   */
  EMAIL = 4,

  /**
   * @generated from enum value: FIELD_NAME_PHONE = 5;
   */
  PHONE = 5,

  /**
   * @generated from enum value: FIELD_NAME_STATE = 6;
   */
  STATE = 6,

  /**
   * @generated from enum value: FIELD_NAME_SCHEMA_ID = 7;
   */
  SCHEMA_ID = 7,

  /**
   * @generated from enum value: FIELD_NAME_SCHEMA_TYPE = 8;
   */
  SCHEMA_TYPE = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(FieldName)
proto3.util.setEnumType(FieldName, "zitadel.user.v3alpha.FieldName", [
  { no: 0, name: "FIELD_NAME_UNSPECIFIED" },
  { no: 1, name: "FIELD_NAME_ID" },
  { no: 2, name: "FIELD_NAME_CREATION_DATE" },
  { no: 3, name: "FIELD_NAME_CHANGE_DATE" },
  { no: 4, name: "FIELD_NAME_EMAIL" },
  { no: 5, name: "FIELD_NAME_PHONE" },
  { no: 6, name: "FIELD_NAME_STATE" },
  { no: 7, name: "FIELD_NAME_SCHEMA_ID" },
  { no: 8, name: "FIELD_NAME_SCHEMA_TYPE" },
]);

/**
 * @generated from message zitadel.user.v3alpha.SearchQuery
 */
export class SearchQuery extends Message<SearchQuery> {
  /**
   * @generated from oneof zitadel.user.v3alpha.SearchQuery.query
   */
  query: {
    /**
     * Union the results of each sub query ('OR').
     *
     * @generated from field: zitadel.user.v3alpha.OrQuery or_query = 1;
     */
    value: OrQuery;
    case: "orQuery";
  } | {
    /**
     * Limit the result to match all sub queries ('AND').
     * Note that if you specify multiple queries, they will be implicitly used as andQueries.
     * Use the andQuery in combination with orQuery and notQuery.
     *
     * @generated from field: zitadel.user.v3alpha.AndQuery and_query = 2;
     */
    value: AndQuery;
    case: "andQuery";
  } | {
    /**
     * Exclude / Negate the result of the sub query ('NOT').
     *
     * @generated from field: zitadel.user.v3alpha.NotQuery not_query = 3;
     */
    value: NotQuery;
    case: "notQuery";
  } | {
    /**
     * Limit the result to a specific user ID.
     *
     * @generated from field: zitadel.user.v3alpha.UserIDQuery user_id_query = 4;
     */
    value: UserIDQuery;
    case: "userIdQuery";
  } | {
    /**
     * Limit the result to a specific organization.
     *
     * @generated from field: zitadel.user.v3alpha.OrganizationIDQuery organization_id_query = 5;
     */
    value: OrganizationIDQuery;
    case: "organizationIdQuery";
  } | {
    /**
     * Limit the result to a specific username.
     *
     * @generated from field: zitadel.user.v3alpha.UsernameQuery username_query = 6;
     */
    value: UsernameQuery;
    case: "usernameQuery";
  } | {
    /**
     * Limit the result to a specific contact email.
     *
     * @generated from field: zitadel.user.v3alpha.EmailQuery email_query = 7;
     */
    value: EmailQuery;
    case: "emailQuery";
  } | {
    /**
     * Limit the result to a specific contact phone.
     *
     * @generated from field: zitadel.user.v3alpha.PhoneQuery phone_query = 8;
     */
    value: PhoneQuery;
    case: "phoneQuery";
  } | {
    /**
     * Limit the result to a specific state of the user.
     *
     * @generated from field: zitadel.user.v3alpha.StateQuery state_query = 9;
     */
    value: StateQuery;
    case: "stateQuery";
  } | {
    /**
     * Limit the result to a specific schema ID.
     *
     * @generated from field: zitadel.user.v3alpha.SchemaIDQuery schema_ID_query = 10;
     */
    value: SchemaIDQuery;
    case: "schemaIDQuery";
  } | {
    /**
     * Limit the result to a specific schema type.
     *
     * @generated from field: zitadel.user.v3alpha.SchemaTypeQuery schema_type_query = 11;
     */
    value: SchemaTypeQuery;
    case: "schemaTypeQuery";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SearchQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SearchQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "or_query", kind: "message", T: OrQuery, oneof: "query" },
    { no: 2, name: "and_query", kind: "message", T: AndQuery, oneof: "query" },
    { no: 3, name: "not_query", kind: "message", T: NotQuery, oneof: "query" },
    { no: 4, name: "user_id_query", kind: "message", T: UserIDQuery, oneof: "query" },
    { no: 5, name: "organization_id_query", kind: "message", T: OrganizationIDQuery, oneof: "query" },
    { no: 6, name: "username_query", kind: "message", T: UsernameQuery, oneof: "query" },
    { no: 7, name: "email_query", kind: "message", T: EmailQuery, oneof: "query" },
    { no: 8, name: "phone_query", kind: "message", T: PhoneQuery, oneof: "query" },
    { no: 9, name: "state_query", kind: "message", T: StateQuery, oneof: "query" },
    { no: 10, name: "schema_ID_query", kind: "message", T: SchemaIDQuery, oneof: "query" },
    { no: 11, name: "schema_type_query", kind: "message", T: SchemaTypeQuery, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchQuery {
    return new SearchQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchQuery {
    return new SearchQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SearchQuery | PlainMessage<SearchQuery> | undefined, b: SearchQuery | PlainMessage<SearchQuery> | undefined): boolean {
    return proto3.util.equals(SearchQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.OrQuery
 */
export class OrQuery extends Message<OrQuery> {
  /**
   * @generated from field: repeated zitadel.user.v3alpha.SearchQuery queries = 1;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<OrQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.OrQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrQuery {
    return new OrQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrQuery {
    return new OrQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrQuery {
    return new OrQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrQuery | PlainMessage<OrQuery> | undefined, b: OrQuery | PlainMessage<OrQuery> | undefined): boolean {
    return proto3.util.equals(OrQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.AndQuery
 */
export class AndQuery extends Message<AndQuery> {
  /**
   * @generated from field: repeated zitadel.user.v3alpha.SearchQuery queries = 1;
   */
  queries: SearchQuery[] = [];

  constructor(data?: PartialMessage<AndQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.AndQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AndQuery {
    return new AndQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AndQuery {
    return new AndQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AndQuery {
    return new AndQuery().fromJsonString(jsonString, options);
  }

  static equals(a: AndQuery | PlainMessage<AndQuery> | undefined, b: AndQuery | PlainMessage<AndQuery> | undefined): boolean {
    return proto3.util.equals(AndQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.NotQuery
 */
export class NotQuery extends Message<NotQuery> {
  /**
   * @generated from field: zitadel.user.v3alpha.SearchQuery query = 1;
   */
  query?: SearchQuery;

  constructor(data?: PartialMessage<NotQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.NotQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: SearchQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotQuery {
    return new NotQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotQuery {
    return new NotQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotQuery {
    return new NotQuery().fromJsonString(jsonString, options);
  }

  static equals(a: NotQuery | PlainMessage<NotQuery> | undefined, b: NotQuery | PlainMessage<NotQuery> | undefined): boolean {
    return proto3.util.equals(NotQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.UserIDQuery
 */
export class UserIDQuery extends Message<UserIDQuery> {
  /**
   * Defines the ID of the user to query for.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Defines which text comparison method used for the id query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<UserIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.UserIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserIDQuery {
    return new UserIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserIDQuery {
    return new UserIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserIDQuery {
    return new UserIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UserIDQuery | PlainMessage<UserIDQuery> | undefined, b: UserIDQuery | PlainMessage<UserIDQuery> | undefined): boolean {
    return proto3.util.equals(UserIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.OrganizationIDQuery
 */
export class OrganizationIDQuery extends Message<OrganizationIDQuery> {
  /**
   * Defines the ID of the organization to query for.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Defines which text comparison method used for the id query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<OrganizationIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.OrganizationIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationIDQuery {
    return new OrganizationIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationIDQuery {
    return new OrganizationIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationIDQuery {
    return new OrganizationIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationIDQuery | PlainMessage<OrganizationIDQuery> | undefined, b: OrganizationIDQuery | PlainMessage<OrganizationIDQuery> | undefined): boolean {
    return proto3.util.equals(OrganizationIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.UsernameQuery
 */
export class UsernameQuery extends Message<UsernameQuery> {
  /**
   * Defines the username to query for.
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * Defines which text comparison method used for the username query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  /**
   * Defines that the username must only be unique in the organisation.
   *
   * @generated from field: bool is_organization_specific = 3;
   */
  isOrganizationSpecific = false;

  constructor(data?: PartialMessage<UsernameQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.UsernameQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
    { no: 3, name: "is_organization_specific", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsernameQuery {
    return new UsernameQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsernameQuery {
    return new UsernameQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsernameQuery {
    return new UsernameQuery().fromJsonString(jsonString, options);
  }

  static equals(a: UsernameQuery | PlainMessage<UsernameQuery> | undefined, b: UsernameQuery | PlainMessage<UsernameQuery> | undefined): boolean {
    return proto3.util.equals(UsernameQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.EmailQuery
 */
export class EmailQuery extends Message<EmailQuery> {
  /**
   * Defines the email of the user to query for.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Defines which text comparison method used for the email query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<EmailQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.EmailQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailQuery {
    return new EmailQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailQuery {
    return new EmailQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailQuery {
    return new EmailQuery().fromJsonString(jsonString, options);
  }

  static equals(a: EmailQuery | PlainMessage<EmailQuery> | undefined, b: EmailQuery | PlainMessage<EmailQuery> | undefined): boolean {
    return proto3.util.equals(EmailQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.PhoneQuery
 */
export class PhoneQuery extends Message<PhoneQuery> {
  /**
   * Defines the phone of the user to query for.
   *
   * @generated from field: string number = 1;
   */
  number = "";

  /**
   * Defines which text comparison method used for the phone query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<PhoneQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.PhoneQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneQuery {
    return new PhoneQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneQuery {
    return new PhoneQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneQuery {
    return new PhoneQuery().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneQuery | PlainMessage<PhoneQuery> | undefined, b: PhoneQuery | PlainMessage<PhoneQuery> | undefined): boolean {
    return proto3.util.equals(PhoneQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.StateQuery
 */
export class StateQuery extends Message<StateQuery> {
  /**
   * Defines the state to query for.
   *
   * @generated from field: zitadel.user.v3alpha.State state = 1;
   */
  state = State.USER_STATE_UNSPECIFIED;

  constructor(data?: PartialMessage<StateQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.StateQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(State) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateQuery {
    return new StateQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateQuery {
    return new StateQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateQuery {
    return new StateQuery().fromJsonString(jsonString, options);
  }

  static equals(a: StateQuery | PlainMessage<StateQuery> | undefined, b: StateQuery | PlainMessage<StateQuery> | undefined): boolean {
    return proto3.util.equals(StateQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SchemaIDQuery
 */
export class SchemaIDQuery extends Message<SchemaIDQuery> {
  /**
   * Defines the ID of the schema to query for.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<SchemaIDQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SchemaIDQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaIDQuery {
    return new SchemaIDQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaIDQuery {
    return new SchemaIDQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaIDQuery {
    return new SchemaIDQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaIDQuery | PlainMessage<SchemaIDQuery> | undefined, b: SchemaIDQuery | PlainMessage<SchemaIDQuery> | undefined): boolean {
    return proto3.util.equals(SchemaIDQuery, a, b);
  }
}

/**
 * @generated from message zitadel.user.v3alpha.SchemaTypeQuery
 */
export class SchemaTypeQuery extends Message<SchemaTypeQuery> {
  /**
   * Defines which type to query for.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Defines which text comparison method used for the type query.
   *
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method = TextQueryMethod.EQUALS;

  constructor(data?: PartialMessage<SchemaTypeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v3alpha.SchemaTypeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaTypeQuery {
    return new SchemaTypeQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaTypeQuery {
    return new SchemaTypeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaTypeQuery {
    return new SchemaTypeQuery().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaTypeQuery | PlainMessage<SchemaTypeQuery> | undefined, b: SchemaTypeQuery | PlainMessage<SchemaTypeQuery> | undefined): boolean {
    return proto3.util.equals(SchemaTypeQuery, a, b);
  }
}

