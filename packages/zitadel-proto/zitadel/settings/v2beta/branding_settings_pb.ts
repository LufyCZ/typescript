// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/settings/v2beta/branding_settings.proto (package zitadel.settings.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ResourceOwnerType } from "./settings_pb.js";

/**
 * @generated from enum zitadel.settings.v2beta.ThemeMode
 */
export enum ThemeMode {
  /**
   * @generated from enum value: THEME_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THEME_MODE_AUTO = 1;
   */
  AUTO = 1,

  /**
   * @generated from enum value: THEME_MODE_LIGHT = 2;
   */
  LIGHT = 2,

  /**
   * @generated from enum value: THEME_MODE_DARK = 3;
   */
  DARK = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ThemeMode)
proto3.util.setEnumType(ThemeMode, "zitadel.settings.v2beta.ThemeMode", [
  { no: 0, name: "THEME_MODE_UNSPECIFIED" },
  { no: 1, name: "THEME_MODE_AUTO" },
  { no: 2, name: "THEME_MODE_LIGHT" },
  { no: 3, name: "THEME_MODE_DARK" },
]);

/**
 * @generated from message zitadel.settings.v2beta.BrandingSettings
 */
export class BrandingSettings extends Message<BrandingSettings> {
  /**
   * @generated from field: zitadel.settings.v2beta.Theme light_theme = 1;
   */
  lightTheme?: Theme;

  /**
   * @generated from field: zitadel.settings.v2beta.Theme dark_theme = 2;
   */
  darkTheme?: Theme;

  /**
   * @generated from field: string font_url = 3;
   */
  fontUrl = "";

  /**
   * hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
   *
   * @generated from field: bool hide_login_name_suffix = 4;
   */
  hideLoginNameSuffix = false;

  /**
   * @generated from field: bool disable_watermark = 5;
   */
  disableWatermark = false;

  /**
   * resource_owner_type returns if the setting is managed on the organization or on the instance
   *
   * @generated from field: zitadel.settings.v2beta.ResourceOwnerType resource_owner_type = 6;
   */
  resourceOwnerType = ResourceOwnerType.UNSPECIFIED;

  /**
   * @generated from field: zitadel.settings.v2beta.ThemeMode theme_mode = 7;
   */
  themeMode = ThemeMode.UNSPECIFIED;

  constructor(data?: PartialMessage<BrandingSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.settings.v2beta.BrandingSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "light_theme", kind: "message", T: Theme },
    { no: 2, name: "dark_theme", kind: "message", T: Theme },
    { no: 3, name: "font_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "hide_login_name_suffix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "disable_watermark", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "resource_owner_type", kind: "enum", T: proto3.getEnumType(ResourceOwnerType) },
    { no: 7, name: "theme_mode", kind: "enum", T: proto3.getEnumType(ThemeMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrandingSettings {
    return new BrandingSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrandingSettings {
    return new BrandingSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrandingSettings {
    return new BrandingSettings().fromJsonString(jsonString, options);
  }

  static equals(a: BrandingSettings | PlainMessage<BrandingSettings> | undefined, b: BrandingSettings | PlainMessage<BrandingSettings> | undefined): boolean {
    return proto3.util.equals(BrandingSettings, a, b);
  }
}

/**
 * @generated from message zitadel.settings.v2beta.Theme
 */
export class Theme extends Message<Theme> {
  /**
   * hex value for primary color
   *
   * @generated from field: string primary_color = 1;
   */
  primaryColor = "";

  /**
   * hex value for background color
   *
   * @generated from field: string background_color = 2;
   */
  backgroundColor = "";

  /**
   * hex value for warning color
   *
   * @generated from field: string warn_color = 3;
   */
  warnColor = "";

  /**
   * hex value for font color
   *
   * @generated from field: string font_color = 4;
   */
  fontColor = "";

  /**
   * url where the logo is served
   *
   * @generated from field: string logo_url = 5;
   */
  logoUrl = "";

  /**
   * url where the icon is served
   *
   * @generated from field: string icon_url = 6;
   */
  iconUrl = "";

  constructor(data?: PartialMessage<Theme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.settings.v2beta.Theme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "background_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "warn_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "font_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "logo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "icon_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Theme {
    return new Theme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Theme {
    return new Theme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Theme {
    return new Theme().fromJsonString(jsonString, options);
  }

  static equals(a: Theme | PlainMessage<Theme> | undefined, b: Theme | PlainMessage<Theme> | undefined): boolean {
    return proto3.util.equals(Theme, a, b);
  }
}

