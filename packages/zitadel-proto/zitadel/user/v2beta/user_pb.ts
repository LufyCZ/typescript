// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file zitadel/user/v2beta/user.proto (package zitadel.user.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { HumanEmail } from "./email_pb.js";
import { HumanPhone } from "./phone_pb.js";

/**
 * @generated from enum zitadel.user.v2beta.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: GENDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: GENDER_FEMALE = 1;
   */
  FEMALE = 1,

  /**
   * @generated from enum value: GENDER_MALE = 2;
   */
  MALE = 2,

  /**
   * @generated from enum value: GENDER_DIVERSE = 3;
   */
  DIVERSE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Gender)
proto3.util.setEnumType(Gender, "zitadel.user.v2beta.Gender", [
  { no: 0, name: "GENDER_UNSPECIFIED" },
  { no: 1, name: "GENDER_FEMALE" },
  { no: 2, name: "GENDER_MALE" },
  { no: 3, name: "GENDER_DIVERSE" },
]);

/**
 * @generated from enum zitadel.user.v2beta.AccessTokenType
 */
export enum AccessTokenType {
  /**
   * @generated from enum value: ACCESS_TOKEN_TYPE_BEARER = 0;
   */
  BEARER = 0,

  /**
   * @generated from enum value: ACCESS_TOKEN_TYPE_JWT = 1;
   */
  JWT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AccessTokenType)
proto3.util.setEnumType(AccessTokenType, "zitadel.user.v2beta.AccessTokenType", [
  { no: 0, name: "ACCESS_TOKEN_TYPE_BEARER" },
  { no: 1, name: "ACCESS_TOKEN_TYPE_JWT" },
]);

/**
 * @generated from enum zitadel.user.v2beta.UserState
 */
export enum UserState {
  /**
   * @generated from enum value: USER_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: USER_STATE_INACTIVE = 2;
   */
  INACTIVE = 2,

  /**
   * @generated from enum value: USER_STATE_DELETED = 3;
   */
  DELETED = 3,

  /**
   * @generated from enum value: USER_STATE_LOCKED = 4;
   */
  LOCKED = 4,

  /**
   * @generated from enum value: USER_STATE_INITIAL = 5;
   */
  INITIAL = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(UserState)
proto3.util.setEnumType(UserState, "zitadel.user.v2beta.UserState", [
  { no: 0, name: "USER_STATE_UNSPECIFIED" },
  { no: 1, name: "USER_STATE_ACTIVE" },
  { no: 2, name: "USER_STATE_INACTIVE" },
  { no: 3, name: "USER_STATE_DELETED" },
  { no: 4, name: "USER_STATE_LOCKED" },
  { no: 5, name: "USER_STATE_INITIAL" },
]);

/**
 * @generated from message zitadel.user.v2beta.SetHumanProfile
 */
export class SetHumanProfile extends Message<SetHumanProfile> {
  /**
   * @generated from field: string given_name = 1;
   */
  givenName = "";

  /**
   * @generated from field: string family_name = 2;
   */
  familyName = "";

  /**
   * @generated from field: optional string nick_name = 3;
   */
  nickName?: string;

  /**
   * @generated from field: optional string display_name = 4;
   */
  displayName?: string;

  /**
   * @generated from field: optional string preferred_language = 5;
   */
  preferredLanguage?: string;

  /**
   * @generated from field: optional zitadel.user.v2beta.Gender gender = 6;
   */
  gender?: Gender;

  constructor(data?: PartialMessage<SetHumanProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.SetHumanProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nick_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "preferred_language", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "gender", kind: "enum", T: proto3.getEnumType(Gender), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetHumanProfile {
    return new SetHumanProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetHumanProfile {
    return new SetHumanProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetHumanProfile {
    return new SetHumanProfile().fromJsonString(jsonString, options);
  }

  static equals(a: SetHumanProfile | PlainMessage<SetHumanProfile> | undefined, b: SetHumanProfile | PlainMessage<SetHumanProfile> | undefined): boolean {
    return proto3.util.equals(SetHumanProfile, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.HumanProfile
 */
export class HumanProfile extends Message<HumanProfile> {
  /**
   * @generated from field: string given_name = 1;
   */
  givenName = "";

  /**
   * @generated from field: string family_name = 2;
   */
  familyName = "";

  /**
   * @generated from field: optional string nick_name = 3;
   */
  nickName?: string;

  /**
   * @generated from field: optional string display_name = 4;
   */
  displayName?: string;

  /**
   * @generated from field: optional string preferred_language = 5;
   */
  preferredLanguage?: string;

  /**
   * @generated from field: optional zitadel.user.v2beta.Gender gender = 6;
   */
  gender?: Gender;

  /**
   * @generated from field: string avatar_url = 7;
   */
  avatarUrl = "";

  constructor(data?: PartialMessage<HumanProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.HumanProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nick_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "preferred_language", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "gender", kind: "enum", T: proto3.getEnumType(Gender), opt: true },
    { no: 7, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanProfile {
    return new HumanProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanProfile {
    return new HumanProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanProfile {
    return new HumanProfile().fromJsonString(jsonString, options);
  }

  static equals(a: HumanProfile | PlainMessage<HumanProfile> | undefined, b: HumanProfile | PlainMessage<HumanProfile> | undefined): boolean {
    return proto3.util.equals(HumanProfile, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.SetMetadataEntry
 */
export class SetMetadataEntry extends Message<SetMetadataEntry> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SetMetadataEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.SetMetadataEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetMetadataEntry {
    return new SetMetadataEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetMetadataEntry {
    return new SetMetadataEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetMetadataEntry {
    return new SetMetadataEntry().fromJsonString(jsonString, options);
  }

  static equals(a: SetMetadataEntry | PlainMessage<SetMetadataEntry> | undefined, b: SetMetadataEntry | PlainMessage<SetMetadataEntry> | undefined): boolean {
    return proto3.util.equals(SetMetadataEntry, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.HumanUser
 */
export class HumanUser extends Message<HumanUser> {
  /**
   * Unique identifier of the user.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * State of the user, for example active, inactive, locked, deleted, initial.
   *
   * @generated from field: zitadel.user.v2beta.UserState state = 2;
   */
  state = UserState.UNSPECIFIED;

  /**
   * Username of the user, which can be globally unique or unique on organization level.
   *
   * @generated from field: string username = 3;
   */
  username = "";

  /**
   * Possible usable login names for the user.
   *
   * @generated from field: repeated string login_names = 4;
   */
  loginNames: string[] = [];

  /**
   * Preferred login name of the user.
   *
   * @generated from field: string preferred_login_name = 5;
   */
  preferredLoginName = "";

  /**
   * Profile information of the user.
   *
   * @generated from field: zitadel.user.v2beta.HumanProfile profile = 6;
   */
  profile?: HumanProfile;

  /**
   * Email of the user, if defined.
   *
   * @generated from field: zitadel.user.v2beta.HumanEmail email = 7;
   */
  email?: HumanEmail;

  /**
   * Phone of the user, if defined.
   *
   * @generated from field: zitadel.user.v2beta.HumanPhone phone = 8;
   */
  phone?: HumanPhone;

  /**
   * User is required to change the used password on the next login.
   *
   * @generated from field: bool password_change_required = 9;
   */
  passwordChangeRequired = false;

  /**
   * The time the user last changed their password.
   *
   * @generated from field: google.protobuf.Timestamp password_changed = 10;
   */
  passwordChanged?: Timestamp;

  constructor(data?: PartialMessage<HumanUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.HumanUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(UserState) },
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "login_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "preferred_login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "profile", kind: "message", T: HumanProfile },
    { no: 7, name: "email", kind: "message", T: HumanEmail },
    { no: 8, name: "phone", kind: "message", T: HumanPhone },
    { no: 9, name: "password_change_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "password_changed", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanUser {
    return new HumanUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanUser {
    return new HumanUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanUser {
    return new HumanUser().fromJsonString(jsonString, options);
  }

  static equals(a: HumanUser | PlainMessage<HumanUser> | undefined, b: HumanUser | PlainMessage<HumanUser> | undefined): boolean {
    return proto3.util.equals(HumanUser, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: zitadel.user.v2beta.UserState state = 2;
   */
  state = UserState.UNSPECIFIED;

  /**
   * @generated from field: string username = 3;
   */
  username = "";

  /**
   * @generated from field: repeated string login_names = 4;
   */
  loginNames: string[] = [];

  /**
   * @generated from field: string preferred_login_name = 5;
   */
  preferredLoginName = "";

  /**
   * @generated from oneof zitadel.user.v2beta.User.type
   */
  type: {
    /**
     * @generated from field: zitadel.user.v2beta.HumanUser human = 6;
     */
    value: HumanUser;
    case: "human";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.MachineUser machine = 7;
     */
    value: MachineUser;
    case: "machine";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(UserState) },
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "login_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "preferred_login_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "human", kind: "message", T: HumanUser, oneof: "type" },
    { no: 7, name: "machine", kind: "message", T: MachineUser, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message zitadel.user.v2beta.MachineUser
 */
export class MachineUser extends Message<MachineUser> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bool has_secret = 3;
   */
  hasSecret = false;

  /**
   * @generated from field: zitadel.user.v2beta.AccessTokenType access_token_type = 4;
   */
  accessTokenType = AccessTokenType.BEARER;

  constructor(data?: PartialMessage<MachineUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "zitadel.user.v2beta.MachineUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "has_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "access_token_type", kind: "enum", T: proto3.getEnumType(AccessTokenType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineUser {
    return new MachineUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineUser {
    return new MachineUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineUser {
    return new MachineUser().fromJsonString(jsonString, options);
  }

  static equals(a: MachineUser | PlainMessage<MachineUser> | undefined, b: MachineUser | PlainMessage<MachineUser> | undefined): boolean {
    return proto3.util.equals(MachineUser, a, b);
  }
}

