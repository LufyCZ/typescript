// @generated by protoc-gen-connect-es v0.13.0
// @generated from file zitadel/user/v3alpha/user_service.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddIDPAuthenticatorRequest, AddIDPAuthenticatorResponse, AddOTPEmailAuthenticatorRequest, AddOTPEmailAuthenticatorResponse, AddOTPSMSAuthenticatorRequest, AddOTPSMSAuthenticatorResponse, AddUsernameRequest, AddUsernameResponse, CreateUserRequest, CreateUserResponse, CreateWebAuthNRegistrationLinkRequest, CreateWebAuthNRegistrationLinkResponse, DeactivateUserRequest, DeactivateUserResponse, DeleteUserRequest, DeleteUserResponse, GetUserByIDRequest, GetUserByIDResponse, ListUsersRequest, ListUsersResponse, LockUserRequest, LockUserResponse, ReactivateUserRequest, ReactivateUserResponse, RemoveIDPAuthenticatorRequest, RemoveIDPAuthenticatorResponse, RemoveOTPEmailAuthenticatorRequest, RemoveOTPEmailAuthenticatorResponse, RemoveOTPSMSAuthenticatorRequest, RemoveOTPSMSAuthenticatorResponse, RemoveTOTPAuthenticatorRequest, RemoveTOTPAuthenticatorResponse, RemoveUsernameRequest, RemoveUsernameResponse, RemoveWebAuthNAuthenticatorRequest, RemoveWebAuthNAuthenticatorResponse, RequestPasswordResetRequest, RequestPasswordResetResponse, ResendContactEmailCodeRequest, ResendContactEmailCodeResponse, ResendContactPhoneCodeRequest, ResendContactPhoneCodeResponse, RetrieveIdentityProviderIntentRequest, RetrieveIdentityProviderIntentResponse, SetContactEmailRequest, SetContactEmailResponse, SetContactPhoneRequest, SetContactPhoneResponse, SetPasswordRequest, SetPasswordResponse, StartIdentityProviderIntentRequest, StartIdentityProviderIntentResponse, StartTOTPRegistrationRequest, StartTOTPRegistrationResponse, StartWebAuthNRegistrationRequest, StartWebAuthNRegistrationResponse, UnlockUserRequest, UnlockUserResponse, UpdateUserRequest, UpdateUserResponse, VerifyContactEmailRequest, VerifyContactEmailResponse, VerifyContactPhoneRequest, VerifyContactPhoneResponse, VerifyOTPEmailRegistrationRequest, VerifyOTPEmailRegistrationResponse, VerifyOTPSMSRegistrationRequest, VerifyOTPSMSRegistrationResponse, VerifyTOTPRegistrationRequest, VerifyTOTPRegistrationResponse, VerifyWebAuthNRegistrationRequest, VerifyWebAuthNRegistrationResponse } from "./user_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service zitadel.user.v3alpha.UserService
 */
export declare const UserService: {
  readonly typeName: "zitadel.user.v3alpha.UserService",
  readonly methods: {
    /**
     * List users
     *
     * List all matching users. By default, we will return all users of your instance.
     * Make sure to include a limit and sorting for pagination.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.ListUsers
     */
    readonly listUsers: {
      readonly name: "ListUsers",
      readonly I: typeof ListUsersRequest,
      readonly O: typeof ListUsersResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * User by ID
     *
     * Returns the user identified by the requested ID.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.GetUserByID
     */
    readonly getUserByID: {
      readonly name: "GetUserByID",
      readonly I: typeof GetUserByIDRequest,
      readonly O: typeof GetUserByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a user
     *
     * Create a new user with an optional data schema.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.CreateUser
     */
    readonly createUser: {
      readonly name: "CreateUser",
      readonly I: typeof CreateUserRequest,
      readonly O: typeof CreateUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update a user
     *
     * Update an existing user with data based on a user schema.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.UpdateUser
     */
    readonly updateUser: {
      readonly name: "UpdateUser",
      readonly I: typeof UpdateUserRequest,
      readonly O: typeof UpdateUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Deactivate a user
     *
     * Deactivate an existing user and change the state 'deactivated'.
     * The user will not be able to log in anymore.
     * Use deactivate user when the user should not be able to use the account anymore,
     * but you still need access to the user data.
     *
     * The endpoint returns an error if the user is already in the state 'deactivated'.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.DeactivateUser
     */
    readonly deactivateUser: {
      readonly name: "DeactivateUser",
      readonly I: typeof DeactivateUserRequest,
      readonly O: typeof DeactivateUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Reactivate a user
     *
     * Reactivate a previously deactivated user and change the state to 'active'.
     * The user will be able to log in again.
     *
     * The endpoint returns an error if the user is not in the state 'deactivated'.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.ReactivateUser
     */
    readonly reactivateUser: {
      readonly name: "ReactivateUser",
      readonly I: typeof ReactivateUserRequest,
      readonly O: typeof ReactivateUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Lock a user
     *
     * Lock an existing user and change the state 'locked'.
     * The user will not be able to log in anymore.
     * Use lock user when the user should temporarily not be able to log in
     * because of an event that happened (wrong password, etc.)
     *
     * The endpoint returns an error if the user is already in the state 'locked'.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.LockUser
     */
    readonly lockUser: {
      readonly name: "LockUser",
      readonly I: typeof LockUserRequest,
      readonly O: typeof LockUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Unlock a user
     *
     * Unlock a previously locked user and change the state to 'active'.
     * The user will be able to log in again.
     *
     * The endpoint returns an error if the user is not in the state 'locked'.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.UnlockUser
     */
    readonly unlockUser: {
      readonly name: "UnlockUser",
      readonly I: typeof UnlockUserRequest,
      readonly O: typeof UnlockUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Delete a user
     *
     * Delete an existing user and change the state to 'deleted'.
     * The user will be able to log in anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.DeleteUser
     */
    readonly deleteUser: {
      readonly name: "DeleteUser",
      readonly I: typeof DeleteUserRequest,
      readonly O: typeof DeleteUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set contact email
     *
     * Add or update the contact email address of a user.
     * If the email is not passed as verified, a verification code will be generated,
     * which can be either returned or will be sent to the user by email.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.SetContactEmail
     */
    readonly setContactEmail: {
      readonly name: "SetContactEmail",
      readonly I: typeof SetContactEmailRequest,
      readonly O: typeof SetContactEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify the contact email
     *
     * Verify the contact email with the provided code.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.VerifyContactEmail
     */
    readonly verifyContactEmail: {
      readonly name: "VerifyContactEmail",
      readonly I: typeof VerifyContactEmailRequest,
      readonly O: typeof VerifyContactEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Resend the contact email code
     *
     * Resend the email with the verification code for the contact email address.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.ResendContactEmailCode
     */
    readonly resendContactEmailCode: {
      readonly name: "ResendContactEmailCode",
      readonly I: typeof ResendContactEmailCodeRequest,
      readonly O: typeof ResendContactEmailCodeResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set contact phone
     *
     * Add or update the contact phone number of a user.
     * If the phone is not passed as verified, a verification code will be generated,
     * which can be either returned or will be sent to the user by SMS.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.SetContactPhone
     */
    readonly setContactPhone: {
      readonly name: "SetContactPhone",
      readonly I: typeof SetContactPhoneRequest,
      readonly O: typeof SetContactPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify the contact phone
     *
     * Verify the contact phone with the provided code.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.VerifyContactPhone
     */
    readonly verifyContactPhone: {
      readonly name: "VerifyContactPhone",
      readonly I: typeof VerifyContactPhoneRequest,
      readonly O: typeof VerifyContactPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Resend the contact phone code
     *
     * Resend the phone with the verification code for the contact phone number.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.ResendContactPhoneCode
     */
    readonly resendContactPhoneCode: {
      readonly name: "ResendContactPhoneCode",
      readonly I: typeof ResendContactPhoneCodeRequest,
      readonly O: typeof ResendContactPhoneCodeResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a username
     *
     * Add a new unique username to a user. The username will be used to identify the user on authentication.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.AddUsername
     */
    readonly addUsername: {
      readonly name: "AddUsername",
      readonly I: typeof AddUsernameRequest,
      readonly O: typeof AddUsernameResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a username
     *
     * Remove an existing username of a user, so it cannot be used for authentication anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RemoveUsername
     */
    readonly removeUsername: {
      readonly name: "RemoveUsername",
      readonly I: typeof RemoveUsernameRequest,
      readonly O: typeof RemoveUsernameResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set a password
     *
     * Add, update or reset a user's password with either a verification code or the current password.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.SetPassword
     */
    readonly setPassword: {
      readonly name: "SetPassword",
      readonly I: typeof SetPasswordRequest,
      readonly O: typeof SetPasswordResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Request password reset
     *
     * Request a code to be able to set a new password.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RequestPasswordReset
     */
    readonly requestPasswordReset: {
      readonly name: "RequestPasswordReset",
      readonly I: typeof RequestPasswordResetRequest,
      readonly O: typeof RequestPasswordResetResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Start a WebAuthN registration
     *
     * Start the registration of a new WebAuthN device (e.g. Passkeys) for a user.
     * As a response the public key credential creation options are returned,
     * which are used to verify the device.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.StartWebAuthNRegistration
     */
    readonly startWebAuthNRegistration: {
      readonly name: "StartWebAuthNRegistration",
      readonly I: typeof StartWebAuthNRegistrationRequest,
      readonly O: typeof StartWebAuthNRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify a WebAuthN registration
     *
     * Verify the WebAuthN registration started by StartWebAuthNRegistration with the public key credential.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.VerifyWebAuthNRegistration
     */
    readonly verifyWebAuthNRegistration: {
      readonly name: "VerifyWebAuthNRegistration",
      readonly I: typeof VerifyWebAuthNRegistrationRequest,
      readonly O: typeof VerifyWebAuthNRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a WebAuthN registration link
     *
     * Create a link, which includes a code, that can either be returned or directly sent to the user.
     * The code will allow the user to start a new WebAuthN registration.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.CreateWebAuthNRegistrationLink
     */
    readonly createWebAuthNRegistrationLink: {
      readonly name: "CreateWebAuthNRegistrationLink",
      readonly I: typeof CreateWebAuthNRegistrationLinkRequest,
      readonly O: typeof CreateWebAuthNRegistrationLinkResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a WebAuthN authenticator
     *
     * Remove an existing WebAuthN authenticator from a user, so it cannot be used for authentication anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RemoveWebAuthNAuthenticator
     */
    readonly removeWebAuthNAuthenticator: {
      readonly name: "RemoveWebAuthNAuthenticator",
      readonly I: typeof RemoveWebAuthNAuthenticatorRequest,
      readonly O: typeof RemoveWebAuthNAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Start a TOTP registration
     *
     * Start the registration of a new time-based one-time-password (TOTP) generator for a user.
     * As a response a secret is returned, which is used to initialize a TOTP app or device.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.StartTOTPRegistration
     */
    readonly startTOTPRegistration: {
      readonly name: "StartTOTPRegistration",
      readonly I: typeof StartTOTPRegistrationRequest,
      readonly O: typeof StartTOTPRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify a TOTP registration
     *
     * Verify the time-based one-time-password (TOTP) registration with the generated code.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.VerifyTOTPRegistration
     */
    readonly verifyTOTPRegistration: {
      readonly name: "VerifyTOTPRegistration",
      readonly I: typeof VerifyTOTPRegistrationRequest,
      readonly O: typeof VerifyTOTPRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a TOTP authenticator
     *
     * Remove an existing time-based one-time-password (TOTP) authenticator from a user, so it cannot be used for authentication anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RemoveTOTPAuthenticator
     */
    readonly removeTOTPAuthenticator: {
      readonly name: "RemoveTOTPAuthenticator",
      readonly I: typeof RemoveTOTPAuthenticatorRequest,
      readonly O: typeof RemoveTOTPAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a OTP SMS authenticator
     *
     * Add a new one-time-password (OTP) SMS authenticator to a user.
     * If the phone is not passed as verified, a verification code will be generated,
     * which can be either returned or will be sent to the user by SMS.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.AddOTPSMSAuthenticator
     */
    readonly addOTPSMSAuthenticator: {
      readonly name: "AddOTPSMSAuthenticator",
      readonly I: typeof AddOTPSMSAuthenticatorRequest,
      readonly O: typeof AddOTPSMSAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify OTP SMS registration
     *
     * Verify the OTP SMS registration with the provided code.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.VerifyOTPSMSRegistration
     */
    readonly verifyOTPSMSRegistration: {
      readonly name: "VerifyOTPSMSRegistration",
      readonly I: typeof VerifyOTPSMSRegistrationRequest,
      readonly O: typeof VerifyOTPSMSRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a OTP SMS authenticator
     *
     * Remove an existing one-time-password (OTP) SMS authenticator from a user, so it cannot be used for authentication anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RemoveOTPSMSAuthenticator
     */
    readonly removeOTPSMSAuthenticator: {
      readonly name: "RemoveOTPSMSAuthenticator",
      readonly I: typeof RemoveOTPSMSAuthenticatorRequest,
      readonly O: typeof RemoveOTPSMSAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a OTP Email authenticator
     *
     * Add a new one-time-password (OTP) Email authenticator to a user.
     * If the email is not passed as verified, a verification code will be generated,
     * which can be either returned or will be sent to the user by email.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.AddOTPEmailAuthenticator
     */
    readonly addOTPEmailAuthenticator: {
      readonly name: "AddOTPEmailAuthenticator",
      readonly I: typeof AddOTPEmailAuthenticatorRequest,
      readonly O: typeof AddOTPEmailAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify OTP Email registration
     *
     * Verify the OTP Email registration with the provided code.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.VerifyOTPEmailRegistration
     */
    readonly verifyOTPEmailRegistration: {
      readonly name: "VerifyOTPEmailRegistration",
      readonly I: typeof VerifyOTPEmailRegistrationRequest,
      readonly O: typeof VerifyOTPEmailRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a OTP Email authenticator
     *
     * Remove an existing one-time-password (OTP) Email authenticator from a user, so it cannot be used for authentication anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RemoveOTPEmailAuthenticator
     */
    readonly removeOTPEmailAuthenticator: {
      readonly name: "RemoveOTPEmailAuthenticator",
      readonly I: typeof RemoveOTPEmailAuthenticatorRequest,
      readonly O: typeof RemoveOTPEmailAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Start an IDP authentication intent
     *
     * Start a new authentication intent on configured identity provider (IDP) for external login, registration or linking.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.StartIdentityProviderIntent
     */
    readonly startIdentityProviderIntent: {
      readonly name: "StartIdentityProviderIntent",
      readonly I: typeof StartIdentityProviderIntentRequest,
      readonly O: typeof StartIdentityProviderIntentResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Retrieve the information of the IDP authentication intent
     *
     * Retrieve the information returned by the identity provider (IDP) for registration or updating an existing user with new information.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RetrieveIdentityProviderIntent
     */
    readonly retrieveIdentityProviderIntent: {
      readonly name: "RetrieveIdentityProviderIntent",
      readonly I: typeof RetrieveIdentityProviderIntentRequest,
      readonly O: typeof RetrieveIdentityProviderIntentResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add an IDP authenticator to a user
     *
     * Add a new identity provider (IDP) authenticator to an existing user.
     * This will allow the user to authenticate with the provided IDP.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.AddIDPAuthenticator
     */
    readonly addIDPAuthenticator: {
      readonly name: "AddIDPAuthenticator",
      readonly I: typeof AddIDPAuthenticatorRequest,
      readonly O: typeof AddIDPAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove an IDP authenticator
     *
     * Remove an existing identity provider (IDP) authenticator from a user, so it cannot be used for authentication anymore.
     *
     * @generated from rpc zitadel.user.v3alpha.UserService.RemoveIDPAuthenticator
     */
    readonly removeIDPAuthenticator: {
      readonly name: "RemoveIDPAuthenticator",
      readonly I: typeof RemoveIDPAuthenticatorRequest,
      readonly O: typeof RemoveIDPAuthenticatorResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

