/**
 * @fileoverview gRPC-Web generated client stub for zitadel.user.v2alpha
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: zitadel/user/v2alpha/user_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as zitadel_user_v2alpha_user_service_pb from '../../../zitadel/user/v2alpha/user_service_pb';


export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddHumanUser = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/AddHumanUser',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.AddHumanUserRequest,
    zitadel_user_v2alpha_user_service_pb.AddHumanUserResponse,
    (request: zitadel_user_v2alpha_user_service_pb.AddHumanUserRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.AddHumanUserResponse.deserializeBinary
  );

  addHumanUser(
    request: zitadel_user_v2alpha_user_service_pb.AddHumanUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.AddHumanUserResponse>;

  addHumanUser(
    request: zitadel_user_v2alpha_user_service_pb.AddHumanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.AddHumanUserResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.AddHumanUserResponse>;

  addHumanUser(
    request: zitadel_user_v2alpha_user_service_pb.AddHumanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.AddHumanUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/AddHumanUser',
        request,
        metadata || {},
        this.methodDescriptorAddHumanUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/AddHumanUser',
    request,
    metadata || {},
    this.methodDescriptorAddHumanUser);
  }

  methodDescriptorSetEmail = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/SetEmail',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.SetEmailRequest,
    zitadel_user_v2alpha_user_service_pb.SetEmailResponse,
    (request: zitadel_user_v2alpha_user_service_pb.SetEmailRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.SetEmailResponse.deserializeBinary
  );

  setEmail(
    request: zitadel_user_v2alpha_user_service_pb.SetEmailRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.SetEmailResponse>;

  setEmail(
    request: zitadel_user_v2alpha_user_service_pb.SetEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.SetEmailResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.SetEmailResponse>;

  setEmail(
    request: zitadel_user_v2alpha_user_service_pb.SetEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.SetEmailResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/SetEmail',
        request,
        metadata || {},
        this.methodDescriptorSetEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/SetEmail',
    request,
    metadata || {},
    this.methodDescriptorSetEmail);
  }

  methodDescriptorVerifyEmail = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/VerifyEmail',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.VerifyEmailRequest,
    zitadel_user_v2alpha_user_service_pb.VerifyEmailResponse,
    (request: zitadel_user_v2alpha_user_service_pb.VerifyEmailRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.VerifyEmailResponse.deserializeBinary
  );

  verifyEmail(
    request: zitadel_user_v2alpha_user_service_pb.VerifyEmailRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.VerifyEmailResponse>;

  verifyEmail(
    request: zitadel_user_v2alpha_user_service_pb.VerifyEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.VerifyEmailResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.VerifyEmailResponse>;

  verifyEmail(
    request: zitadel_user_v2alpha_user_service_pb.VerifyEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.VerifyEmailResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/VerifyEmail',
        request,
        metadata || {},
        this.methodDescriptorVerifyEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/VerifyEmail',
    request,
    metadata || {},
    this.methodDescriptorVerifyEmail);
  }

  methodDescriptorRegisterPasskey = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/RegisterPasskey',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.RegisterPasskeyRequest,
    zitadel_user_v2alpha_user_service_pb.RegisterPasskeyResponse,
    (request: zitadel_user_v2alpha_user_service_pb.RegisterPasskeyRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.RegisterPasskeyResponse.deserializeBinary
  );

  registerPasskey(
    request: zitadel_user_v2alpha_user_service_pb.RegisterPasskeyRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.RegisterPasskeyResponse>;

  registerPasskey(
    request: zitadel_user_v2alpha_user_service_pb.RegisterPasskeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.RegisterPasskeyResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.RegisterPasskeyResponse>;

  registerPasskey(
    request: zitadel_user_v2alpha_user_service_pb.RegisterPasskeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.RegisterPasskeyResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/RegisterPasskey',
        request,
        metadata || {},
        this.methodDescriptorRegisterPasskey,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/RegisterPasskey',
    request,
    metadata || {},
    this.methodDescriptorRegisterPasskey);
  }

  methodDescriptorVerifyPasskeyRegistration = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/VerifyPasskeyRegistration',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationRequest,
    zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationResponse,
    (request: zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationResponse.deserializeBinary
  );

  verifyPasskeyRegistration(
    request: zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationResponse>;

  verifyPasskeyRegistration(
    request: zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationResponse>;

  verifyPasskeyRegistration(
    request: zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.VerifyPasskeyRegistrationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/VerifyPasskeyRegistration',
        request,
        metadata || {},
        this.methodDescriptorVerifyPasskeyRegistration,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/VerifyPasskeyRegistration',
    request,
    metadata || {},
    this.methodDescriptorVerifyPasskeyRegistration);
  }

  methodDescriptorCreatePasskeyRegistrationLink = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/CreatePasskeyRegistrationLink',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkRequest,
    zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkResponse,
    (request: zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkResponse.deserializeBinary
  );

  createPasskeyRegistrationLink(
    request: zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkResponse>;

  createPasskeyRegistrationLink(
    request: zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkResponse>;

  createPasskeyRegistrationLink(
    request: zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.CreatePasskeyRegistrationLinkResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/CreatePasskeyRegistrationLink',
        request,
        metadata || {},
        this.methodDescriptorCreatePasskeyRegistrationLink,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/CreatePasskeyRegistrationLink',
    request,
    metadata || {},
    this.methodDescriptorCreatePasskeyRegistrationLink);
  }

  methodDescriptorStartIdentityProviderFlow = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/StartIdentityProviderFlow',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowRequest,
    zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowResponse,
    (request: zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowResponse.deserializeBinary
  );

  startIdentityProviderFlow(
    request: zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowResponse>;

  startIdentityProviderFlow(
    request: zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowResponse>;

  startIdentityProviderFlow(
    request: zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.StartIdentityProviderFlowResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/StartIdentityProviderFlow',
        request,
        metadata || {},
        this.methodDescriptorStartIdentityProviderFlow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/StartIdentityProviderFlow',
    request,
    metadata || {},
    this.methodDescriptorStartIdentityProviderFlow);
  }

  methodDescriptorRetrieveIdentityProviderInformation = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/RetrieveIdentityProviderInformation',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationRequest,
    zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationResponse,
    (request: zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationResponse.deserializeBinary
  );

  retrieveIdentityProviderInformation(
    request: zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationResponse>;

  retrieveIdentityProviderInformation(
    request: zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationResponse>;

  retrieveIdentityProviderInformation(
    request: zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.RetrieveIdentityProviderInformationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/RetrieveIdentityProviderInformation',
        request,
        metadata || {},
        this.methodDescriptorRetrieveIdentityProviderInformation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/RetrieveIdentityProviderInformation',
    request,
    metadata || {},
    this.methodDescriptorRetrieveIdentityProviderInformation);
  }

  methodDescriptorAddIDPLink = new grpcWeb.MethodDescriptor(
    '/zitadel.user.v2alpha.UserService/AddIDPLink',
    grpcWeb.MethodType.UNARY,
    zitadel_user_v2alpha_user_service_pb.AddIDPLinkRequest,
    zitadel_user_v2alpha_user_service_pb.AddIDPLinkResponse,
    (request: zitadel_user_v2alpha_user_service_pb.AddIDPLinkRequest) => {
      return request.serializeBinary();
    },
    zitadel_user_v2alpha_user_service_pb.AddIDPLinkResponse.deserializeBinary
  );

  addIDPLink(
    request: zitadel_user_v2alpha_user_service_pb.AddIDPLinkRequest,
    metadata: grpcWeb.Metadata | null): Promise<zitadel_user_v2alpha_user_service_pb.AddIDPLinkResponse>;

  addIDPLink(
    request: zitadel_user_v2alpha_user_service_pb.AddIDPLinkRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.AddIDPLinkResponse) => void): grpcWeb.ClientReadableStream<zitadel_user_v2alpha_user_service_pb.AddIDPLinkResponse>;

  addIDPLink(
    request: zitadel_user_v2alpha_user_service_pb.AddIDPLinkRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: zitadel_user_v2alpha_user_service_pb.AddIDPLinkResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zitadel.user.v2alpha.UserService/AddIDPLink',
        request,
        metadata || {},
        this.methodDescriptorAddIDPLink,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zitadel.user.v2alpha.UserService/AddIDPLink',
    request,
    metadata || {},
    this.methodDescriptorAddIDPLink);
  }

}

