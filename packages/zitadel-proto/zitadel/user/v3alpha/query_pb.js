// @generated by protoc-gen-es v1.10.0
// @generated from file zitadel/user/v3alpha/query.proto (package zitadel.user.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { TextQueryMethod } from "../../object/v2beta/object_pb.js";
import { State } from "./user_pb.js";

/**
 * @generated from enum zitadel.user.v3alpha.FieldName
 */
export const FieldName = /*@__PURE__*/ proto3.makeEnum(
  "zitadel.user.v3alpha.FieldName",
  [
    {no: 0, name: "FIELD_NAME_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "FIELD_NAME_ID", localName: "ID"},
    {no: 2, name: "FIELD_NAME_CREATION_DATE", localName: "CREATION_DATE"},
    {no: 3, name: "FIELD_NAME_CHANGE_DATE", localName: "CHANGE_DATE"},
    {no: 4, name: "FIELD_NAME_EMAIL", localName: "EMAIL"},
    {no: 5, name: "FIELD_NAME_PHONE", localName: "PHONE"},
    {no: 6, name: "FIELD_NAME_STATE", localName: "STATE"},
    {no: 7, name: "FIELD_NAME_SCHEMA_ID", localName: "SCHEMA_ID"},
    {no: 8, name: "FIELD_NAME_SCHEMA_TYPE", localName: "SCHEMA_TYPE"},
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.SearchQuery
 */
export const SearchQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.SearchQuery",
  () => [
    { no: 1, name: "or_query", kind: "message", T: OrQuery, oneof: "query" },
    { no: 2, name: "and_query", kind: "message", T: AndQuery, oneof: "query" },
    { no: 3, name: "not_query", kind: "message", T: NotQuery, oneof: "query" },
    { no: 4, name: "user_id_query", kind: "message", T: UserIDQuery, oneof: "query" },
    { no: 5, name: "organization_id_query", kind: "message", T: OrganizationIDQuery, oneof: "query" },
    { no: 6, name: "username_query", kind: "message", T: UsernameQuery, oneof: "query" },
    { no: 7, name: "email_query", kind: "message", T: EmailQuery, oneof: "query" },
    { no: 8, name: "phone_query", kind: "message", T: PhoneQuery, oneof: "query" },
    { no: 9, name: "state_query", kind: "message", T: StateQuery, oneof: "query" },
    { no: 10, name: "schema_ID_query", kind: "message", T: SchemaIDQuery, oneof: "query" },
    { no: 11, name: "schema_type_query", kind: "message", T: SchemaTypeQuery, oneof: "query" },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.OrQuery
 */
export const OrQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.OrQuery",
  () => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.AndQuery
 */
export const AndQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.AndQuery",
  () => [
    { no: 1, name: "queries", kind: "message", T: SearchQuery, repeated: true },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.NotQuery
 */
export const NotQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.NotQuery",
  () => [
    { no: 1, name: "query", kind: "message", T: SearchQuery },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.UserIDQuery
 */
export const UserIDQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.UserIDQuery",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.OrganizationIDQuery
 */
export const OrganizationIDQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.OrganizationIDQuery",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.UsernameQuery
 */
export const UsernameQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.UsernameQuery",
  () => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
    { no: 3, name: "is_organization_specific", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.EmailQuery
 */
export const EmailQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.EmailQuery",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.PhoneQuery
 */
export const PhoneQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.PhoneQuery",
  () => [
    { no: 1, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.StateQuery
 */
export const StateQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.StateQuery",
  () => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(State) },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.SchemaIDQuery
 */
export const SchemaIDQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.SchemaIDQuery",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message zitadel.user.v3alpha.SchemaTypeQuery
 */
export const SchemaTypeQuery = /*@__PURE__*/ proto3.makeMessageType(
  "zitadel.user.v3alpha.SchemaTypeQuery",
  () => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "enum", T: proto3.getEnumType(TextQueryMethod) },
  ],
);

