// @generated by protoc-gen-es v1.8.0
// @generated from file zitadel/settings/v2beta/branding_settings.proto (package zitadel.settings.v2beta, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ResourceOwnerType } from "./settings_pb.js";

/**
 * @generated from enum zitadel.settings.v2beta.ThemeMode
 */
export declare enum ThemeMode {
  /**
   * @generated from enum value: THEME_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THEME_MODE_AUTO = 1;
   */
  AUTO = 1,

  /**
   * @generated from enum value: THEME_MODE_LIGHT = 2;
   */
  LIGHT = 2,

  /**
   * @generated from enum value: THEME_MODE_DARK = 3;
   */
  DARK = 3,
}

/**
 * @generated from message zitadel.settings.v2beta.BrandingSettings
 */
export declare class BrandingSettings extends Message<BrandingSettings> {
  /**
   * @generated from field: zitadel.settings.v2beta.Theme light_theme = 1;
   */
  lightTheme?: Theme;

  /**
   * @generated from field: zitadel.settings.v2beta.Theme dark_theme = 2;
   */
  darkTheme?: Theme;

  /**
   * @generated from field: string font_url = 3;
   */
  fontUrl: string;

  /**
   * hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
   *
   * @generated from field: bool hide_login_name_suffix = 4;
   */
  hideLoginNameSuffix: boolean;

  /**
   * @generated from field: bool disable_watermark = 5;
   */
  disableWatermark: boolean;

  /**
   * resource_owner_type returns if the setting is managed on the organization or on the instance
   *
   * @generated from field: zitadel.settings.v2beta.ResourceOwnerType resource_owner_type = 6;
   */
  resourceOwnerType: ResourceOwnerType;

  /**
   * @generated from field: zitadel.settings.v2beta.ThemeMode theme_mode = 7;
   */
  themeMode: ThemeMode;

  constructor(data?: PartialMessage<BrandingSettings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.settings.v2beta.BrandingSettings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrandingSettings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrandingSettings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrandingSettings;

  static equals(a: BrandingSettings | PlainMessage<BrandingSettings> | undefined, b: BrandingSettings | PlainMessage<BrandingSettings> | undefined): boolean;
}

/**
 * @generated from message zitadel.settings.v2beta.Theme
 */
export declare class Theme extends Message<Theme> {
  /**
   * hex value for primary color
   *
   * @generated from field: string primary_color = 1;
   */
  primaryColor: string;

  /**
   * hex value for background color
   *
   * @generated from field: string background_color = 2;
   */
  backgroundColor: string;

  /**
   * hex value for warning color
   *
   * @generated from field: string warn_color = 3;
   */
  warnColor: string;

  /**
   * hex value for font color
   *
   * @generated from field: string font_color = 4;
   */
  fontColor: string;

  /**
   * url where the logo is served
   *
   * @generated from field: string logo_url = 5;
   */
  logoUrl: string;

  /**
   * url where the icon is served
   *
   * @generated from field: string icon_url = 6;
   */
  iconUrl: string;

  constructor(data?: PartialMessage<Theme>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zitadel.settings.v2beta.Theme";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Theme;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Theme;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Theme;

  static equals(a: Theme | PlainMessage<Theme> | undefined, b: Theme | PlainMessage<Theme> | undefined): boolean;
}

